
joystickdeneme_bluepill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b904  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  0800ba18  0800ba18  0001ba18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bdfc  0800bdfc  00020344  2**0
                  CONTENTS
  4 .ARM          00000000  0800bdfc  0800bdfc  00020344  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bdfc  0800bdfc  00020344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bdfc  0800bdfc  0001bdfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be00  0800be00  0001be00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000344  20000000  0800be04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001730  20000344  0800c148  00020344  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a74  0800c148  00021a74  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020344  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002036d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001232d  00000000  00000000  000203b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003478  00000000  00000000  000326dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001198  00000000  00000000  00035b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d4e  00000000  00000000  00036cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b765  00000000  00000000  00037a3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015941  00000000  00000000  000531a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009393f  00000000  00000000  00068ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005938  00000000  00000000  000fc424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00101d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000344 	.word	0x20000344
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b9fc 	.word	0x0800b9fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000348 	.word	0x20000348
 800014c:	0800b9fc 	.word	0x0800b9fc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a8c:	f000 fbd6 	bl	800123c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a90:	f000 f844 	bl	8000b1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a94:	f000 f988 	bl	8000da8 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000a98:	f000 f932 	bl	8000d00 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000a9c:	f000 f8da 	bl	8000c54 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000aa0:	f007 fca2 	bl	80083e8 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000aa4:	f000 f898 	bl	8000bd8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim3);
 8000aa8:	4814      	ldr	r0, [pc, #80]	; (8000afc <main+0x74>)
 8000aaa:	f003 fb0b 	bl	80040c4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim1);
 8000aae:	4814      	ldr	r0, [pc, #80]	; (8000b00 <main+0x78>)
 8000ab0:	f003 fb08 	bl	80040c4 <HAL_TIM_Base_Start_IT>

	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8000ab4:	213c      	movs	r1, #60	; 0x3c
 8000ab6:	4811      	ldr	r0, [pc, #68]	; (8000afc <main+0x74>)
 8000ab8:	f003 fbf8 	bl	80042ac <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8000abc:	213c      	movs	r1, #60	; 0x3c
 8000abe:	4810      	ldr	r0, [pc, #64]	; (8000b00 <main+0x78>)
 8000ac0:	f003 fbf4 	bl	80042ac <HAL_TIM_Encoder_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  encoder1_value = TIM3->CNT;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <main+0x7c>)
 8000ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ac8:	4a0f      	ldr	r2, [pc, #60]	; (8000b08 <main+0x80>)
 8000aca:	6013      	str	r3, [r2, #0]
	  encoder2_value = TIM1->CNT;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <main+0x84>)
 8000ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ad0:	4a0f      	ldr	r2, [pc, #60]	; (8000b10 <main+0x88>)
 8000ad2:	6013      	str	r3, [r2, #0]


	  sprintf(encoder_buffer, "%d %d\n\r", encoder1_value, encoder2_value);
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <main+0x80>)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <main+0x88>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	490d      	ldr	r1, [pc, #52]	; (8000b14 <main+0x8c>)
 8000ade:	480e      	ldr	r0, [pc, #56]	; (8000b18 <main+0x90>)
 8000ae0:	f008 fe3e 	bl	8009760 <siprintf>
	  CDC_Transmit_FS(encoder_buffer, strlen(encoder_buffer));
 8000ae4:	480c      	ldr	r0, [pc, #48]	; (8000b18 <main+0x90>)
 8000ae6:	f7ff fb33 	bl	8000150 <strlen>
 8000aea:	4603      	mov	r3, r0
 8000aec:	4619      	mov	r1, r3
 8000aee:	480a      	ldr	r0, [pc, #40]	; (8000b18 <main+0x90>)
 8000af0:	f007 fd38 	bl	8008564 <CDC_Transmit_FS>
	  HAL_Delay(50);
 8000af4:	2032      	movs	r0, #50	; 0x32
 8000af6:	f000 fc03 	bl	8001300 <HAL_Delay>
  {
 8000afa:	e7e3      	b.n	8000ac4 <main+0x3c>
 8000afc:	200003d8 	.word	0x200003d8
 8000b00:	20000390 	.word	0x20000390
 8000b04:	40000400 	.word	0x40000400
 8000b08:	20000420 	.word	0x20000420
 8000b0c:	40012c00 	.word	0x40012c00
 8000b10:	20000424 	.word	0x20000424
 8000b14:	0800ba18 	.word	0x0800ba18
 8000b18:	20000428 	.word	0x20000428

08000b1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b094      	sub	sp, #80	; 0x50
 8000b20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b26:	2228      	movs	r2, #40	; 0x28
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f008 fe7b 	bl	8009826 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b56:	2300      	movs	r3, #0
 8000b58:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000b68:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b72:	4618      	mov	r0, r3
 8000b74:	f002 fe12 	bl	800379c <HAL_RCC_OscConfig>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000b7e:	f000 f95f 	bl	8000e40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b82:	230f      	movs	r3, #15
 8000b84:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b86:	2302      	movs	r3, #2
 8000b88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b92:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b94:	2300      	movs	r3, #0
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f003 f87e 	bl	8003ca0 <HAL_RCC_ClockConfig>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000baa:	f000 f949 	bl	8000e40 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000bae:	2312      	movs	r3, #18
 8000bb0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000bb2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bb6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000bb8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bbc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f003 f9c9 	bl	8003f58 <HAL_RCCEx_PeriphCLKConfig>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000bcc:	f000 f938 	bl	8000e40 <Error_Handler>
  }
}
 8000bd0:	bf00      	nop
 8000bd2:	3750      	adds	r7, #80	; 0x50
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000be8:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <MX_ADC1_Init+0x74>)
 8000bea:	4a19      	ldr	r2, [pc, #100]	; (8000c50 <MX_ADC1_Init+0x78>)
 8000bec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bee:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <MX_ADC1_Init+0x74>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000bf4:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <MX_ADC1_Init+0x74>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bfa:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <MX_ADC1_Init+0x74>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c00:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <MX_ADC1_Init+0x74>)
 8000c02:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000c06:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c08:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <MX_ADC1_Init+0x74>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000c0e:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <MX_ADC1_Init+0x74>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c14:	480d      	ldr	r0, [pc, #52]	; (8000c4c <MX_ADC1_Init+0x74>)
 8000c16:	f000 fb97 	bl	8001348 <HAL_ADC_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000c20:	f000 f90e 	bl	8000e40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c24:	2301      	movs	r3, #1
 8000c26:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	4619      	mov	r1, r3
 8000c34:	4805      	ldr	r0, [pc, #20]	; (8000c4c <MX_ADC1_Init+0x74>)
 8000c36:	f000 fc5f 	bl	80014f8 <HAL_ADC_ConfigChannel>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000c40:	f000 f8fe 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c44:	bf00      	nop
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000360 	.word	0x20000360
 8000c50:	40012400 	.word	0x40012400

08000c54 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08c      	sub	sp, #48	; 0x30
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c5a:	f107 030c 	add.w	r3, r7, #12
 8000c5e:	2224      	movs	r2, #36	; 0x24
 8000c60:	2100      	movs	r1, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f008 fddf 	bl	8009826 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c70:	4b21      	ldr	r3, [pc, #132]	; (8000cf8 <MX_TIM1_Init+0xa4>)
 8000c72:	4a22      	ldr	r2, [pc, #136]	; (8000cfc <MX_TIM1_Init+0xa8>)
 8000c74:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8000c76:	4b20      	ldr	r3, [pc, #128]	; (8000cf8 <MX_TIM1_Init+0xa4>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7c:	4b1e      	ldr	r3, [pc, #120]	; (8000cf8 <MX_TIM1_Init+0xa4>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000c82:	4b1d      	ldr	r3, [pc, #116]	; (8000cf8 <MX_TIM1_Init+0xa4>)
 8000c84:	2263      	movs	r2, #99	; 0x63
 8000c86:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c88:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <MX_TIM1_Init+0xa4>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c8e:	4b1a      	ldr	r3, [pc, #104]	; (8000cf8 <MX_TIM1_Init+0xa4>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c94:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <MX_TIM1_Init+0xa4>)
 8000c96:	2280      	movs	r2, #128	; 0x80
 8000c98:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 12;
 8000caa:	230c      	movs	r3, #12
 8000cac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 12;
 8000cba:	230c      	movs	r3, #12
 8000cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000cbe:	f107 030c 	add.w	r3, r7, #12
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	480c      	ldr	r0, [pc, #48]	; (8000cf8 <MX_TIM1_Init+0xa4>)
 8000cc6:	f003 fa4f 	bl	8004168 <HAL_TIM_Encoder_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8000cd0:	f000 f8b6 	bl	8000e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <MX_TIM1_Init+0xa4>)
 8000ce2:	f003 fc17 	bl	8004514 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000cec:	f000 f8a8 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000cf0:	bf00      	nop
 8000cf2:	3730      	adds	r7, #48	; 0x30
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000390 	.word	0x20000390
 8000cfc:	40012c00 	.word	0x40012c00

08000d00 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08c      	sub	sp, #48	; 0x30
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d06:	f107 030c 	add.w	r3, r7, #12
 8000d0a:	2224      	movs	r2, #36	; 0x24
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f008 fd89 	bl	8009826 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d1c:	4b20      	ldr	r3, [pc, #128]	; (8000da0 <MX_TIM3_Init+0xa0>)
 8000d1e:	4a21      	ldr	r2, [pc, #132]	; (8000da4 <MX_TIM3_Init+0xa4>)
 8000d20:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8000d22:	4b1f      	ldr	r3, [pc, #124]	; (8000da0 <MX_TIM3_Init+0xa0>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d28:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <MX_TIM3_Init+0xa0>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000d2e:	4b1c      	ldr	r3, [pc, #112]	; (8000da0 <MX_TIM3_Init+0xa0>)
 8000d30:	2263      	movs	r2, #99	; 0x63
 8000d32:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d34:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <MX_TIM3_Init+0xa0>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d3a:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <MX_TIM3_Init+0xa0>)
 8000d3c:	2280      	movs	r2, #128	; 0x80
 8000d3e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d40:	2303      	movs	r3, #3
 8000d42:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d44:	2300      	movs	r3, #0
 8000d46:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 12;
 8000d50:	230c      	movs	r3, #12
 8000d52:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d54:	2300      	movs	r3, #0
 8000d56:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 12;
 8000d60:	230c      	movs	r3, #12
 8000d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000d64:	f107 030c 	add.w	r3, r7, #12
 8000d68:	4619      	mov	r1, r3
 8000d6a:	480d      	ldr	r0, [pc, #52]	; (8000da0 <MX_TIM3_Init+0xa0>)
 8000d6c:	f003 f9fc 	bl	8004168 <HAL_TIM_Encoder_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000d76:	f000 f863 	bl	8000e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	4619      	mov	r1, r3
 8000d86:	4806      	ldr	r0, [pc, #24]	; (8000da0 <MX_TIM3_Init+0xa0>)
 8000d88:	f003 fbc4 	bl	8004514 <HAL_TIMEx_MasterConfigSynchronization>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000d92:	f000 f855 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	3730      	adds	r7, #48	; 0x30
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	200003d8 	.word	0x200003d8
 8000da4:	40000400 	.word	0x40000400

08000da8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b088      	sub	sp, #32
 8000dac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dae:	f107 0310 	add.w	r3, r7, #16
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dbc:	4b1e      	ldr	r3, [pc, #120]	; (8000e38 <MX_GPIO_Init+0x90>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	4a1d      	ldr	r2, [pc, #116]	; (8000e38 <MX_GPIO_Init+0x90>)
 8000dc2:	f043 0310 	orr.w	r3, r3, #16
 8000dc6:	6193      	str	r3, [r2, #24]
 8000dc8:	4b1b      	ldr	r3, [pc, #108]	; (8000e38 <MX_GPIO_Init+0x90>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	f003 0310 	and.w	r3, r3, #16
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dd4:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <MX_GPIO_Init+0x90>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	4a17      	ldr	r2, [pc, #92]	; (8000e38 <MX_GPIO_Init+0x90>)
 8000dda:	f043 0320 	orr.w	r3, r3, #32
 8000dde:	6193      	str	r3, [r2, #24]
 8000de0:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <MX_GPIO_Init+0x90>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	f003 0320 	and.w	r3, r3, #32
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dec:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <MX_GPIO_Init+0x90>)
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	4a11      	ldr	r2, [pc, #68]	; (8000e38 <MX_GPIO_Init+0x90>)
 8000df2:	f043 0304 	orr.w	r3, r3, #4
 8000df6:	6193      	str	r3, [r2, #24]
 8000df8:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <MX_GPIO_Init+0x90>)
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	f003 0304 	and.w	r3, r3, #4
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e04:	2200      	movs	r2, #0
 8000e06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e0a:	480c      	ldr	r0, [pc, #48]	; (8000e3c <MX_GPIO_Init+0x94>)
 8000e0c:	f000 ff40 	bl	8001c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e16:	2301      	movs	r3, #1
 8000e18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e22:	f107 0310 	add.w	r3, r7, #16
 8000e26:	4619      	mov	r1, r3
 8000e28:	4804      	ldr	r0, [pc, #16]	; (8000e3c <MX_GPIO_Init+0x94>)
 8000e2a:	f000 fdad 	bl	8001988 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e2e:	bf00      	nop
 8000e30:	3720      	adds	r7, #32
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	40011000 	.word	0x40011000

08000e40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e44:	b672      	cpsid	i
}
 8000e46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <Error_Handler+0x8>
	...

08000e4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e52:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <HAL_MspInit+0x5c>)
 8000e54:	699b      	ldr	r3, [r3, #24]
 8000e56:	4a14      	ldr	r2, [pc, #80]	; (8000ea8 <HAL_MspInit+0x5c>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	6193      	str	r3, [r2, #24]
 8000e5e:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <HAL_MspInit+0x5c>)
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <HAL_MspInit+0x5c>)
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	4a0e      	ldr	r2, [pc, #56]	; (8000ea8 <HAL_MspInit+0x5c>)
 8000e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e74:	61d3      	str	r3, [r2, #28]
 8000e76:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <HAL_MspInit+0x5c>)
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e82:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <HAL_MspInit+0x60>)
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	4a04      	ldr	r2, [pc, #16]	; (8000eac <HAL_MspInit+0x60>)
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	3714      	adds	r7, #20
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	40010000 	.word	0x40010000

08000eb0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b088      	sub	sp, #32
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 0310 	add.w	r3, r7, #16
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a14      	ldr	r2, [pc, #80]	; (8000f1c <HAL_ADC_MspInit+0x6c>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d121      	bne.n	8000f14 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ed0:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <HAL_ADC_MspInit+0x70>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	4a12      	ldr	r2, [pc, #72]	; (8000f20 <HAL_ADC_MspInit+0x70>)
 8000ed6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eda:	6193      	str	r3, [r2, #24]
 8000edc:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <HAL_ADC_MspInit+0x70>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee8:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <HAL_ADC_MspInit+0x70>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	4a0c      	ldr	r2, [pc, #48]	; (8000f20 <HAL_ADC_MspInit+0x70>)
 8000eee:	f043 0304 	orr.w	r3, r3, #4
 8000ef2:	6193      	str	r3, [r2, #24]
 8000ef4:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <HAL_ADC_MspInit+0x70>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	f003 0304 	and.w	r3, r3, #4
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f00:	2303      	movs	r3, #3
 8000f02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f04:	2303      	movs	r3, #3
 8000f06:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f08:	f107 0310 	add.w	r3, r7, #16
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4805      	ldr	r0, [pc, #20]	; (8000f24 <HAL_ADC_MspInit+0x74>)
 8000f10:	f000 fd3a 	bl	8001988 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f14:	bf00      	nop
 8000f16:	3720      	adds	r7, #32
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40012400 	.word	0x40012400
 8000f20:	40021000 	.word	0x40021000
 8000f24:	40010800 	.word	0x40010800

08000f28 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08a      	sub	sp, #40	; 0x28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f30:	f107 0318 	add.w	r3, r7, #24
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a2b      	ldr	r2, [pc, #172]	; (8000ff0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d125      	bne.n	8000f94 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f48:	4b2a      	ldr	r3, [pc, #168]	; (8000ff4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	4a29      	ldr	r2, [pc, #164]	; (8000ff4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8000f4e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f52:	6193      	str	r3, [r2, #24]
 8000f54:	4b27      	ldr	r3, [pc, #156]	; (8000ff4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f60:	4b24      	ldr	r3, [pc, #144]	; (8000ff4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	4a23      	ldr	r2, [pc, #140]	; (8000ff4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8000f66:	f043 0304 	orr.w	r3, r3, #4
 8000f6a:	6193      	str	r3, [r2, #24]
 8000f6c:	4b21      	ldr	r3, [pc, #132]	; (8000ff4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	f003 0304 	and.w	r3, r3, #4
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f78:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f86:	f107 0318 	add.w	r3, r7, #24
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	481a      	ldr	r0, [pc, #104]	; (8000ff8 <HAL_TIM_Encoder_MspInit+0xd0>)
 8000f8e:	f000 fcfb 	bl	8001988 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f92:	e028      	b.n	8000fe6 <HAL_TIM_Encoder_MspInit+0xbe>
  else if(htim_encoder->Instance==TIM3)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a18      	ldr	r2, [pc, #96]	; (8000ffc <HAL_TIM_Encoder_MspInit+0xd4>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d123      	bne.n	8000fe6 <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f9e:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	4a14      	ldr	r2, [pc, #80]	; (8000ff4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8000fa4:	f043 0302 	orr.w	r3, r3, #2
 8000fa8:	61d3      	str	r3, [r2, #28]
 8000faa:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8000fb8:	699b      	ldr	r3, [r3, #24]
 8000fba:	4a0e      	ldr	r2, [pc, #56]	; (8000ff4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8000fbc:	f043 0304 	orr.w	r3, r3, #4
 8000fc0:	6193      	str	r3, [r2, #24]
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8000fc4:	699b      	ldr	r3, [r3, #24]
 8000fc6:	f003 0304 	and.w	r3, r3, #4
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fce:	23c0      	movs	r3, #192	; 0xc0
 8000fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fda:	f107 0318 	add.w	r3, r7, #24
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <HAL_TIM_Encoder_MspInit+0xd0>)
 8000fe2:	f000 fcd1 	bl	8001988 <HAL_GPIO_Init>
}
 8000fe6:	bf00      	nop
 8000fe8:	3728      	adds	r7, #40	; 0x28
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40012c00 	.word	0x40012c00
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	40010800 	.word	0x40010800
 8000ffc:	40000400 	.word	0x40000400

08001000 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001004:	e7fe      	b.n	8001004 <NMI_Handler+0x4>

08001006 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800100a:	e7fe      	b.n	800100a <HardFault_Handler+0x4>

0800100c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001010:	e7fe      	b.n	8001010 <MemManage_Handler+0x4>

08001012 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001016:	e7fe      	b.n	8001016 <BusFault_Handler+0x4>

08001018 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800101c:	e7fe      	b.n	800101c <UsageFault_Handler+0x4>

0800101e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr

0800102a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr

08001036 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr

08001042 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001046:	f000 f93f 	bl	80012c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
	...

08001050 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001054:	4802      	ldr	r0, [pc, #8]	; (8001060 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001056:	f000 ff58 	bl	8001f0a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20001418 	.word	0x20001418

08001064 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return 1;
 8001068:	2301      	movs	r3, #1
}
 800106a:	4618      	mov	r0, r3
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr

08001072 <_kill>:

int _kill(int pid, int sig)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800107c:	f008 fc26 	bl	80098cc <__errno>
 8001080:	4603      	mov	r3, r0
 8001082:	2216      	movs	r2, #22
 8001084:	601a      	str	r2, [r3, #0]
  return -1;
 8001086:	f04f 33ff 	mov.w	r3, #4294967295
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <_exit>:

void _exit (int status)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800109a:	f04f 31ff 	mov.w	r1, #4294967295
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff ffe7 	bl	8001072 <_kill>
  while (1) {}    /* Make sure we hang here */
 80010a4:	e7fe      	b.n	80010a4 <_exit+0x12>

080010a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b086      	sub	sp, #24
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	60f8      	str	r0, [r7, #12]
 80010ae:	60b9      	str	r1, [r7, #8]
 80010b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
 80010b6:	e00a      	b.n	80010ce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010b8:	f3af 8000 	nop.w
 80010bc:	4601      	mov	r1, r0
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	1c5a      	adds	r2, r3, #1
 80010c2:	60ba      	str	r2, [r7, #8]
 80010c4:	b2ca      	uxtb	r2, r1
 80010c6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	3301      	adds	r3, #1
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	697a      	ldr	r2, [r7, #20]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	dbf0      	blt.n	80010b8 <_read+0x12>
  }

  return len;
 80010d6:	687b      	ldr	r3, [r7, #4]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3718      	adds	r7, #24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
 80010f0:	e009      	b.n	8001106 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	1c5a      	adds	r2, r3, #1
 80010f6:	60ba      	str	r2, [r7, #8]
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	3301      	adds	r3, #1
 8001104:	617b      	str	r3, [r7, #20]
 8001106:	697a      	ldr	r2, [r7, #20]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	429a      	cmp	r2, r3
 800110c:	dbf1      	blt.n	80010f2 <_write+0x12>
  }
  return len;
 800110e:	687b      	ldr	r3, [r7, #4]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <_close>:

int _close(int file)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001120:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001124:	4618      	mov	r0, r3
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	bc80      	pop	{r7}
 800112c:	4770      	bx	lr

0800112e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800112e:	b480      	push	{r7}
 8001130:	b083      	sub	sp, #12
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
 8001136:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800113e:	605a      	str	r2, [r3, #4]
  return 0;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr

0800114c <_isatty>:

int _isatty(int file)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001154:	2301      	movs	r3, #1
}
 8001156:	4618      	mov	r0, r3
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr

08001160 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3714      	adds	r7, #20
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr

08001178 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001180:	4a14      	ldr	r2, [pc, #80]	; (80011d4 <_sbrk+0x5c>)
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <_sbrk+0x60>)
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800118c:	4b13      	ldr	r3, [pc, #76]	; (80011dc <_sbrk+0x64>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d102      	bne.n	800119a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <_sbrk+0x64>)
 8001196:	4a12      	ldr	r2, [pc, #72]	; (80011e0 <_sbrk+0x68>)
 8001198:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <_sbrk+0x64>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d207      	bcs.n	80011b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011a8:	f008 fb90 	bl	80098cc <__errno>
 80011ac:	4603      	mov	r3, r0
 80011ae:	220c      	movs	r2, #12
 80011b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011b2:	f04f 33ff 	mov.w	r3, #4294967295
 80011b6:	e009      	b.n	80011cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011b8:	4b08      	ldr	r3, [pc, #32]	; (80011dc <_sbrk+0x64>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011be:	4b07      	ldr	r3, [pc, #28]	; (80011dc <_sbrk+0x64>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4413      	add	r3, r2
 80011c6:	4a05      	ldr	r2, [pc, #20]	; (80011dc <_sbrk+0x64>)
 80011c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ca:	68fb      	ldr	r3, [r7, #12]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20005000 	.word	0x20005000
 80011d8:	00000400 	.word	0x00000400
 80011dc:	20000748 	.word	0x20000748
 80011e0:	20001a78 	.word	0x20001a78

080011e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr

080011f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011f0:	f7ff fff8 	bl	80011e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011f4:	480b      	ldr	r0, [pc, #44]	; (8001224 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011f6:	490c      	ldr	r1, [pc, #48]	; (8001228 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011f8:	4a0c      	ldr	r2, [pc, #48]	; (800122c <LoopFillZerobss+0x16>)
  movs r3, #0
 80011fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011fc:	e002      	b.n	8001204 <LoopCopyDataInit>

080011fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001202:	3304      	adds	r3, #4

08001204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001208:	d3f9      	bcc.n	80011fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800120a:	4a09      	ldr	r2, [pc, #36]	; (8001230 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800120c:	4c09      	ldr	r4, [pc, #36]	; (8001234 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800120e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001210:	e001      	b.n	8001216 <LoopFillZerobss>

08001212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001214:	3204      	adds	r2, #4

08001216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001218:	d3fb      	bcc.n	8001212 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800121a:	f008 fb5d 	bl	80098d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800121e:	f7ff fc33 	bl	8000a88 <main>
  bx lr
 8001222:	4770      	bx	lr
  ldr r0, =_sdata
 8001224:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001228:	20000344 	.word	0x20000344
  ldr r2, =_sidata
 800122c:	0800be04 	.word	0x0800be04
  ldr r2, =_sbss
 8001230:	20000344 	.word	0x20000344
  ldr r4, =_ebss
 8001234:	20001a74 	.word	0x20001a74

08001238 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001238:	e7fe      	b.n	8001238 <ADC1_2_IRQHandler>
	...

0800123c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001240:	4b08      	ldr	r3, [pc, #32]	; (8001264 <HAL_Init+0x28>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a07      	ldr	r2, [pc, #28]	; (8001264 <HAL_Init+0x28>)
 8001246:	f043 0310 	orr.w	r3, r3, #16
 800124a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800124c:	2003      	movs	r0, #3
 800124e:	f000 fb59 	bl	8001904 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001252:	200f      	movs	r0, #15
 8001254:	f000 f808 	bl	8001268 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001258:	f7ff fdf8 	bl	8000e4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40022000 	.word	0x40022000

08001268 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <HAL_InitTick+0x54>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <HAL_InitTick+0x58>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	4619      	mov	r1, r3
 800127a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001282:	fbb2 f3f3 	udiv	r3, r2, r3
 8001286:	4618      	mov	r0, r3
 8001288:	f000 fb71 	bl	800196e <HAL_SYSTICK_Config>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e00e      	b.n	80012b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2b0f      	cmp	r3, #15
 800129a:	d80a      	bhi.n	80012b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800129c:	2200      	movs	r2, #0
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	f04f 30ff 	mov.w	r0, #4294967295
 80012a4:	f000 fb39 	bl	800191a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a8:	4a06      	ldr	r2, [pc, #24]	; (80012c4 <HAL_InitTick+0x5c>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
 80012b0:	e000      	b.n	80012b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000000 	.word	0x20000000
 80012c0:	20000008 	.word	0x20000008
 80012c4:	20000004 	.word	0x20000004

080012c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012cc:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <HAL_IncTick+0x1c>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <HAL_IncTick+0x20>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4413      	add	r3, r2
 80012d8:	4a03      	ldr	r2, [pc, #12]	; (80012e8 <HAL_IncTick+0x20>)
 80012da:	6013      	str	r3, [r2, #0]
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr
 80012e4:	20000008 	.word	0x20000008
 80012e8:	2000074c 	.word	0x2000074c

080012ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return uwTick;
 80012f0:	4b02      	ldr	r3, [pc, #8]	; (80012fc <HAL_GetTick+0x10>)
 80012f2:	681b      	ldr	r3, [r3, #0]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr
 80012fc:	2000074c 	.word	0x2000074c

08001300 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001308:	f7ff fff0 	bl	80012ec <HAL_GetTick>
 800130c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001318:	d005      	beq.n	8001326 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800131a:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <HAL_Delay+0x44>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4413      	add	r3, r2
 8001324:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001326:	bf00      	nop
 8001328:	f7ff ffe0 	bl	80012ec <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	429a      	cmp	r2, r3
 8001336:	d8f7      	bhi.n	8001328 <HAL_Delay+0x28>
  {
  }
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000008 	.word	0x20000008

08001348 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001350:	2300      	movs	r3, #0
 8001352:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001354:	2300      	movs	r3, #0
 8001356:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001358:	2300      	movs	r3, #0
 800135a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800135c:	2300      	movs	r3, #0
 800135e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d101      	bne.n	800136a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e0be      	b.n	80014e8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001374:	2b00      	cmp	r3, #0
 8001376:	d109      	bne.n	800138c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff fd92 	bl	8000eb0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f000 f9ab 	bl	80016e8 <ADC_ConversionStop_Disable>
 8001392:	4603      	mov	r3, r0
 8001394:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800139a:	f003 0310 	and.w	r3, r3, #16
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f040 8099 	bne.w	80014d6 <HAL_ADC_Init+0x18e>
 80013a4:	7dfb      	ldrb	r3, [r7, #23]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f040 8095 	bne.w	80014d6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013b4:	f023 0302 	bic.w	r3, r3, #2
 80013b8:	f043 0202 	orr.w	r2, r3, #2
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013c8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	7b1b      	ldrb	r3, [r3, #12]
 80013ce:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80013d0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013d2:	68ba      	ldr	r2, [r7, #8]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013e0:	d003      	beq.n	80013ea <HAL_ADC_Init+0xa2>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d102      	bne.n	80013f0 <HAL_ADC_Init+0xa8>
 80013ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013ee:	e000      	b.n	80013f2 <HAL_ADC_Init+0xaa>
 80013f0:	2300      	movs	r3, #0
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	7d1b      	ldrb	r3, [r3, #20]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d119      	bne.n	8001434 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	7b1b      	ldrb	r3, [r3, #12]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d109      	bne.n	800141c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	3b01      	subs	r3, #1
 800140e:	035a      	lsls	r2, r3, #13
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	4313      	orrs	r3, r2
 8001414:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001418:	613b      	str	r3, [r7, #16]
 800141a:	e00b      	b.n	8001434 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001420:	f043 0220 	orr.w	r2, r3, #32
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142c:	f043 0201 	orr.w	r2, r3, #1
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	430a      	orrs	r2, r1
 8001446:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	689a      	ldr	r2, [r3, #8]
 800144e:	4b28      	ldr	r3, [pc, #160]	; (80014f0 <HAL_ADC_Init+0x1a8>)
 8001450:	4013      	ands	r3, r2
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	6812      	ldr	r2, [r2, #0]
 8001456:	68b9      	ldr	r1, [r7, #8]
 8001458:	430b      	orrs	r3, r1
 800145a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001464:	d003      	beq.n	800146e <HAL_ADC_Init+0x126>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d104      	bne.n	8001478 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	691b      	ldr	r3, [r3, #16]
 8001472:	3b01      	subs	r3, #1
 8001474:	051b      	lsls	r3, r3, #20
 8001476:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	430a      	orrs	r2, r1
 800148a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	689a      	ldr	r2, [r3, #8]
 8001492:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <HAL_ADC_Init+0x1ac>)
 8001494:	4013      	ands	r3, r2
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	429a      	cmp	r2, r3
 800149a:	d10b      	bne.n	80014b4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a6:	f023 0303 	bic.w	r3, r3, #3
 80014aa:	f043 0201 	orr.w	r2, r3, #1
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014b2:	e018      	b.n	80014e6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b8:	f023 0312 	bic.w	r3, r3, #18
 80014bc:	f043 0210 	orr.w	r2, r3, #16
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c8:	f043 0201 	orr.w	r2, r3, #1
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014d4:	e007      	b.n	80014e6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014da:	f043 0210 	orr.w	r2, r3, #16
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80014e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	ffe1f7fd 	.word	0xffe1f7fd
 80014f4:	ff1f0efe 	.word	0xff1f0efe

080014f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001502:	2300      	movs	r3, #0
 8001504:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001506:	2300      	movs	r3, #0
 8001508:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001510:	2b01      	cmp	r3, #1
 8001512:	d101      	bne.n	8001518 <HAL_ADC_ConfigChannel+0x20>
 8001514:	2302      	movs	r3, #2
 8001516:	e0dc      	b.n	80016d2 <HAL_ADC_ConfigChannel+0x1da>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2201      	movs	r2, #1
 800151c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2b06      	cmp	r3, #6
 8001526:	d81c      	bhi.n	8001562 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685a      	ldr	r2, [r3, #4]
 8001532:	4613      	mov	r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	4413      	add	r3, r2
 8001538:	3b05      	subs	r3, #5
 800153a:	221f      	movs	r2, #31
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	4019      	ands	r1, r3
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	6818      	ldr	r0, [r3, #0]
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	4613      	mov	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4413      	add	r3, r2
 8001552:	3b05      	subs	r3, #5
 8001554:	fa00 f203 	lsl.w	r2, r0, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	430a      	orrs	r2, r1
 800155e:	635a      	str	r2, [r3, #52]	; 0x34
 8001560:	e03c      	b.n	80015dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b0c      	cmp	r3, #12
 8001568:	d81c      	bhi.n	80015a4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685a      	ldr	r2, [r3, #4]
 8001574:	4613      	mov	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4413      	add	r3, r2
 800157a:	3b23      	subs	r3, #35	; 0x23
 800157c:	221f      	movs	r2, #31
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43db      	mvns	r3, r3
 8001584:	4019      	ands	r1, r3
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	6818      	ldr	r0, [r3, #0]
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	4613      	mov	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	3b23      	subs	r3, #35	; 0x23
 8001596:	fa00 f203 	lsl.w	r2, r0, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	430a      	orrs	r2, r1
 80015a0:	631a      	str	r2, [r3, #48]	; 0x30
 80015a2:	e01b      	b.n	80015dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	4613      	mov	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4413      	add	r3, r2
 80015b4:	3b41      	subs	r3, #65	; 0x41
 80015b6:	221f      	movs	r2, #31
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	43db      	mvns	r3, r3
 80015be:	4019      	ands	r1, r3
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	6818      	ldr	r0, [r3, #0]
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	4613      	mov	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4413      	add	r3, r2
 80015ce:	3b41      	subs	r3, #65	; 0x41
 80015d0:	fa00 f203 	lsl.w	r2, r0, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	430a      	orrs	r2, r1
 80015da:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b09      	cmp	r3, #9
 80015e2:	d91c      	bls.n	800161e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68d9      	ldr	r1, [r3, #12]
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	4613      	mov	r3, r2
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	4413      	add	r3, r2
 80015f4:	3b1e      	subs	r3, #30
 80015f6:	2207      	movs	r2, #7
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	43db      	mvns	r3, r3
 80015fe:	4019      	ands	r1, r3
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	6898      	ldr	r0, [r3, #8]
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4613      	mov	r3, r2
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	4413      	add	r3, r2
 800160e:	3b1e      	subs	r3, #30
 8001610:	fa00 f203 	lsl.w	r2, r0, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	430a      	orrs	r2, r1
 800161a:	60da      	str	r2, [r3, #12]
 800161c:	e019      	b.n	8001652 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	6919      	ldr	r1, [r3, #16]
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4613      	mov	r3, r2
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	4413      	add	r3, r2
 800162e:	2207      	movs	r2, #7
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	4019      	ands	r1, r3
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	6898      	ldr	r0, [r3, #8]
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	4613      	mov	r3, r2
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	4413      	add	r3, r2
 8001646:	fa00 f203 	lsl.w	r2, r0, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	430a      	orrs	r2, r1
 8001650:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2b10      	cmp	r3, #16
 8001658:	d003      	beq.n	8001662 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800165e:	2b11      	cmp	r3, #17
 8001660:	d132      	bne.n	80016c8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a1d      	ldr	r2, [pc, #116]	; (80016dc <HAL_ADC_ConfigChannel+0x1e4>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d125      	bne.n	80016b8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d126      	bne.n	80016c8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001688:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b10      	cmp	r3, #16
 8001690:	d11a      	bne.n	80016c8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001692:	4b13      	ldr	r3, [pc, #76]	; (80016e0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a13      	ldr	r2, [pc, #76]	; (80016e4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001698:	fba2 2303 	umull	r2, r3, r2, r3
 800169c:	0c9a      	lsrs	r2, r3, #18
 800169e:	4613      	mov	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016a8:	e002      	b.n	80016b0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	3b01      	subs	r3, #1
 80016ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f9      	bne.n	80016aa <HAL_ADC_ConfigChannel+0x1b2>
 80016b6:	e007      	b.n	80016c8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016bc:	f043 0220 	orr.w	r2, r3, #32
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80016d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3714      	adds	r7, #20
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr
 80016dc:	40012400 	.word	0x40012400
 80016e0:	20000000 	.word	0x20000000
 80016e4:	431bde83 	.word	0x431bde83

080016e8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d12e      	bne.n	8001760 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 0201 	bic.w	r2, r2, #1
 8001710:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001712:	f7ff fdeb 	bl	80012ec <HAL_GetTick>
 8001716:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001718:	e01b      	b.n	8001752 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800171a:	f7ff fde7 	bl	80012ec <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d914      	bls.n	8001752 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b01      	cmp	r3, #1
 8001734:	d10d      	bne.n	8001752 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173a:	f043 0210 	orr.w	r2, r3, #16
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001746:	f043 0201 	orr.w	r2, r3, #1
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e007      	b.n	8001762 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	2b01      	cmp	r3, #1
 800175e:	d0dc      	beq.n	800171a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800177c:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <__NVIC_SetPriorityGrouping+0x44>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001788:	4013      	ands	r3, r2
 800178a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001794:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800179c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800179e:	4a04      	ldr	r2, [pc, #16]	; (80017b0 <__NVIC_SetPriorityGrouping+0x44>)
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	60d3      	str	r3, [r2, #12]
}
 80017a4:	bf00      	nop
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b8:	4b04      	ldr	r3, [pc, #16]	; (80017cc <__NVIC_GetPriorityGrouping+0x18>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	0a1b      	lsrs	r3, r3, #8
 80017be:	f003 0307 	and.w	r3, r3, #7
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	db0b      	blt.n	80017fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	f003 021f 	and.w	r2, r3, #31
 80017e8:	4906      	ldr	r1, [pc, #24]	; (8001804 <__NVIC_EnableIRQ+0x34>)
 80017ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ee:	095b      	lsrs	r3, r3, #5
 80017f0:	2001      	movs	r0, #1
 80017f2:	fa00 f202 	lsl.w	r2, r0, r2
 80017f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr
 8001804:	e000e100 	.word	0xe000e100

08001808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	6039      	str	r1, [r7, #0]
 8001812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001818:	2b00      	cmp	r3, #0
 800181a:	db0a      	blt.n	8001832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	b2da      	uxtb	r2, r3
 8001820:	490c      	ldr	r1, [pc, #48]	; (8001854 <__NVIC_SetPriority+0x4c>)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	0112      	lsls	r2, r2, #4
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	440b      	add	r3, r1
 800182c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001830:	e00a      	b.n	8001848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	b2da      	uxtb	r2, r3
 8001836:	4908      	ldr	r1, [pc, #32]	; (8001858 <__NVIC_SetPriority+0x50>)
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	3b04      	subs	r3, #4
 8001840:	0112      	lsls	r2, r2, #4
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	440b      	add	r3, r1
 8001846:	761a      	strb	r2, [r3, #24]
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000e100 	.word	0xe000e100
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800185c:	b480      	push	{r7}
 800185e:	b089      	sub	sp, #36	; 0x24
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f1c3 0307 	rsb	r3, r3, #7
 8001876:	2b04      	cmp	r3, #4
 8001878:	bf28      	it	cs
 800187a:	2304      	movcs	r3, #4
 800187c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3304      	adds	r3, #4
 8001882:	2b06      	cmp	r3, #6
 8001884:	d902      	bls.n	800188c <NVIC_EncodePriority+0x30>
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3b03      	subs	r3, #3
 800188a:	e000      	b.n	800188e <NVIC_EncodePriority+0x32>
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001890:	f04f 32ff 	mov.w	r2, #4294967295
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43da      	mvns	r2, r3
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	401a      	ands	r2, r3
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a4:	f04f 31ff 	mov.w	r1, #4294967295
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	fa01 f303 	lsl.w	r3, r1, r3
 80018ae:	43d9      	mvns	r1, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b4:	4313      	orrs	r3, r2
         );
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3724      	adds	r7, #36	; 0x24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr

080018c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018d0:	d301      	bcc.n	80018d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018d2:	2301      	movs	r3, #1
 80018d4:	e00f      	b.n	80018f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018d6:	4a0a      	ldr	r2, [pc, #40]	; (8001900 <SysTick_Config+0x40>)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3b01      	subs	r3, #1
 80018dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018de:	210f      	movs	r1, #15
 80018e0:	f04f 30ff 	mov.w	r0, #4294967295
 80018e4:	f7ff ff90 	bl	8001808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e8:	4b05      	ldr	r3, [pc, #20]	; (8001900 <SysTick_Config+0x40>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ee:	4b04      	ldr	r3, [pc, #16]	; (8001900 <SysTick_Config+0x40>)
 80018f0:	2207      	movs	r2, #7
 80018f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	e000e010 	.word	0xe000e010

08001904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f7ff ff2d 	bl	800176c <__NVIC_SetPriorityGrouping>
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800191a:	b580      	push	{r7, lr}
 800191c:	b086      	sub	sp, #24
 800191e:	af00      	add	r7, sp, #0
 8001920:	4603      	mov	r3, r0
 8001922:	60b9      	str	r1, [r7, #8]
 8001924:	607a      	str	r2, [r7, #4]
 8001926:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800192c:	f7ff ff42 	bl	80017b4 <__NVIC_GetPriorityGrouping>
 8001930:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	68b9      	ldr	r1, [r7, #8]
 8001936:	6978      	ldr	r0, [r7, #20]
 8001938:	f7ff ff90 	bl	800185c <NVIC_EncodePriority>
 800193c:	4602      	mov	r2, r0
 800193e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001942:	4611      	mov	r1, r2
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff ff5f 	bl	8001808 <__NVIC_SetPriority>
}
 800194a:	bf00      	nop
 800194c:	3718      	adds	r7, #24
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
 8001958:	4603      	mov	r3, r0
 800195a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800195c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ff35 	bl	80017d0 <__NVIC_EnableIRQ>
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7ff ffa2 	bl	80018c0 <SysTick_Config>
 800197c:	4603      	mov	r3, r0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
	...

08001988 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001988:	b480      	push	{r7}
 800198a:	b08b      	sub	sp, #44	; 0x2c
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001992:	2300      	movs	r3, #0
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001996:	2300      	movs	r3, #0
 8001998:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800199a:	e169      	b.n	8001c70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800199c:	2201      	movs	r2, #1
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	69fa      	ldr	r2, [r7, #28]
 80019ac:	4013      	ands	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	f040 8158 	bne.w	8001c6a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	4a9a      	ldr	r2, [pc, #616]	; (8001c28 <HAL_GPIO_Init+0x2a0>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d05e      	beq.n	8001a82 <HAL_GPIO_Init+0xfa>
 80019c4:	4a98      	ldr	r2, [pc, #608]	; (8001c28 <HAL_GPIO_Init+0x2a0>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d875      	bhi.n	8001ab6 <HAL_GPIO_Init+0x12e>
 80019ca:	4a98      	ldr	r2, [pc, #608]	; (8001c2c <HAL_GPIO_Init+0x2a4>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d058      	beq.n	8001a82 <HAL_GPIO_Init+0xfa>
 80019d0:	4a96      	ldr	r2, [pc, #600]	; (8001c2c <HAL_GPIO_Init+0x2a4>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d86f      	bhi.n	8001ab6 <HAL_GPIO_Init+0x12e>
 80019d6:	4a96      	ldr	r2, [pc, #600]	; (8001c30 <HAL_GPIO_Init+0x2a8>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d052      	beq.n	8001a82 <HAL_GPIO_Init+0xfa>
 80019dc:	4a94      	ldr	r2, [pc, #592]	; (8001c30 <HAL_GPIO_Init+0x2a8>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d869      	bhi.n	8001ab6 <HAL_GPIO_Init+0x12e>
 80019e2:	4a94      	ldr	r2, [pc, #592]	; (8001c34 <HAL_GPIO_Init+0x2ac>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d04c      	beq.n	8001a82 <HAL_GPIO_Init+0xfa>
 80019e8:	4a92      	ldr	r2, [pc, #584]	; (8001c34 <HAL_GPIO_Init+0x2ac>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d863      	bhi.n	8001ab6 <HAL_GPIO_Init+0x12e>
 80019ee:	4a92      	ldr	r2, [pc, #584]	; (8001c38 <HAL_GPIO_Init+0x2b0>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d046      	beq.n	8001a82 <HAL_GPIO_Init+0xfa>
 80019f4:	4a90      	ldr	r2, [pc, #576]	; (8001c38 <HAL_GPIO_Init+0x2b0>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d85d      	bhi.n	8001ab6 <HAL_GPIO_Init+0x12e>
 80019fa:	2b12      	cmp	r3, #18
 80019fc:	d82a      	bhi.n	8001a54 <HAL_GPIO_Init+0xcc>
 80019fe:	2b12      	cmp	r3, #18
 8001a00:	d859      	bhi.n	8001ab6 <HAL_GPIO_Init+0x12e>
 8001a02:	a201      	add	r2, pc, #4	; (adr r2, 8001a08 <HAL_GPIO_Init+0x80>)
 8001a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a08:	08001a83 	.word	0x08001a83
 8001a0c:	08001a5d 	.word	0x08001a5d
 8001a10:	08001a6f 	.word	0x08001a6f
 8001a14:	08001ab1 	.word	0x08001ab1
 8001a18:	08001ab7 	.word	0x08001ab7
 8001a1c:	08001ab7 	.word	0x08001ab7
 8001a20:	08001ab7 	.word	0x08001ab7
 8001a24:	08001ab7 	.word	0x08001ab7
 8001a28:	08001ab7 	.word	0x08001ab7
 8001a2c:	08001ab7 	.word	0x08001ab7
 8001a30:	08001ab7 	.word	0x08001ab7
 8001a34:	08001ab7 	.word	0x08001ab7
 8001a38:	08001ab7 	.word	0x08001ab7
 8001a3c:	08001ab7 	.word	0x08001ab7
 8001a40:	08001ab7 	.word	0x08001ab7
 8001a44:	08001ab7 	.word	0x08001ab7
 8001a48:	08001ab7 	.word	0x08001ab7
 8001a4c:	08001a65 	.word	0x08001a65
 8001a50:	08001a79 	.word	0x08001a79
 8001a54:	4a79      	ldr	r2, [pc, #484]	; (8001c3c <HAL_GPIO_Init+0x2b4>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d013      	beq.n	8001a82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a5a:	e02c      	b.n	8001ab6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	623b      	str	r3, [r7, #32]
          break;
 8001a62:	e029      	b.n	8001ab8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	3304      	adds	r3, #4
 8001a6a:	623b      	str	r3, [r7, #32]
          break;
 8001a6c:	e024      	b.n	8001ab8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	3308      	adds	r3, #8
 8001a74:	623b      	str	r3, [r7, #32]
          break;
 8001a76:	e01f      	b.n	8001ab8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	330c      	adds	r3, #12
 8001a7e:	623b      	str	r3, [r7, #32]
          break;
 8001a80:	e01a      	b.n	8001ab8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d102      	bne.n	8001a90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a8a:	2304      	movs	r3, #4
 8001a8c:	623b      	str	r3, [r7, #32]
          break;
 8001a8e:	e013      	b.n	8001ab8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d105      	bne.n	8001aa4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a98:	2308      	movs	r3, #8
 8001a9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	69fa      	ldr	r2, [r7, #28]
 8001aa0:	611a      	str	r2, [r3, #16]
          break;
 8001aa2:	e009      	b.n	8001ab8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001aa4:	2308      	movs	r3, #8
 8001aa6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	69fa      	ldr	r2, [r7, #28]
 8001aac:	615a      	str	r2, [r3, #20]
          break;
 8001aae:	e003      	b.n	8001ab8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	623b      	str	r3, [r7, #32]
          break;
 8001ab4:	e000      	b.n	8001ab8 <HAL_GPIO_Init+0x130>
          break;
 8001ab6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	2bff      	cmp	r3, #255	; 0xff
 8001abc:	d801      	bhi.n	8001ac2 <HAL_GPIO_Init+0x13a>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	e001      	b.n	8001ac6 <HAL_GPIO_Init+0x13e>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	2bff      	cmp	r3, #255	; 0xff
 8001acc:	d802      	bhi.n	8001ad4 <HAL_GPIO_Init+0x14c>
 8001ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	e002      	b.n	8001ada <HAL_GPIO_Init+0x152>
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad6:	3b08      	subs	r3, #8
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	210f      	movs	r1, #15
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	401a      	ands	r2, r3
 8001aec:	6a39      	ldr	r1, [r7, #32]
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	fa01 f303 	lsl.w	r3, r1, r3
 8001af4:	431a      	orrs	r2, r3
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f000 80b1 	beq.w	8001c6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b08:	4b4d      	ldr	r3, [pc, #308]	; (8001c40 <HAL_GPIO_Init+0x2b8>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	4a4c      	ldr	r2, [pc, #304]	; (8001c40 <HAL_GPIO_Init+0x2b8>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	6193      	str	r3, [r2, #24]
 8001b14:	4b4a      	ldr	r3, [pc, #296]	; (8001c40 <HAL_GPIO_Init+0x2b8>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	60bb      	str	r3, [r7, #8]
 8001b1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b20:	4a48      	ldr	r2, [pc, #288]	; (8001c44 <HAL_GPIO_Init+0x2bc>)
 8001b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b24:	089b      	lsrs	r3, r3, #2
 8001b26:	3302      	adds	r3, #2
 8001b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	220f      	movs	r2, #15
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	4013      	ands	r3, r2
 8001b42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a40      	ldr	r2, [pc, #256]	; (8001c48 <HAL_GPIO_Init+0x2c0>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d013      	beq.n	8001b74 <HAL_GPIO_Init+0x1ec>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a3f      	ldr	r2, [pc, #252]	; (8001c4c <HAL_GPIO_Init+0x2c4>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d00d      	beq.n	8001b70 <HAL_GPIO_Init+0x1e8>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a3e      	ldr	r2, [pc, #248]	; (8001c50 <HAL_GPIO_Init+0x2c8>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d007      	beq.n	8001b6c <HAL_GPIO_Init+0x1e4>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a3d      	ldr	r2, [pc, #244]	; (8001c54 <HAL_GPIO_Init+0x2cc>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d101      	bne.n	8001b68 <HAL_GPIO_Init+0x1e0>
 8001b64:	2303      	movs	r3, #3
 8001b66:	e006      	b.n	8001b76 <HAL_GPIO_Init+0x1ee>
 8001b68:	2304      	movs	r3, #4
 8001b6a:	e004      	b.n	8001b76 <HAL_GPIO_Init+0x1ee>
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	e002      	b.n	8001b76 <HAL_GPIO_Init+0x1ee>
 8001b70:	2301      	movs	r3, #1
 8001b72:	e000      	b.n	8001b76 <HAL_GPIO_Init+0x1ee>
 8001b74:	2300      	movs	r3, #0
 8001b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b78:	f002 0203 	and.w	r2, r2, #3
 8001b7c:	0092      	lsls	r2, r2, #2
 8001b7e:	4093      	lsls	r3, r2
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b86:	492f      	ldr	r1, [pc, #188]	; (8001c44 <HAL_GPIO_Init+0x2bc>)
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	089b      	lsrs	r3, r3, #2
 8001b8c:	3302      	adds	r3, #2
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d006      	beq.n	8001bae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ba0:	4b2d      	ldr	r3, [pc, #180]	; (8001c58 <HAL_GPIO_Init+0x2d0>)
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	492c      	ldr	r1, [pc, #176]	; (8001c58 <HAL_GPIO_Init+0x2d0>)
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	608b      	str	r3, [r1, #8]
 8001bac:	e006      	b.n	8001bbc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bae:	4b2a      	ldr	r3, [pc, #168]	; (8001c58 <HAL_GPIO_Init+0x2d0>)
 8001bb0:	689a      	ldr	r2, [r3, #8]
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	4928      	ldr	r1, [pc, #160]	; (8001c58 <HAL_GPIO_Init+0x2d0>)
 8001bb8:	4013      	ands	r3, r2
 8001bba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d006      	beq.n	8001bd6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bc8:	4b23      	ldr	r3, [pc, #140]	; (8001c58 <HAL_GPIO_Init+0x2d0>)
 8001bca:	68da      	ldr	r2, [r3, #12]
 8001bcc:	4922      	ldr	r1, [pc, #136]	; (8001c58 <HAL_GPIO_Init+0x2d0>)
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	60cb      	str	r3, [r1, #12]
 8001bd4:	e006      	b.n	8001be4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bd6:	4b20      	ldr	r3, [pc, #128]	; (8001c58 <HAL_GPIO_Init+0x2d0>)
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	491e      	ldr	r1, [pc, #120]	; (8001c58 <HAL_GPIO_Init+0x2d0>)
 8001be0:	4013      	ands	r3, r2
 8001be2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d006      	beq.n	8001bfe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bf0:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <HAL_GPIO_Init+0x2d0>)
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	4918      	ldr	r1, [pc, #96]	; (8001c58 <HAL_GPIO_Init+0x2d0>)
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	604b      	str	r3, [r1, #4]
 8001bfc:	e006      	b.n	8001c0c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bfe:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <HAL_GPIO_Init+0x2d0>)
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	43db      	mvns	r3, r3
 8001c06:	4914      	ldr	r1, [pc, #80]	; (8001c58 <HAL_GPIO_Init+0x2d0>)
 8001c08:	4013      	ands	r3, r2
 8001c0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d021      	beq.n	8001c5c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c18:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <HAL_GPIO_Init+0x2d0>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	490e      	ldr	r1, [pc, #56]	; (8001c58 <HAL_GPIO_Init+0x2d0>)
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	600b      	str	r3, [r1, #0]
 8001c24:	e021      	b.n	8001c6a <HAL_GPIO_Init+0x2e2>
 8001c26:	bf00      	nop
 8001c28:	10320000 	.word	0x10320000
 8001c2c:	10310000 	.word	0x10310000
 8001c30:	10220000 	.word	0x10220000
 8001c34:	10210000 	.word	0x10210000
 8001c38:	10120000 	.word	0x10120000
 8001c3c:	10110000 	.word	0x10110000
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40010000 	.word	0x40010000
 8001c48:	40010800 	.word	0x40010800
 8001c4c:	40010c00 	.word	0x40010c00
 8001c50:	40011000 	.word	0x40011000
 8001c54:	40011400 	.word	0x40011400
 8001c58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <HAL_GPIO_Init+0x304>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	43db      	mvns	r3, r3
 8001c64:	4909      	ldr	r1, [pc, #36]	; (8001c8c <HAL_GPIO_Init+0x304>)
 8001c66:	4013      	ands	r3, r2
 8001c68:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c76:	fa22 f303 	lsr.w	r3, r2, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f47f ae8e 	bne.w	800199c <HAL_GPIO_Init+0x14>
  }
}
 8001c80:	bf00      	nop
 8001c82:	bf00      	nop
 8001c84:	372c      	adds	r7, #44	; 0x2c
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr
 8001c8c:	40010400 	.word	0x40010400

08001c90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	807b      	strh	r3, [r7, #2]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ca0:	787b      	ldrb	r3, [r7, #1]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ca6:	887a      	ldrh	r2, [r7, #2]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cac:	e003      	b.n	8001cb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cae:	887b      	ldrh	r3, [r7, #2]
 8001cb0:	041a      	lsls	r2, r3, #16
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	611a      	str	r2, [r3, #16]
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cc2:	b08b      	sub	sp, #44	; 0x2c
 8001cc4:	af06      	add	r7, sp, #24
 8001cc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e0f1      	b.n	8001eb6 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d106      	bne.n	8001cec <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f006 fd70 	bl	80087cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2203      	movs	r2, #3
 8001cf0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f002 fc8f 	bl	800461c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	603b      	str	r3, [r7, #0]
 8001d04:	687e      	ldr	r6, [r7, #4]
 8001d06:	466d      	mov	r5, sp
 8001d08:	f106 0410 	add.w	r4, r6, #16
 8001d0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d10:	6823      	ldr	r3, [r4, #0]
 8001d12:	602b      	str	r3, [r5, #0]
 8001d14:	1d33      	adds	r3, r6, #4
 8001d16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d18:	6838      	ldr	r0, [r7, #0]
 8001d1a:	f002 fc59 	bl	80045d0 <USB_CoreInit>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d005      	beq.n	8001d30 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2202      	movs	r2, #2
 8001d28:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e0c2      	b.n	8001eb6 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2100      	movs	r1, #0
 8001d36:	4618      	mov	r0, r3
 8001d38:	f002 fc8a 	bl	8004650 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	73fb      	strb	r3, [r7, #15]
 8001d40:	e040      	b.n	8001dc4 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	1c5a      	adds	r2, r3, #1
 8001d48:	4613      	mov	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	440b      	add	r3, r1
 8001d52:	3301      	adds	r3, #1
 8001d54:	2201      	movs	r2, #1
 8001d56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	1c5a      	adds	r2, r3, #1
 8001d5e:	4613      	mov	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	440b      	add	r3, r1
 8001d68:	7bfa      	ldrb	r2, [r7, #15]
 8001d6a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	1c5a      	adds	r2, r3, #1
 8001d72:	4613      	mov	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	440b      	add	r3, r1
 8001d7c:	3303      	adds	r3, #3
 8001d7e:	2200      	movs	r2, #0
 8001d80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d82:	7bfa      	ldrb	r2, [r7, #15]
 8001d84:	6879      	ldr	r1, [r7, #4]
 8001d86:	4613      	mov	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	4413      	add	r3, r2
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	440b      	add	r3, r1
 8001d90:	3338      	adds	r3, #56	; 0x38
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d96:	7bfa      	ldrb	r2, [r7, #15]
 8001d98:	6879      	ldr	r1, [r7, #4]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4413      	add	r3, r2
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	440b      	add	r3, r1
 8001da4:	333c      	adds	r3, #60	; 0x3c
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001daa:	7bfa      	ldrb	r2, [r7, #15]
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	4613      	mov	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4413      	add	r3, r2
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	440b      	add	r3, r1
 8001db8:	3340      	adds	r3, #64	; 0x40
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dbe:	7bfb      	ldrb	r3, [r7, #15]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	73fb      	strb	r3, [r7, #15]
 8001dc4:	7bfa      	ldrb	r2, [r7, #15]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d3b9      	bcc.n	8001d42 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dce:	2300      	movs	r3, #0
 8001dd0:	73fb      	strb	r3, [r7, #15]
 8001dd2:	e044      	b.n	8001e5e <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001dd4:	7bfa      	ldrb	r2, [r7, #15]
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	440b      	add	r3, r1
 8001de2:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001de6:	2200      	movs	r2, #0
 8001de8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001dea:	7bfa      	ldrb	r2, [r7, #15]
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	4613      	mov	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4413      	add	r3, r2
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	440b      	add	r3, r1
 8001df8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001dfc:	7bfa      	ldrb	r2, [r7, #15]
 8001dfe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e00:	7bfa      	ldrb	r2, [r7, #15]
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	4613      	mov	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	440b      	add	r3, r1
 8001e0e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001e12:	2200      	movs	r2, #0
 8001e14:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e16:	7bfa      	ldrb	r2, [r7, #15]
 8001e18:	6879      	ldr	r1, [r7, #4]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	440b      	add	r3, r1
 8001e24:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e2c:	7bfa      	ldrb	r2, [r7, #15]
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	4613      	mov	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	440b      	add	r3, r1
 8001e3a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e42:	7bfa      	ldrb	r2, [r7, #15]
 8001e44:	6879      	ldr	r1, [r7, #4]
 8001e46:	4613      	mov	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4413      	add	r3, r2
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	440b      	add	r3, r1
 8001e50:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e58:	7bfb      	ldrb	r3, [r7, #15]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	73fb      	strb	r3, [r7, #15]
 8001e5e:	7bfa      	ldrb	r2, [r7, #15]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d3b5      	bcc.n	8001dd4 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	603b      	str	r3, [r7, #0]
 8001e6e:	687e      	ldr	r6, [r7, #4]
 8001e70:	466d      	mov	r5, sp
 8001e72:	f106 0410 	add.w	r4, r6, #16
 8001e76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e7a:	6823      	ldr	r3, [r4, #0]
 8001e7c:	602b      	str	r3, [r5, #0]
 8001e7e:	1d33      	adds	r3, r6, #4
 8001e80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e82:	6838      	ldr	r0, [r7, #0]
 8001e84:	f002 fbf0 	bl	8004668 <USB_DevInit>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d005      	beq.n	8001e9a <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2202      	movs	r2, #2
 8001e92:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e00d      	b.n	8001eb6 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f004 fe71 	bl	8006b96 <USB_DevDisconnect>

  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3714      	adds	r7, #20
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ebe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d101      	bne.n	8001ed4 <HAL_PCD_Start+0x16>
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	e016      	b.n	8001f02 <HAL_PCD_Start+0x44>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f002 fb85 	bl	80045f0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f006 fee2 	bl	8008cb2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f004 fe45 	bl	8006b82 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b088      	sub	sp, #32
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f004 fe47 	bl	8006baa <USB_ReadInterrupts>
 8001f1c:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d003      	beq.n	8001f30 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 fb1b 	bl	8002564 <PCD_EP_ISR_Handler>

    return;
 8001f2e:	e119      	b.n	8002164 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d013      	beq.n	8001f62 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f4c:	b292      	uxth	r2, r2
 8001f4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f006 fcb5 	bl	80088c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001f58:	2100      	movs	r1, #0
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f905 	bl	800216a <HAL_PCD_SetAddress>

    return;
 8001f60:	e100      	b.n	8002164 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d00c      	beq.n	8001f86 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f7e:	b292      	uxth	r2, r2
 8001f80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001f84:	e0ee      	b.n	8002164 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00c      	beq.n	8001faa <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fa2:	b292      	uxth	r2, r2
 8001fa4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001fa8:	e0dc      	b.n	8002164 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d027      	beq.n	8002004 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 0204 	bic.w	r2, r2, #4
 8001fc6:	b292      	uxth	r2, r2
 8001fc8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 0208 	bic.w	r2, r2, #8
 8001fde:	b292      	uxth	r2, r2
 8001fe0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f006 fca5 	bl	8008934 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ffc:	b292      	uxth	r2, r2
 8001ffe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002002:	e0af      	b.n	8002164 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800200a:	2b00      	cmp	r3, #0
 800200c:	f000 8083 	beq.w	8002116 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002010:	2300      	movs	r3, #0
 8002012:	77fb      	strb	r3, [r7, #31]
 8002014:	e010      	b.n	8002038 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	461a      	mov	r2, r3
 800201c:	7ffb      	ldrb	r3, [r7, #31]
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	441a      	add	r2, r3
 8002022:	7ffb      	ldrb	r3, [r7, #31]
 8002024:	8812      	ldrh	r2, [r2, #0]
 8002026:	b292      	uxth	r2, r2
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	3320      	adds	r3, #32
 800202c:	443b      	add	r3, r7
 800202e:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002032:	7ffb      	ldrb	r3, [r7, #31]
 8002034:	3301      	adds	r3, #1
 8002036:	77fb      	strb	r3, [r7, #31]
 8002038:	7ffb      	ldrb	r3, [r7, #31]
 800203a:	2b07      	cmp	r3, #7
 800203c:	d9eb      	bls.n	8002016 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002046:	b29a      	uxth	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f042 0201 	orr.w	r2, r2, #1
 8002050:	b292      	uxth	r2, r2
 8002052:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800205e:	b29a      	uxth	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0201 	bic.w	r2, r2, #1
 8002068:	b292      	uxth	r2, r2
 800206a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800206e:	bf00      	nop
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002078:	b29b      	uxth	r3, r3
 800207a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f6      	beq.n	8002070 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800208a:	b29a      	uxth	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002094:	b292      	uxth	r2, r2
 8002096:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800209a:	2300      	movs	r3, #0
 800209c:	77fb      	strb	r3, [r7, #31]
 800209e:	e00f      	b.n	80020c0 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80020a0:	7ffb      	ldrb	r3, [r7, #31]
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6812      	ldr	r2, [r2, #0]
 80020a6:	4611      	mov	r1, r2
 80020a8:	7ffa      	ldrb	r2, [r7, #31]
 80020aa:	0092      	lsls	r2, r2, #2
 80020ac:	440a      	add	r2, r1
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	3320      	adds	r3, #32
 80020b2:	443b      	add	r3, r7
 80020b4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80020b8:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80020ba:	7ffb      	ldrb	r3, [r7, #31]
 80020bc:	3301      	adds	r3, #1
 80020be:	77fb      	strb	r3, [r7, #31]
 80020c0:	7ffb      	ldrb	r3, [r7, #31]
 80020c2:	2b07      	cmp	r3, #7
 80020c4:	d9ec      	bls.n	80020a0 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f042 0208 	orr.w	r2, r2, #8
 80020d8:	b292      	uxth	r2, r2
 80020da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020f0:	b292      	uxth	r2, r2
 80020f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020fe:	b29a      	uxth	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f042 0204 	orr.w	r2, r2, #4
 8002108:	b292      	uxth	r2, r2
 800210a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f006 fbf6 	bl	8008900 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002114:	e026      	b.n	8002164 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00f      	beq.n	8002140 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002128:	b29a      	uxth	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002132:	b292      	uxth	r2, r2
 8002134:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f006 fbb4 	bl	80088a6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800213e:	e011      	b.n	8002164 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00c      	beq.n	8002164 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002152:	b29a      	uxth	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800215c:	b292      	uxth	r2, r2
 800215e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002162:	bf00      	nop
  }
}
 8002164:	3720      	adds	r7, #32
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b082      	sub	sp, #8
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
 8002172:	460b      	mov	r3, r1
 8002174:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800217c:	2b01      	cmp	r3, #1
 800217e:	d101      	bne.n	8002184 <HAL_PCD_SetAddress+0x1a>
 8002180:	2302      	movs	r3, #2
 8002182:	e013      	b.n	80021ac <HAL_PCD_SetAddress+0x42>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	78fa      	ldrb	r2, [r7, #3]
 8002190:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	78fa      	ldrb	r2, [r7, #3]
 800219a:	4611      	mov	r1, r2
 800219c:	4618      	mov	r0, r3
 800219e:	f004 fcdd 	bl	8006b5c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	4608      	mov	r0, r1
 80021be:	4611      	mov	r1, r2
 80021c0:	461a      	mov	r2, r3
 80021c2:	4603      	mov	r3, r0
 80021c4:	70fb      	strb	r3, [r7, #3]
 80021c6:	460b      	mov	r3, r1
 80021c8:	803b      	strh	r3, [r7, #0]
 80021ca:	4613      	mov	r3, r2
 80021cc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80021ce:	2300      	movs	r3, #0
 80021d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	da0e      	bge.n	80021f8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021da:	78fb      	ldrb	r3, [r7, #3]
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	1c5a      	adds	r2, r3, #1
 80021e2:	4613      	mov	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	4413      	add	r3, r2
 80021ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2201      	movs	r2, #1
 80021f4:	705a      	strb	r2, [r3, #1]
 80021f6:	e00e      	b.n	8002216 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021f8:	78fb      	ldrb	r3, [r7, #3]
 80021fa:	f003 0207 	and.w	r2, r3, #7
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	4413      	add	r3, r2
 800220e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002216:	78fb      	ldrb	r3, [r7, #3]
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	b2da      	uxtb	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002222:	883a      	ldrh	r2, [r7, #0]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	78ba      	ldrb	r2, [r7, #2]
 800222c:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800222e:	78bb      	ldrb	r3, [r7, #2]
 8002230:	2b02      	cmp	r3, #2
 8002232:	d102      	bne.n	800223a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002240:	2b01      	cmp	r3, #1
 8002242:	d101      	bne.n	8002248 <HAL_PCD_EP_Open+0x94>
 8002244:	2302      	movs	r3, #2
 8002246:	e00e      	b.n	8002266 <HAL_PCD_EP_Open+0xb2>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68f9      	ldr	r1, [r7, #12]
 8002256:	4618      	mov	r0, r3
 8002258:	f002 fa26 	bl	80046a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002264:	7afb      	ldrb	r3, [r7, #11]
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b084      	sub	sp, #16
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	460b      	mov	r3, r1
 8002278:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800227a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800227e:	2b00      	cmp	r3, #0
 8002280:	da0e      	bge.n	80022a0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002282:	78fb      	ldrb	r3, [r7, #3]
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	1c5a      	adds	r2, r3, #1
 800228a:	4613      	mov	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	4413      	add	r3, r2
 8002296:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2201      	movs	r2, #1
 800229c:	705a      	strb	r2, [r3, #1]
 800229e:	e00e      	b.n	80022be <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022a0:	78fb      	ldrb	r3, [r7, #3]
 80022a2:	f003 0207 	and.w	r2, r3, #7
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	4413      	add	r3, r2
 80022b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80022be:	78fb      	ldrb	r3, [r7, #3]
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d101      	bne.n	80022d8 <HAL_PCD_EP_Close+0x6a>
 80022d4:	2302      	movs	r3, #2
 80022d6:	e00e      	b.n	80022f6 <HAL_PCD_EP_Close+0x88>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68f9      	ldr	r1, [r7, #12]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f002 fd9e 	bl	8004e28 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b086      	sub	sp, #24
 8002302:	af00      	add	r7, sp, #0
 8002304:	60f8      	str	r0, [r7, #12]
 8002306:	607a      	str	r2, [r7, #4]
 8002308:	603b      	str	r3, [r7, #0]
 800230a:	460b      	mov	r3, r1
 800230c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800230e:	7afb      	ldrb	r3, [r7, #11]
 8002310:	f003 0207 	and.w	r2, r3, #7
 8002314:	4613      	mov	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	4413      	add	r3, r2
 8002324:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	2200      	movs	r2, #0
 8002336:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	2200      	movs	r2, #0
 800233c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800233e:	7afb      	ldrb	r3, [r7, #11]
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	b2da      	uxtb	r2, r3
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6979      	ldr	r1, [r7, #20]
 8002350:	4618      	mov	r0, r3
 8002352:	f002 ff55 	bl	8005200 <USB_EPStartXfer>

  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	460b      	mov	r3, r1
 800236a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800236c:	78fb      	ldrb	r3, [r7, #3]
 800236e:	f003 0207 	and.w	r2, r3, #7
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	4613      	mov	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	440b      	add	r3, r1
 800237e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002382:	681b      	ldr	r3, [r3, #0]
}
 8002384:	4618      	mov	r0, r3
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	bc80      	pop	{r7}
 800238c:	4770      	bx	lr

0800238e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b086      	sub	sp, #24
 8002392:	af00      	add	r7, sp, #0
 8002394:	60f8      	str	r0, [r7, #12]
 8002396:	607a      	str	r2, [r7, #4]
 8002398:	603b      	str	r3, [r7, #0]
 800239a:	460b      	mov	r3, r1
 800239c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800239e:	7afb      	ldrb	r3, [r7, #11]
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	1c5a      	adds	r2, r3, #1
 80023a6:	4613      	mov	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	4413      	add	r3, r2
 80023b2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	2200      	movs	r2, #0
 80023d2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	2201      	movs	r2, #1
 80023d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023da:	7afb      	ldrb	r3, [r7, #11]
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6979      	ldr	r1, [r7, #20]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f002 ff07 	bl	8005200 <USB_EPStartXfer>

  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002408:	78fb      	ldrb	r3, [r7, #3]
 800240a:	f003 0207 	and.w	r2, r3, #7
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	429a      	cmp	r2, r3
 8002414:	d901      	bls.n	800241a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e04c      	b.n	80024b4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800241a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800241e:	2b00      	cmp	r3, #0
 8002420:	da0e      	bge.n	8002440 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002422:	78fb      	ldrb	r3, [r7, #3]
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	1c5a      	adds	r2, r3, #1
 800242a:	4613      	mov	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	4413      	add	r3, r2
 8002436:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2201      	movs	r2, #1
 800243c:	705a      	strb	r2, [r3, #1]
 800243e:	e00c      	b.n	800245a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002440:	78fa      	ldrb	r2, [r7, #3]
 8002442:	4613      	mov	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	4413      	add	r3, r2
 8002452:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2201      	movs	r2, #1
 800245e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002460:	78fb      	ldrb	r3, [r7, #3]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	b2da      	uxtb	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002472:	2b01      	cmp	r3, #1
 8002474:	d101      	bne.n	800247a <HAL_PCD_EP_SetStall+0x7e>
 8002476:	2302      	movs	r3, #2
 8002478:	e01c      	b.n	80024b4 <HAL_PCD_EP_SetStall+0xb8>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68f9      	ldr	r1, [r7, #12]
 8002488:	4618      	mov	r0, r3
 800248a:	f004 fa6a 	bl	8006962 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800248e:	78fb      	ldrb	r3, [r7, #3]
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	2b00      	cmp	r3, #0
 8002496:	d108      	bne.n	80024aa <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80024a2:	4619      	mov	r1, r3
 80024a4:	4610      	mov	r0, r2
 80024a6:	f004 fb8f 	bl	8006bc8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	460b      	mov	r3, r1
 80024c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80024c8:	78fb      	ldrb	r3, [r7, #3]
 80024ca:	f003 020f 	and.w	r2, r3, #15
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d901      	bls.n	80024da <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e040      	b.n	800255c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	da0e      	bge.n	8002500 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024e2:	78fb      	ldrb	r3, [r7, #3]
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	1c5a      	adds	r2, r3, #1
 80024ea:	4613      	mov	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	4413      	add	r3, r2
 80024f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2201      	movs	r2, #1
 80024fc:	705a      	strb	r2, [r3, #1]
 80024fe:	e00e      	b.n	800251e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002500:	78fb      	ldrb	r3, [r7, #3]
 8002502:	f003 0207 	and.w	r2, r3, #7
 8002506:	4613      	mov	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	4413      	add	r3, r2
 8002516:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002524:	78fb      	ldrb	r3, [r7, #3]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	b2da      	uxtb	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002536:	2b01      	cmp	r3, #1
 8002538:	d101      	bne.n	800253e <HAL_PCD_EP_ClrStall+0x82>
 800253a:	2302      	movs	r3, #2
 800253c:	e00e      	b.n	800255c <HAL_PCD_EP_ClrStall+0xa0>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68f9      	ldr	r1, [r7, #12]
 800254c:	4618      	mov	r0, r3
 800254e:	f004 fa58 	bl	8006a02 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b096      	sub	sp, #88	; 0x58
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800256c:	e3bf      	b.n	8002cee <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002576:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800257a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800257e:	b2db      	uxtb	r3, r3
 8002580:	f003 030f 	and.w	r3, r3, #15
 8002584:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8002588:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800258c:	2b00      	cmp	r3, #0
 800258e:	f040 8179 	bne.w	8002884 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002592:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002596:	f003 0310 	and.w	r3, r3, #16
 800259a:	2b00      	cmp	r3, #0
 800259c:	d152      	bne.n	8002644 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80025aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ae:	81fb      	strh	r3, [r7, #14]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	89fb      	ldrh	r3, [r7, #14]
 80025b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025be:	b29b      	uxth	r3, r3
 80025c0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	3328      	adds	r3, #40	; 0x28
 80025c6:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	461a      	mov	r2, r3
 80025d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	4413      	add	r3, r2
 80025dc:	3302      	adds	r3, #2
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6812      	ldr	r2, [r2, #0]
 80025e4:	4413      	add	r3, r2
 80025e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025ea:	881b      	ldrh	r3, [r3, #0]
 80025ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025f2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80025f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025f6:	695a      	ldr	r2, [r3, #20]
 80025f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025fa:	69db      	ldr	r3, [r3, #28]
 80025fc:	441a      	add	r2, r3
 80025fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002600:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002602:	2100      	movs	r1, #0
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f006 f934 	bl	8008872 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 836b 	beq.w	8002cee <PCD_EP_ISR_Handler+0x78a>
 8002618:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	2b00      	cmp	r3, #0
 800261e:	f040 8366 	bne.w	8002cee <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002628:	b2db      	uxtb	r3, r3
 800262a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800262e:	b2da      	uxtb	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	b292      	uxth	r2, r2
 8002636:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002642:	e354      	b.n	8002cee <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800264a:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002656:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800265a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800265e:	2b00      	cmp	r3, #0
 8002660:	d034      	beq.n	80026cc <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800266a:	b29b      	uxth	r3, r3
 800266c:	461a      	mov	r2, r3
 800266e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	4413      	add	r3, r2
 8002676:	3306      	adds	r3, #6
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	6812      	ldr	r2, [r2, #0]
 800267e:	4413      	add	r3, r2
 8002680:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002684:	881b      	ldrh	r3, [r3, #0]
 8002686:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800268a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800268c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6818      	ldr	r0, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800269a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800269c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800269e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	f004 fae1 	bl	8006c68 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	881b      	ldrh	r3, [r3, #0]
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	f640 738f 	movw	r3, #3983	; 0xf8f
 80026b2:	4013      	ands	r3, r2
 80026b4:	823b      	strh	r3, [r7, #16]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	8a3a      	ldrh	r2, [r7, #16]
 80026bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026c0:	b292      	uxth	r2, r2
 80026c2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f006 f8a7 	bl	8008818 <HAL_PCD_SetupStageCallback>
 80026ca:	e310      	b.n	8002cee <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80026cc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f280 830c 	bge.w	8002cee <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	881b      	ldrh	r3, [r3, #0]
 80026dc:	b29a      	uxth	r2, r3
 80026de:	f640 738f 	movw	r3, #3983	; 0xf8f
 80026e2:	4013      	ands	r3, r2
 80026e4:	83fb      	strh	r3, [r7, #30]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	8bfa      	ldrh	r2, [r7, #30]
 80026ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026f0:	b292      	uxth	r2, r2
 80026f2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	461a      	mov	r2, r3
 8002700:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	4413      	add	r3, r2
 8002708:	3306      	adds	r3, #6
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6812      	ldr	r2, [r2, #0]
 8002710:	4413      	add	r3, r2
 8002712:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002716:	881b      	ldrh	r3, [r3, #0]
 8002718:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800271c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800271e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002720:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d019      	beq.n	800275c <PCD_EP_ISR_Handler+0x1f8>
 8002728:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d015      	beq.n	800275c <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6818      	ldr	r0, [r3, #0]
 8002734:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002736:	6959      	ldr	r1, [r3, #20]
 8002738:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800273a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800273c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800273e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002740:	b29b      	uxth	r3, r3
 8002742:	f004 fa91 	bl	8006c68 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002748:	695a      	ldr	r2, [r3, #20]
 800274a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	441a      	add	r2, r3
 8002750:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002752:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002754:	2100      	movs	r1, #0
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f006 f870 	bl	800883c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	881b      	ldrh	r3, [r3, #0]
 8002762:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002766:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800276a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800276e:	2b00      	cmp	r3, #0
 8002770:	f040 82bd 	bne.w	8002cee <PCD_EP_ISR_Handler+0x78a>
 8002774:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002778:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800277c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002780:	f000 82b5 	beq.w	8002cee <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	61bb      	str	r3, [r7, #24]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002792:	b29b      	uxth	r3, r3
 8002794:	461a      	mov	r2, r3
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	4413      	add	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	881b      	ldrh	r3, [r3, #0]
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	801a      	strh	r2, [r3, #0]
 80027b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	2b3e      	cmp	r3, #62	; 0x3e
 80027ba:	d91d      	bls.n	80027f8 <PCD_EP_ISR_Handler+0x294>
 80027bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	095b      	lsrs	r3, r3, #5
 80027c2:	647b      	str	r3, [r7, #68]	; 0x44
 80027c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	f003 031f 	and.w	r3, r3, #31
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d102      	bne.n	80027d6 <PCD_EP_ISR_Handler+0x272>
 80027d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027d2:	3b01      	subs	r3, #1
 80027d4:	647b      	str	r3, [r7, #68]	; 0x44
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	b29a      	uxth	r2, r3
 80027dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027de:	b29b      	uxth	r3, r3
 80027e0:	029b      	lsls	r3, r3, #10
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	4313      	orrs	r3, r2
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	801a      	strh	r2, [r3, #0]
 80027f6:	e026      	b.n	8002846 <PCD_EP_ISR_Handler+0x2e2>
 80027f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10a      	bne.n	8002816 <PCD_EP_ISR_Handler+0x2b2>
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	881b      	ldrh	r3, [r3, #0]
 8002804:	b29b      	uxth	r3, r3
 8002806:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800280a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800280e:	b29a      	uxth	r2, r3
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	801a      	strh	r2, [r3, #0]
 8002814:	e017      	b.n	8002846 <PCD_EP_ISR_Handler+0x2e2>
 8002816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	085b      	lsrs	r3, r3, #1
 800281c:	647b      	str	r3, [r7, #68]	; 0x44
 800281e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d002      	beq.n	8002830 <PCD_EP_ISR_Handler+0x2cc>
 800282a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800282c:	3301      	adds	r3, #1
 800282e:	647b      	str	r3, [r7, #68]	; 0x44
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	881b      	ldrh	r3, [r3, #0]
 8002834:	b29a      	uxth	r2, r3
 8002836:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002838:	b29b      	uxth	r3, r3
 800283a:	029b      	lsls	r3, r3, #10
 800283c:	b29b      	uxth	r3, r3
 800283e:	4313      	orrs	r3, r2
 8002840:	b29a      	uxth	r2, r3
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	881b      	ldrh	r3, [r3, #0]
 800284c:	b29b      	uxth	r3, r3
 800284e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002856:	827b      	strh	r3, [r7, #18]
 8002858:	8a7b      	ldrh	r3, [r7, #18]
 800285a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800285e:	827b      	strh	r3, [r7, #18]
 8002860:	8a7b      	ldrh	r3, [r7, #18]
 8002862:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002866:	827b      	strh	r3, [r7, #18]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	8a7b      	ldrh	r3, [r7, #18]
 800286e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002872:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002876:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800287a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800287e:	b29b      	uxth	r3, r3
 8002880:	8013      	strh	r3, [r2, #0]
 8002882:	e234      	b.n	8002cee <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	461a      	mov	r2, r3
 800288a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	881b      	ldrh	r3, [r3, #0]
 8002894:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002898:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800289c:	2b00      	cmp	r3, #0
 800289e:	f280 80fc 	bge.w	8002a9a <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	461a      	mov	r2, r3
 80028a8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	881b      	ldrh	r3, [r3, #0]
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80028b8:	4013      	ands	r3, r2
 80028ba:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	461a      	mov	r2, r3
 80028c4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80028d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028d4:	b292      	uxth	r2, r2
 80028d6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80028d8:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80028dc:	4613      	mov	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	4413      	add	r3, r2
 80028ec:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80028ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f0:	7b1b      	ldrb	r3, [r3, #12]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d125      	bne.n	8002942 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028fe:	b29b      	uxth	r3, r3
 8002900:	461a      	mov	r2, r3
 8002902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	4413      	add	r3, r2
 800290a:	3306      	adds	r3, #6
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	6812      	ldr	r2, [r2, #0]
 8002912:	4413      	add	r3, r2
 8002914:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002918:	881b      	ldrh	r3, [r3, #0]
 800291a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800291e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8002922:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 8092 	beq.w	8002a50 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6818      	ldr	r0, [r3, #0]
 8002930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002932:	6959      	ldr	r1, [r3, #20]
 8002934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002936:	88da      	ldrh	r2, [r3, #6]
 8002938:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800293c:	f004 f994 	bl	8006c68 <USB_ReadPMA>
 8002940:	e086      	b.n	8002a50 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002942:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002944:	78db      	ldrb	r3, [r3, #3]
 8002946:	2b02      	cmp	r3, #2
 8002948:	d10a      	bne.n	8002960 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800294a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800294e:	461a      	mov	r2, r3
 8002950:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f9d9 	bl	8002d0a <HAL_PCD_EP_DB_Receive>
 8002958:	4603      	mov	r3, r0
 800295a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800295e:	e077      	b.n	8002a50 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	461a      	mov	r2, r3
 8002966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	881b      	ldrh	r3, [r3, #0]
 8002970:	b29b      	uxth	r3, r3
 8002972:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800297a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	461a      	mov	r2, r3
 8002984:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	441a      	add	r2, r3
 800298c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002990:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002994:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002998:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800299c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	461a      	mov	r2, r3
 80029aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4413      	add	r3, r2
 80029b2:	881b      	ldrh	r3, [r3, #0]
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d024      	beq.n	8002a08 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	461a      	mov	r2, r3
 80029ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	4413      	add	r3, r2
 80029d2:	3302      	adds	r3, #2
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	6812      	ldr	r2, [r2, #0]
 80029da:	4413      	add	r3, r2
 80029dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029e0:	881b      	ldrh	r3, [r3, #0]
 80029e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029e6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80029ea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d02e      	beq.n	8002a50 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6818      	ldr	r0, [r3, #0]
 80029f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029f8:	6959      	ldr	r1, [r3, #20]
 80029fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029fc:	891a      	ldrh	r2, [r3, #8]
 80029fe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a02:	f004 f931 	bl	8006c68 <USB_ReadPMA>
 8002a06:	e023      	b.n	8002a50 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	461a      	mov	r2, r3
 8002a14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	4413      	add	r3, r2
 8002a1c:	3306      	adds	r3, #6
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6812      	ldr	r2, [r2, #0]
 8002a24:	4413      	add	r3, r2
 8002a26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a2a:	881b      	ldrh	r3, [r3, #0]
 8002a2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a30:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002a34:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d009      	beq.n	8002a50 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6818      	ldr	r0, [r3, #0]
 8002a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a42:	6959      	ldr	r1, [r3, #20]
 8002a44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a46:	895a      	ldrh	r2, [r3, #10]
 8002a48:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a4c:	f004 f90c 	bl	8006c68 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002a50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a52:	69da      	ldr	r2, [r3, #28]
 8002a54:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a58:	441a      	add	r2, r3
 8002a5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a5c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002a5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a60:	695a      	ldr	r2, [r3, #20]
 8002a62:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a66:	441a      	add	r2, r3
 8002a68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a6a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d005      	beq.n	8002a80 <PCD_EP_ISR_Handler+0x51c>
 8002a74:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d206      	bcs.n	8002a8e <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002a80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	4619      	mov	r1, r3
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f005 fed8 	bl	800883c <HAL_PCD_DataOutStageCallback>
 8002a8c:	e005      	b.n	8002a9a <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a94:	4618      	mov	r0, r3
 8002a96:	f002 fbb3 	bl	8005200 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002a9a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f000 8123 	beq.w	8002cee <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8002aa8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002aac:	1c5a      	adds	r2, r3, #1
 8002aae:	4613      	mov	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	4413      	add	r3, r2
 8002aba:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	881b      	ldrh	r3, [r3, #0]
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ad6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	441a      	add	r2, r3
 8002ae8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002aec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002af0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002af8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002afa:	78db      	ldrb	r3, [r3, #3]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	f040 80a2 	bne.w	8002c46 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8002b02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b04:	2200      	movs	r2, #0
 8002b06:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002b08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b0a:	7b1b      	ldrb	r3, [r3, #12]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 8093 	beq.w	8002c38 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b12:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d046      	beq.n	8002bac <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b20:	785b      	ldrb	r3, [r3, #1]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d126      	bne.n	8002b74 <PCD_EP_ISR_Handler+0x610>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	461a      	mov	r2, r3
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	4413      	add	r3, r2
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	011a      	lsls	r2, r3, #4
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b46:	4413      	add	r3, r2
 8002b48:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b4c:	623b      	str	r3, [r7, #32]
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
 8002b50:	881b      	ldrh	r3, [r3, #0]
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	6a3b      	ldr	r3, [r7, #32]
 8002b5c:	801a      	strh	r2, [r3, #0]
 8002b5e:	6a3b      	ldr	r3, [r7, #32]
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
 8002b70:	801a      	strh	r2, [r3, #0]
 8002b72:	e061      	b.n	8002c38 <PCD_EP_ISR_Handler+0x6d4>
 8002b74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b76:	785b      	ldrb	r3, [r3, #1]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d15d      	bne.n	8002c38 <PCD_EP_ISR_Handler+0x6d4>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b90:	4413      	add	r3, r2
 8002b92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	011a      	lsls	r2, r3, #4
 8002b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ba2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	801a      	strh	r2, [r3, #0]
 8002baa:	e045      	b.n	8002c38 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bb4:	785b      	ldrb	r3, [r3, #1]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d126      	bne.n	8002c08 <PCD_EP_ISR_Handler+0x6a4>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	637b      	str	r3, [r7, #52]	; 0x34
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	461a      	mov	r2, r3
 8002bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bce:	4413      	add	r3, r2
 8002bd0:	637b      	str	r3, [r7, #52]	; 0x34
 8002bd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	011a      	lsls	r2, r3, #4
 8002bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bda:	4413      	add	r3, r2
 8002bdc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002be0:	633b      	str	r3, [r7, #48]	; 0x30
 8002be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be4:	881b      	ldrh	r3, [r3, #0]
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf0:	801a      	strh	r2, [r3, #0]
 8002bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf4:	881b      	ldrh	r3, [r3, #0]
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c04:	801a      	strh	r2, [r3, #0]
 8002c06:	e017      	b.n	8002c38 <PCD_EP_ISR_Handler+0x6d4>
 8002c08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c0a:	785b      	ldrb	r3, [r3, #1]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d113      	bne.n	8002c38 <PCD_EP_ISR_Handler+0x6d4>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c1e:	4413      	add	r3, r2
 8002c20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	011a      	lsls	r2, r3, #4
 8002c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c2a:	4413      	add	r3, r2
 8002c2c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c30:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c34:	2200      	movs	r2, #0
 8002c36:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f005 fe17 	bl	8008872 <HAL_PCD_DataInStageCallback>
 8002c44:	e053      	b.n	8002cee <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002c46:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d146      	bne.n	8002ce0 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	4413      	add	r3, r2
 8002c66:	3302      	adds	r3, #2
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	6812      	ldr	r2, [r2, #0]
 8002c6e:	4413      	add	r3, r2
 8002c70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c74:	881b      	ldrh	r3, [r3, #0]
 8002c76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c7a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002c7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c80:	699a      	ldr	r2, [r3, #24]
 8002c82:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d907      	bls.n	8002c9a <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8002c8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c8c:	699a      	ldr	r2, [r3, #24]
 8002c8e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002c92:	1ad2      	subs	r2, r2, r3
 8002c94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c96:	619a      	str	r2, [r3, #24]
 8002c98:	e002      	b.n	8002ca0 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8002c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002ca0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d106      	bne.n	8002cb6 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ca8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	4619      	mov	r1, r3
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f005 fddf 	bl	8008872 <HAL_PCD_DataInStageCallback>
 8002cb4:	e01b      	b.n	8002cee <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002cb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cb8:	695a      	ldr	r2, [r3, #20]
 8002cba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002cbe:	441a      	add	r2, r3
 8002cc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cc2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002cc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cc6:	69da      	ldr	r2, [r3, #28]
 8002cc8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002ccc:	441a      	add	r2, r3
 8002cce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cd0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f002 fa91 	bl	8005200 <USB_EPStartXfer>
 8002cde:	e006      	b.n	8002cee <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002ce0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 f91b 	bl	8002f24 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	b21b      	sxth	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f6ff ac37 	blt.w	800256e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3758      	adds	r7, #88	; 0x58
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b088      	sub	sp, #32
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	60f8      	str	r0, [r7, #12]
 8002d12:	60b9      	str	r1, [r7, #8]
 8002d14:	4613      	mov	r3, r2
 8002d16:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d18:	88fb      	ldrh	r3, [r7, #6]
 8002d1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d07e      	beq.n	8002e20 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	4413      	add	r3, r2
 8002d36:	3302      	adds	r3, #2
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	6812      	ldr	r2, [r2, #0]
 8002d3e:	4413      	add	r3, r2
 8002d40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d44:	881b      	ldrh	r3, [r3, #0]
 8002d46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d4a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	699a      	ldr	r2, [r3, #24]
 8002d50:	8b7b      	ldrh	r3, [r7, #26]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d306      	bcc.n	8002d64 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	699a      	ldr	r2, [r3, #24]
 8002d5a:	8b7b      	ldrh	r3, [r7, #26]
 8002d5c:	1ad2      	subs	r2, r2, r3
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	619a      	str	r2, [r3, #24]
 8002d62:	e002      	b.n	8002d6a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	2200      	movs	r2, #0
 8002d68:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d123      	bne.n	8002dba <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	461a      	mov	r2, r3
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	4413      	add	r3, r2
 8002d80:	881b      	ldrh	r3, [r3, #0]
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d8c:	833b      	strh	r3, [r7, #24]
 8002d8e:	8b3b      	ldrh	r3, [r7, #24]
 8002d90:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d94:	833b      	strh	r3, [r7, #24]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	441a      	add	r2, r3
 8002da4:	8b3b      	ldrh	r3, [r7, #24]
 8002da6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002daa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002dba:	88fb      	ldrh	r3, [r7, #6]
 8002dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d01f      	beq.n	8002e04 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	881b      	ldrh	r3, [r3, #0]
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dde:	82fb      	strh	r3, [r7, #22]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	461a      	mov	r2, r3
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	441a      	add	r2, r3
 8002dee:	8afb      	ldrh	r3, [r7, #22]
 8002df0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002df4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002df8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dfc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002e04:	8b7b      	ldrh	r3, [r7, #26]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 8087 	beq.w	8002f1a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6818      	ldr	r0, [r3, #0]
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	6959      	ldr	r1, [r3, #20]
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	891a      	ldrh	r2, [r3, #8]
 8002e18:	8b7b      	ldrh	r3, [r7, #26]
 8002e1a:	f003 ff25 	bl	8006c68 <USB_ReadPMA>
 8002e1e:	e07c      	b.n	8002f1a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	4413      	add	r3, r2
 8002e34:	3306      	adds	r3, #6
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	6812      	ldr	r2, [r2, #0]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e48:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	699a      	ldr	r2, [r3, #24]
 8002e4e:	8b7b      	ldrh	r3, [r7, #26]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d306      	bcc.n	8002e62 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	699a      	ldr	r2, [r3, #24]
 8002e58:	8b7b      	ldrh	r3, [r7, #26]
 8002e5a:	1ad2      	subs	r2, r2, r3
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	619a      	str	r2, [r3, #24]
 8002e60:	e002      	b.n	8002e68 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2200      	movs	r2, #0
 8002e66:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d123      	bne.n	8002eb8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	461a      	mov	r2, r3
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	881b      	ldrh	r3, [r3, #0]
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e8a:	83fb      	strh	r3, [r7, #30]
 8002e8c:	8bfb      	ldrh	r3, [r7, #30]
 8002e8e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002e92:	83fb      	strh	r3, [r7, #30]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	461a      	mov	r2, r3
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	441a      	add	r2, r3
 8002ea2:	8bfb      	ldrh	r3, [r7, #30]
 8002ea4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ea8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002eb8:	88fb      	ldrh	r3, [r7, #6]
 8002eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d11f      	bne.n	8002f02 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	881b      	ldrh	r3, [r3, #0]
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002edc:	83bb      	strh	r3, [r7, #28]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	441a      	add	r2, r3
 8002eec:	8bbb      	ldrh	r3, [r7, #28]
 8002eee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ef2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002efa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002f02:	8b7b      	ldrh	r3, [r7, #26]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d008      	beq.n	8002f1a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6818      	ldr	r0, [r3, #0]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	6959      	ldr	r1, [r3, #20]
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	895a      	ldrh	r2, [r3, #10]
 8002f14:	8b7b      	ldrh	r3, [r7, #26]
 8002f16:	f003 fea7 	bl	8006c68 <USB_ReadPMA>
    }
  }

  return count;
 8002f1a:	8b7b      	ldrh	r3, [r7, #26]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3720      	adds	r7, #32
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b0a4      	sub	sp, #144	; 0x90
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f32:	88fb      	ldrh	r3, [r7, #6]
 8002f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f000 81dd 	beq.w	80032f8 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	461a      	mov	r2, r3
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	4413      	add	r3, r2
 8002f52:	3302      	adds	r3, #2
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	6812      	ldr	r2, [r2, #0]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f60:	881b      	ldrh	r3, [r3, #0]
 8002f62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f66:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	699a      	ldr	r2, [r3, #24]
 8002f6e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d907      	bls.n	8002f86 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	699a      	ldr	r2, [r3, #24]
 8002f7a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f7e:	1ad2      	subs	r2, r2, r3
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	619a      	str	r2, [r3, #24]
 8002f84:	e002      	b.n	8002f8c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f040 80b9 	bne.w	8003108 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	785b      	ldrb	r3, [r3, #1]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d126      	bne.n	8002fec <HAL_PCD_EP_DB_Transmit+0xc8>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	461a      	mov	r2, r3
 8002fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb2:	4413      	add	r3, r2
 8002fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	011a      	lsls	r2, r3, #4
 8002fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fbe:	4413      	add	r3, r2
 8002fc0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002fc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc8:	881b      	ldrh	r3, [r3, #0]
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd4:	801a      	strh	r2, [r3, #0]
 8002fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd8:	881b      	ldrh	r3, [r3, #0]
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fe0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe8:	801a      	strh	r2, [r3, #0]
 8002fea:	e01a      	b.n	8003022 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	785b      	ldrb	r3, [r3, #1]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d116      	bne.n	8003022 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	637b      	str	r3, [r7, #52]	; 0x34
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003002:	b29b      	uxth	r3, r3
 8003004:	461a      	mov	r2, r3
 8003006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003008:	4413      	add	r3, r2
 800300a:	637b      	str	r3, [r7, #52]	; 0x34
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	011a      	lsls	r2, r3, #4
 8003012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003014:	4413      	add	r3, r2
 8003016:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800301a:	633b      	str	r3, [r7, #48]	; 0x30
 800301c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301e:	2200      	movs	r2, #0
 8003020:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	627b      	str	r3, [r7, #36]	; 0x24
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	785b      	ldrb	r3, [r3, #1]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d126      	bne.n	800307e <HAL_PCD_EP_DB_Transmit+0x15a>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	61fb      	str	r3, [r7, #28]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800303e:	b29b      	uxth	r3, r3
 8003040:	461a      	mov	r2, r3
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	4413      	add	r3, r2
 8003046:	61fb      	str	r3, [r7, #28]
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	011a      	lsls	r2, r3, #4
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	4413      	add	r3, r2
 8003052:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003056:	61bb      	str	r3, [r7, #24]
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	881b      	ldrh	r3, [r3, #0]
 800305c:	b29b      	uxth	r3, r3
 800305e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003062:	b29a      	uxth	r2, r3
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	801a      	strh	r2, [r3, #0]
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	881b      	ldrh	r3, [r3, #0]
 800306c:	b29b      	uxth	r3, r3
 800306e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003072:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003076:	b29a      	uxth	r2, r3
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	801a      	strh	r2, [r3, #0]
 800307c:	e017      	b.n	80030ae <HAL_PCD_EP_DB_Transmit+0x18a>
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	785b      	ldrb	r3, [r3, #1]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d113      	bne.n	80030ae <HAL_PCD_EP_DB_Transmit+0x18a>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800308e:	b29b      	uxth	r3, r3
 8003090:	461a      	mov	r2, r3
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003094:	4413      	add	r3, r2
 8003096:	627b      	str	r3, [r7, #36]	; 0x24
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	011a      	lsls	r2, r3, #4
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	4413      	add	r3, r2
 80030a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80030a6:	623b      	str	r3, [r7, #32]
 80030a8:	6a3b      	ldr	r3, [r7, #32]
 80030aa:	2200      	movs	r2, #0
 80030ac:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	4619      	mov	r1, r3
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f005 fbdc 	bl	8008872 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80030ba:	88fb      	ldrh	r3, [r7, #6]
 80030bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 82fc 	beq.w	80036be <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	461a      	mov	r2, r3
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4413      	add	r3, r2
 80030d4:	881b      	ldrh	r3, [r3, #0]
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030e0:	82fb      	strh	r3, [r7, #22]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	461a      	mov	r2, r3
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	441a      	add	r2, r3
 80030f0:	8afb      	ldrh	r3, [r7, #22]
 80030f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003102:	b29b      	uxth	r3, r3
 8003104:	8013      	strh	r3, [r2, #0]
 8003106:	e2da      	b.n	80036be <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003108:	88fb      	ldrh	r3, [r7, #6]
 800310a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d021      	beq.n	8003156 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	461a      	mov	r2, r3
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	881b      	ldrh	r3, [r3, #0]
 8003122:	b29b      	uxth	r3, r3
 8003124:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003128:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800312c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	461a      	mov	r2, r3
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	441a      	add	r2, r3
 800313e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003142:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003146:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800314a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800314e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003152:	b29b      	uxth	r3, r3
 8003154:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800315c:	2b01      	cmp	r3, #1
 800315e:	f040 82ae 	bne.w	80036be <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	695a      	ldr	r2, [r3, #20]
 8003166:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800316a:	441a      	add	r2, r3
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	69da      	ldr	r2, [r3, #28]
 8003174:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003178:	441a      	add	r2, r3
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	6a1a      	ldr	r2, [r3, #32]
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	429a      	cmp	r2, r3
 8003188:	d30b      	bcc.n	80031a2 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	6a1a      	ldr	r2, [r3, #32]
 8003196:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800319a:	1ad2      	subs	r2, r2, r3
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	621a      	str	r2, [r3, #32]
 80031a0:	e017      	b.n	80031d2 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d108      	bne.n	80031bc <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80031aa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80031ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80031ba:	e00a      	b.n	80031d2 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2200      	movs	r2, #0
 80031d0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	785b      	ldrb	r3, [r3, #1]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d165      	bne.n	80032a6 <HAL_PCD_EP_DB_Transmit+0x382>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	461a      	mov	r2, r3
 80031ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ee:	4413      	add	r3, r2
 80031f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	011a      	lsls	r2, r3, #4
 80031f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031fa:	4413      	add	r3, r2
 80031fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003200:	63bb      	str	r3, [r7, #56]	; 0x38
 8003202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003204:	881b      	ldrh	r3, [r3, #0]
 8003206:	b29b      	uxth	r3, r3
 8003208:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800320c:	b29a      	uxth	r2, r3
 800320e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003210:	801a      	strh	r2, [r3, #0]
 8003212:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003216:	2b3e      	cmp	r3, #62	; 0x3e
 8003218:	d91d      	bls.n	8003256 <HAL_PCD_EP_DB_Transmit+0x332>
 800321a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800321e:	095b      	lsrs	r3, r3, #5
 8003220:	64bb      	str	r3, [r7, #72]	; 0x48
 8003222:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003226:	f003 031f 	and.w	r3, r3, #31
 800322a:	2b00      	cmp	r3, #0
 800322c:	d102      	bne.n	8003234 <HAL_PCD_EP_DB_Transmit+0x310>
 800322e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003230:	3b01      	subs	r3, #1
 8003232:	64bb      	str	r3, [r7, #72]	; 0x48
 8003234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003236:	881b      	ldrh	r3, [r3, #0]
 8003238:	b29a      	uxth	r2, r3
 800323a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800323c:	b29b      	uxth	r3, r3
 800323e:	029b      	lsls	r3, r3, #10
 8003240:	b29b      	uxth	r3, r3
 8003242:	4313      	orrs	r3, r2
 8003244:	b29b      	uxth	r3, r3
 8003246:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800324a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800324e:	b29a      	uxth	r2, r3
 8003250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003252:	801a      	strh	r2, [r3, #0]
 8003254:	e044      	b.n	80032e0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003256:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10a      	bne.n	8003274 <HAL_PCD_EP_DB_Transmit+0x350>
 800325e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003260:	881b      	ldrh	r3, [r3, #0]
 8003262:	b29b      	uxth	r3, r3
 8003264:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003268:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800326c:	b29a      	uxth	r2, r3
 800326e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003270:	801a      	strh	r2, [r3, #0]
 8003272:	e035      	b.n	80032e0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003274:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003278:	085b      	lsrs	r3, r3, #1
 800327a:	64bb      	str	r3, [r7, #72]	; 0x48
 800327c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	2b00      	cmp	r3, #0
 8003286:	d002      	beq.n	800328e <HAL_PCD_EP_DB_Transmit+0x36a>
 8003288:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800328a:	3301      	adds	r3, #1
 800328c:	64bb      	str	r3, [r7, #72]	; 0x48
 800328e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003290:	881b      	ldrh	r3, [r3, #0]
 8003292:	b29a      	uxth	r2, r3
 8003294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003296:	b29b      	uxth	r3, r3
 8003298:	029b      	lsls	r3, r3, #10
 800329a:	b29b      	uxth	r3, r3
 800329c:	4313      	orrs	r3, r2
 800329e:	b29a      	uxth	r2, r3
 80032a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a2:	801a      	strh	r2, [r3, #0]
 80032a4:	e01c      	b.n	80032e0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	785b      	ldrb	r3, [r3, #1]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d118      	bne.n	80032e0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	647b      	str	r3, [r7, #68]	; 0x44
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032bc:	b29b      	uxth	r3, r3
 80032be:	461a      	mov	r2, r3
 80032c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032c2:	4413      	add	r3, r2
 80032c4:	647b      	str	r3, [r7, #68]	; 0x44
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	011a      	lsls	r2, r3, #4
 80032cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032ce:	4413      	add	r3, r2
 80032d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80032d4:	643b      	str	r3, [r7, #64]	; 0x40
 80032d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032da:	b29a      	uxth	r2, r3
 80032dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032de:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6818      	ldr	r0, [r3, #0]
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	6959      	ldr	r1, [r3, #20]
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	891a      	ldrh	r2, [r3, #8]
 80032ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	f003 fc74 	bl	8006bde <USB_WritePMA>
 80032f6:	e1e2      	b.n	80036be <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003300:	b29b      	uxth	r3, r3
 8003302:	461a      	mov	r2, r3
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	4413      	add	r3, r2
 800330c:	3306      	adds	r3, #6
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	6812      	ldr	r2, [r2, #0]
 8003314:	4413      	add	r3, r2
 8003316:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800331a:	881b      	ldrh	r3, [r3, #0]
 800331c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003320:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	699a      	ldr	r2, [r3, #24]
 8003328:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800332c:	429a      	cmp	r2, r3
 800332e:	d307      	bcc.n	8003340 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	699a      	ldr	r2, [r3, #24]
 8003334:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003338:	1ad2      	subs	r2, r2, r3
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	619a      	str	r2, [r3, #24]
 800333e:	e002      	b.n	8003346 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	2200      	movs	r2, #0
 8003344:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	2b00      	cmp	r3, #0
 800334c:	f040 80c0 	bne.w	80034d0 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	785b      	ldrb	r3, [r3, #1]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d126      	bne.n	80033a6 <HAL_PCD_EP_DB_Transmit+0x482>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003366:	b29b      	uxth	r3, r3
 8003368:	461a      	mov	r2, r3
 800336a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800336c:	4413      	add	r3, r2
 800336e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	011a      	lsls	r2, r3, #4
 8003376:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003378:	4413      	add	r3, r2
 800337a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800337e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003380:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003382:	881b      	ldrh	r3, [r3, #0]
 8003384:	b29b      	uxth	r3, r3
 8003386:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800338a:	b29a      	uxth	r2, r3
 800338c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800338e:	801a      	strh	r2, [r3, #0]
 8003390:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003392:	881b      	ldrh	r3, [r3, #0]
 8003394:	b29b      	uxth	r3, r3
 8003396:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800339a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800339e:	b29a      	uxth	r2, r3
 80033a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033a2:	801a      	strh	r2, [r3, #0]
 80033a4:	e01a      	b.n	80033dc <HAL_PCD_EP_DB_Transmit+0x4b8>
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	785b      	ldrb	r3, [r3, #1]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d116      	bne.n	80033dc <HAL_PCD_EP_DB_Transmit+0x4b8>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	667b      	str	r3, [r7, #100]	; 0x64
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033bc:	b29b      	uxth	r3, r3
 80033be:	461a      	mov	r2, r3
 80033c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033c2:	4413      	add	r3, r2
 80033c4:	667b      	str	r3, [r7, #100]	; 0x64
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	011a      	lsls	r2, r3, #4
 80033cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033ce:	4413      	add	r3, r2
 80033d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80033d4:	663b      	str	r3, [r7, #96]	; 0x60
 80033d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033d8:	2200      	movs	r2, #0
 80033da:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	677b      	str	r3, [r7, #116]	; 0x74
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	785b      	ldrb	r3, [r3, #1]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d12b      	bne.n	8003442 <HAL_PCD_EP_DB_Transmit+0x51e>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	461a      	mov	r2, r3
 80033fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033fe:	4413      	add	r3, r2
 8003400:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	011a      	lsls	r2, r3, #4
 8003408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800340a:	4413      	add	r3, r2
 800340c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003410:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003414:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003418:	881b      	ldrh	r3, [r3, #0]
 800341a:	b29b      	uxth	r3, r3
 800341c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003420:	b29a      	uxth	r2, r3
 8003422:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003426:	801a      	strh	r2, [r3, #0]
 8003428:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800342c:	881b      	ldrh	r3, [r3, #0]
 800342e:	b29b      	uxth	r3, r3
 8003430:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003434:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003438:	b29a      	uxth	r2, r3
 800343a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800343e:	801a      	strh	r2, [r3, #0]
 8003440:	e017      	b.n	8003472 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	785b      	ldrb	r3, [r3, #1]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d113      	bne.n	8003472 <HAL_PCD_EP_DB_Transmit+0x54e>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003452:	b29b      	uxth	r3, r3
 8003454:	461a      	mov	r2, r3
 8003456:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003458:	4413      	add	r3, r2
 800345a:	677b      	str	r3, [r7, #116]	; 0x74
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	011a      	lsls	r2, r3, #4
 8003462:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003464:	4413      	add	r3, r2
 8003466:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800346a:	673b      	str	r3, [r7, #112]	; 0x70
 800346c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800346e:	2200      	movs	r2, #0
 8003470:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	4619      	mov	r1, r3
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f005 f9fa 	bl	8008872 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800347e:	88fb      	ldrh	r3, [r7, #6]
 8003480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003484:	2b00      	cmp	r3, #0
 8003486:	f040 811a 	bne.w	80036be <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	461a      	mov	r2, r3
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4413      	add	r3, r2
 8003498:	881b      	ldrh	r3, [r3, #0]
 800349a:	b29b      	uxth	r3, r3
 800349c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034a4:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	461a      	mov	r2, r3
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	441a      	add	r2, r3
 80034b6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80034ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	8013      	strh	r3, [r2, #0]
 80034ce:	e0f6      	b.n	80036be <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80034d0:	88fb      	ldrh	r3, [r7, #6]
 80034d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d121      	bne.n	800351e <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	461a      	mov	r2, r3
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4413      	add	r3, r2
 80034e8:	881b      	ldrh	r3, [r3, #0]
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034f4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	461a      	mov	r2, r3
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	441a      	add	r2, r3
 8003506:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800350a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800350e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003512:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800351a:	b29b      	uxth	r3, r3
 800351c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003524:	2b01      	cmp	r3, #1
 8003526:	f040 80ca 	bne.w	80036be <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	695a      	ldr	r2, [r3, #20]
 800352e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003532:	441a      	add	r2, r3
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	69da      	ldr	r2, [r3, #28]
 800353c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003540:	441a      	add	r2, r3
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	6a1a      	ldr	r2, [r3, #32]
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	429a      	cmp	r2, r3
 8003550:	d30b      	bcc.n	800356a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	6a1a      	ldr	r2, [r3, #32]
 800355e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003562:	1ad2      	subs	r2, r2, r3
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	621a      	str	r2, [r3, #32]
 8003568:	e017      	b.n	800359a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d108      	bne.n	8003584 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003572:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003576:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003582:	e00a      	b.n	800359a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	6a1b      	ldr	r3, [r3, #32]
 8003588:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	2200      	movs	r2, #0
 8003590:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	657b      	str	r3, [r7, #84]	; 0x54
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	785b      	ldrb	r3, [r3, #1]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d165      	bne.n	8003674 <HAL_PCD_EP_DB_Transmit+0x750>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	461a      	mov	r2, r3
 80035ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035bc:	4413      	add	r3, r2
 80035be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	011a      	lsls	r2, r3, #4
 80035c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035c8:	4413      	add	r3, r2
 80035ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80035ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80035d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035d2:	881b      	ldrh	r3, [r3, #0]
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035da:	b29a      	uxth	r2, r3
 80035dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035de:	801a      	strh	r2, [r3, #0]
 80035e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035e4:	2b3e      	cmp	r3, #62	; 0x3e
 80035e6:	d91d      	bls.n	8003624 <HAL_PCD_EP_DB_Transmit+0x700>
 80035e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035ec:	095b      	lsrs	r3, r3, #5
 80035ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80035f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035f4:	f003 031f 	and.w	r3, r3, #31
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d102      	bne.n	8003602 <HAL_PCD_EP_DB_Transmit+0x6de>
 80035fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035fe:	3b01      	subs	r3, #1
 8003600:	66bb      	str	r3, [r7, #104]	; 0x68
 8003602:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003604:	881b      	ldrh	r3, [r3, #0]
 8003606:	b29a      	uxth	r2, r3
 8003608:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800360a:	b29b      	uxth	r3, r3
 800360c:	029b      	lsls	r3, r3, #10
 800360e:	b29b      	uxth	r3, r3
 8003610:	4313      	orrs	r3, r2
 8003612:	b29b      	uxth	r3, r3
 8003614:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003618:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800361c:	b29a      	uxth	r2, r3
 800361e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003620:	801a      	strh	r2, [r3, #0]
 8003622:	e041      	b.n	80036a8 <HAL_PCD_EP_DB_Transmit+0x784>
 8003624:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10a      	bne.n	8003642 <HAL_PCD_EP_DB_Transmit+0x71e>
 800362c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	b29b      	uxth	r3, r3
 8003632:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003636:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800363a:	b29a      	uxth	r2, r3
 800363c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800363e:	801a      	strh	r2, [r3, #0]
 8003640:	e032      	b.n	80036a8 <HAL_PCD_EP_DB_Transmit+0x784>
 8003642:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003646:	085b      	lsrs	r3, r3, #1
 8003648:	66bb      	str	r3, [r7, #104]	; 0x68
 800364a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <HAL_PCD_EP_DB_Transmit+0x738>
 8003656:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003658:	3301      	adds	r3, #1
 800365a:	66bb      	str	r3, [r7, #104]	; 0x68
 800365c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800365e:	881b      	ldrh	r3, [r3, #0]
 8003660:	b29a      	uxth	r2, r3
 8003662:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003664:	b29b      	uxth	r3, r3
 8003666:	029b      	lsls	r3, r3, #10
 8003668:	b29b      	uxth	r3, r3
 800366a:	4313      	orrs	r3, r2
 800366c:	b29a      	uxth	r2, r3
 800366e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003670:	801a      	strh	r2, [r3, #0]
 8003672:	e019      	b.n	80036a8 <HAL_PCD_EP_DB_Transmit+0x784>
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	785b      	ldrb	r3, [r3, #1]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d115      	bne.n	80036a8 <HAL_PCD_EP_DB_Transmit+0x784>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003684:	b29b      	uxth	r3, r3
 8003686:	461a      	mov	r2, r3
 8003688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800368a:	4413      	add	r3, r2
 800368c:	657b      	str	r3, [r7, #84]	; 0x54
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	011a      	lsls	r2, r3, #4
 8003694:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003696:	4413      	add	r3, r2
 8003698:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800369c:	653b      	str	r3, [r7, #80]	; 0x50
 800369e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036a6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6818      	ldr	r0, [r3, #0]
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	6959      	ldr	r1, [r3, #20]
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	895a      	ldrh	r2, [r3, #10]
 80036b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	f003 fa90 	bl	8006bde <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	881b      	ldrh	r3, [r3, #0]
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036d8:	82bb      	strh	r3, [r7, #20]
 80036da:	8abb      	ldrh	r3, [r7, #20]
 80036dc:	f083 0310 	eor.w	r3, r3, #16
 80036e0:	82bb      	strh	r3, [r7, #20]
 80036e2:	8abb      	ldrh	r3, [r7, #20]
 80036e4:	f083 0320 	eor.w	r3, r3, #32
 80036e8:	82bb      	strh	r3, [r7, #20]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	461a      	mov	r2, r3
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	441a      	add	r2, r3
 80036f8:	8abb      	ldrh	r3, [r7, #20]
 80036fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800370a:	b29b      	uxth	r3, r3
 800370c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3790      	adds	r7, #144	; 0x90
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003718:	b480      	push	{r7}
 800371a:	b087      	sub	sp, #28
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	607b      	str	r3, [r7, #4]
 8003722:	460b      	mov	r3, r1
 8003724:	817b      	strh	r3, [r7, #10]
 8003726:	4613      	mov	r3, r2
 8003728:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800372a:	897b      	ldrh	r3, [r7, #10]
 800372c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003730:	b29b      	uxth	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00b      	beq.n	800374e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003736:	897b      	ldrh	r3, [r7, #10]
 8003738:	f003 0307 	and.w	r3, r3, #7
 800373c:	1c5a      	adds	r2, r3, #1
 800373e:	4613      	mov	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4413      	add	r3, r2
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	4413      	add	r3, r2
 800374a:	617b      	str	r3, [r7, #20]
 800374c:	e009      	b.n	8003762 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800374e:	897a      	ldrh	r2, [r7, #10]
 8003750:	4613      	mov	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4413      	add	r3, r2
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	4413      	add	r3, r2
 8003760:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003762:	893b      	ldrh	r3, [r7, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d107      	bne.n	8003778 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	2200      	movs	r2, #0
 800376c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	b29a      	uxth	r2, r3
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	80da      	strh	r2, [r3, #6]
 8003776:	e00b      	b.n	8003790 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	2201      	movs	r2, #1
 800377c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	b29a      	uxth	r2, r3
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	0c1b      	lsrs	r3, r3, #16
 800378a:	b29a      	uxth	r2, r3
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	371c      	adds	r7, #28
 8003796:	46bd      	mov	sp, r7
 8003798:	bc80      	pop	{r7}
 800379a:	4770      	bx	lr

0800379c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e272      	b.n	8003c94 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 8087 	beq.w	80038ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037bc:	4b92      	ldr	r3, [pc, #584]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f003 030c 	and.w	r3, r3, #12
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d00c      	beq.n	80037e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037c8:	4b8f      	ldr	r3, [pc, #572]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f003 030c 	and.w	r3, r3, #12
 80037d0:	2b08      	cmp	r3, #8
 80037d2:	d112      	bne.n	80037fa <HAL_RCC_OscConfig+0x5e>
 80037d4:	4b8c      	ldr	r3, [pc, #560]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e0:	d10b      	bne.n	80037fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e2:	4b89      	ldr	r3, [pc, #548]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d06c      	beq.n	80038c8 <HAL_RCC_OscConfig+0x12c>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d168      	bne.n	80038c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e24c      	b.n	8003c94 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003802:	d106      	bne.n	8003812 <HAL_RCC_OscConfig+0x76>
 8003804:	4b80      	ldr	r3, [pc, #512]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a7f      	ldr	r2, [pc, #508]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 800380a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800380e:	6013      	str	r3, [r2, #0]
 8003810:	e02e      	b.n	8003870 <HAL_RCC_OscConfig+0xd4>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10c      	bne.n	8003834 <HAL_RCC_OscConfig+0x98>
 800381a:	4b7b      	ldr	r3, [pc, #492]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a7a      	ldr	r2, [pc, #488]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 8003820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003824:	6013      	str	r3, [r2, #0]
 8003826:	4b78      	ldr	r3, [pc, #480]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a77      	ldr	r2, [pc, #476]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 800382c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003830:	6013      	str	r3, [r2, #0]
 8003832:	e01d      	b.n	8003870 <HAL_RCC_OscConfig+0xd4>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800383c:	d10c      	bne.n	8003858 <HAL_RCC_OscConfig+0xbc>
 800383e:	4b72      	ldr	r3, [pc, #456]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a71      	ldr	r2, [pc, #452]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 8003844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003848:	6013      	str	r3, [r2, #0]
 800384a:	4b6f      	ldr	r3, [pc, #444]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a6e      	ldr	r2, [pc, #440]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 8003850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003854:	6013      	str	r3, [r2, #0]
 8003856:	e00b      	b.n	8003870 <HAL_RCC_OscConfig+0xd4>
 8003858:	4b6b      	ldr	r3, [pc, #428]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a6a      	ldr	r2, [pc, #424]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 800385e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003862:	6013      	str	r3, [r2, #0]
 8003864:	4b68      	ldr	r3, [pc, #416]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a67      	ldr	r2, [pc, #412]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 800386a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800386e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d013      	beq.n	80038a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003878:	f7fd fd38 	bl	80012ec <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003880:	f7fd fd34 	bl	80012ec <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b64      	cmp	r3, #100	; 0x64
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e200      	b.n	8003c94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003892:	4b5d      	ldr	r3, [pc, #372]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d0f0      	beq.n	8003880 <HAL_RCC_OscConfig+0xe4>
 800389e:	e014      	b.n	80038ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a0:	f7fd fd24 	bl	80012ec <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038a8:	f7fd fd20 	bl	80012ec <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b64      	cmp	r3, #100	; 0x64
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e1ec      	b.n	8003c94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ba:	4b53      	ldr	r3, [pc, #332]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1f0      	bne.n	80038a8 <HAL_RCC_OscConfig+0x10c>
 80038c6:	e000      	b.n	80038ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d063      	beq.n	800399e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038d6:	4b4c      	ldr	r3, [pc, #304]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f003 030c 	and.w	r3, r3, #12
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00b      	beq.n	80038fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80038e2:	4b49      	ldr	r3, [pc, #292]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f003 030c 	and.w	r3, r3, #12
 80038ea:	2b08      	cmp	r3, #8
 80038ec:	d11c      	bne.n	8003928 <HAL_RCC_OscConfig+0x18c>
 80038ee:	4b46      	ldr	r3, [pc, #280]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d116      	bne.n	8003928 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038fa:	4b43      	ldr	r3, [pc, #268]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d005      	beq.n	8003912 <HAL_RCC_OscConfig+0x176>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d001      	beq.n	8003912 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e1c0      	b.n	8003c94 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003912:	4b3d      	ldr	r3, [pc, #244]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	4939      	ldr	r1, [pc, #228]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 8003922:	4313      	orrs	r3, r2
 8003924:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003926:	e03a      	b.n	800399e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d020      	beq.n	8003972 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003930:	4b36      	ldr	r3, [pc, #216]	; (8003a0c <HAL_RCC_OscConfig+0x270>)
 8003932:	2201      	movs	r2, #1
 8003934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003936:	f7fd fcd9 	bl	80012ec <HAL_GetTick>
 800393a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800393c:	e008      	b.n	8003950 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800393e:	f7fd fcd5 	bl	80012ec <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d901      	bls.n	8003950 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e1a1      	b.n	8003c94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003950:	4b2d      	ldr	r3, [pc, #180]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d0f0      	beq.n	800393e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800395c:	4b2a      	ldr	r3, [pc, #168]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	00db      	lsls	r3, r3, #3
 800396a:	4927      	ldr	r1, [pc, #156]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 800396c:	4313      	orrs	r3, r2
 800396e:	600b      	str	r3, [r1, #0]
 8003970:	e015      	b.n	800399e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003972:	4b26      	ldr	r3, [pc, #152]	; (8003a0c <HAL_RCC_OscConfig+0x270>)
 8003974:	2200      	movs	r2, #0
 8003976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003978:	f7fd fcb8 	bl	80012ec <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003980:	f7fd fcb4 	bl	80012ec <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e180      	b.n	8003c94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003992:	4b1d      	ldr	r3, [pc, #116]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1f0      	bne.n	8003980 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0308 	and.w	r3, r3, #8
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d03a      	beq.n	8003a20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d019      	beq.n	80039e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039b2:	4b17      	ldr	r3, [pc, #92]	; (8003a10 <HAL_RCC_OscConfig+0x274>)
 80039b4:	2201      	movs	r2, #1
 80039b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039b8:	f7fd fc98 	bl	80012ec <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039c0:	f7fd fc94 	bl	80012ec <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e160      	b.n	8003c94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039d2:	4b0d      	ldr	r3, [pc, #52]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0f0      	beq.n	80039c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80039de:	2001      	movs	r0, #1
 80039e0:	f000 fa9c 	bl	8003f1c <RCC_Delay>
 80039e4:	e01c      	b.n	8003a20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039e6:	4b0a      	ldr	r3, [pc, #40]	; (8003a10 <HAL_RCC_OscConfig+0x274>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ec:	f7fd fc7e 	bl	80012ec <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039f2:	e00f      	b.n	8003a14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039f4:	f7fd fc7a 	bl	80012ec <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d908      	bls.n	8003a14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e146      	b.n	8003c94 <HAL_RCC_OscConfig+0x4f8>
 8003a06:	bf00      	nop
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	42420000 	.word	0x42420000
 8003a10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a14:	4b92      	ldr	r3, [pc, #584]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1e9      	bne.n	80039f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0304 	and.w	r3, r3, #4
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 80a6 	beq.w	8003b7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a32:	4b8b      	ldr	r3, [pc, #556]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003a34:	69db      	ldr	r3, [r3, #28]
 8003a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10d      	bne.n	8003a5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a3e:	4b88      	ldr	r3, [pc, #544]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	4a87      	ldr	r2, [pc, #540]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a48:	61d3      	str	r3, [r2, #28]
 8003a4a:	4b85      	ldr	r3, [pc, #532]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003a4c:	69db      	ldr	r3, [r3, #28]
 8003a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a52:	60bb      	str	r3, [r7, #8]
 8003a54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a56:	2301      	movs	r3, #1
 8003a58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a5a:	4b82      	ldr	r3, [pc, #520]	; (8003c64 <HAL_RCC_OscConfig+0x4c8>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d118      	bne.n	8003a98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a66:	4b7f      	ldr	r3, [pc, #508]	; (8003c64 <HAL_RCC_OscConfig+0x4c8>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a7e      	ldr	r2, [pc, #504]	; (8003c64 <HAL_RCC_OscConfig+0x4c8>)
 8003a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a72:	f7fd fc3b 	bl	80012ec <HAL_GetTick>
 8003a76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a78:	e008      	b.n	8003a8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a7a:	f7fd fc37 	bl	80012ec <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2b64      	cmp	r3, #100	; 0x64
 8003a86:	d901      	bls.n	8003a8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e103      	b.n	8003c94 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a8c:	4b75      	ldr	r3, [pc, #468]	; (8003c64 <HAL_RCC_OscConfig+0x4c8>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d0f0      	beq.n	8003a7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d106      	bne.n	8003aae <HAL_RCC_OscConfig+0x312>
 8003aa0:	4b6f      	ldr	r3, [pc, #444]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	4a6e      	ldr	r2, [pc, #440]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003aa6:	f043 0301 	orr.w	r3, r3, #1
 8003aaa:	6213      	str	r3, [r2, #32]
 8003aac:	e02d      	b.n	8003b0a <HAL_RCC_OscConfig+0x36e>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10c      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x334>
 8003ab6:	4b6a      	ldr	r3, [pc, #424]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	4a69      	ldr	r2, [pc, #420]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003abc:	f023 0301 	bic.w	r3, r3, #1
 8003ac0:	6213      	str	r3, [r2, #32]
 8003ac2:	4b67      	ldr	r3, [pc, #412]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	4a66      	ldr	r2, [pc, #408]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003ac8:	f023 0304 	bic.w	r3, r3, #4
 8003acc:	6213      	str	r3, [r2, #32]
 8003ace:	e01c      	b.n	8003b0a <HAL_RCC_OscConfig+0x36e>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	2b05      	cmp	r3, #5
 8003ad6:	d10c      	bne.n	8003af2 <HAL_RCC_OscConfig+0x356>
 8003ad8:	4b61      	ldr	r3, [pc, #388]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	4a60      	ldr	r2, [pc, #384]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003ade:	f043 0304 	orr.w	r3, r3, #4
 8003ae2:	6213      	str	r3, [r2, #32]
 8003ae4:	4b5e      	ldr	r3, [pc, #376]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	4a5d      	ldr	r2, [pc, #372]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003aea:	f043 0301 	orr.w	r3, r3, #1
 8003aee:	6213      	str	r3, [r2, #32]
 8003af0:	e00b      	b.n	8003b0a <HAL_RCC_OscConfig+0x36e>
 8003af2:	4b5b      	ldr	r3, [pc, #364]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	4a5a      	ldr	r2, [pc, #360]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003af8:	f023 0301 	bic.w	r3, r3, #1
 8003afc:	6213      	str	r3, [r2, #32]
 8003afe:	4b58      	ldr	r3, [pc, #352]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	4a57      	ldr	r2, [pc, #348]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003b04:	f023 0304 	bic.w	r3, r3, #4
 8003b08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d015      	beq.n	8003b3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b12:	f7fd fbeb 	bl	80012ec <HAL_GetTick>
 8003b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b18:	e00a      	b.n	8003b30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b1a:	f7fd fbe7 	bl	80012ec <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e0b1      	b.n	8003c94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b30:	4b4b      	ldr	r3, [pc, #300]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0ee      	beq.n	8003b1a <HAL_RCC_OscConfig+0x37e>
 8003b3c:	e014      	b.n	8003b68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b3e:	f7fd fbd5 	bl	80012ec <HAL_GetTick>
 8003b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b44:	e00a      	b.n	8003b5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b46:	f7fd fbd1 	bl	80012ec <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e09b      	b.n	8003c94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b5c:	4b40      	ldr	r3, [pc, #256]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1ee      	bne.n	8003b46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b68:	7dfb      	ldrb	r3, [r7, #23]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d105      	bne.n	8003b7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b6e:	4b3c      	ldr	r3, [pc, #240]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	4a3b      	ldr	r2, [pc, #236]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003b74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 8087 	beq.w	8003c92 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b84:	4b36      	ldr	r3, [pc, #216]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f003 030c 	and.w	r3, r3, #12
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d061      	beq.n	8003c54 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	69db      	ldr	r3, [r3, #28]
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d146      	bne.n	8003c26 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b98:	4b33      	ldr	r3, [pc, #204]	; (8003c68 <HAL_RCC_OscConfig+0x4cc>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b9e:	f7fd fba5 	bl	80012ec <HAL_GetTick>
 8003ba2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ba4:	e008      	b.n	8003bb8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba6:	f7fd fba1 	bl	80012ec <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e06d      	b.n	8003c94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bb8:	4b29      	ldr	r3, [pc, #164]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1f0      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bcc:	d108      	bne.n	8003be0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003bce:	4b24      	ldr	r3, [pc, #144]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	4921      	ldr	r1, [pc, #132]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003be0:	4b1f      	ldr	r3, [pc, #124]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a19      	ldr	r1, [r3, #32]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	430b      	orrs	r3, r1
 8003bf2:	491b      	ldr	r1, [pc, #108]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bf8:	4b1b      	ldr	r3, [pc, #108]	; (8003c68 <HAL_RCC_OscConfig+0x4cc>)
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfe:	f7fd fb75 	bl	80012ec <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c04:	e008      	b.n	8003c18 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c06:	f7fd fb71 	bl	80012ec <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e03d      	b.n	8003c94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c18:	4b11      	ldr	r3, [pc, #68]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0f0      	beq.n	8003c06 <HAL_RCC_OscConfig+0x46a>
 8003c24:	e035      	b.n	8003c92 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c26:	4b10      	ldr	r3, [pc, #64]	; (8003c68 <HAL_RCC_OscConfig+0x4cc>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c2c:	f7fd fb5e 	bl	80012ec <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c34:	f7fd fb5a 	bl	80012ec <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e026      	b.n	8003c94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c46:	4b06      	ldr	r3, [pc, #24]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1f0      	bne.n	8003c34 <HAL_RCC_OscConfig+0x498>
 8003c52:	e01e      	b.n	8003c92 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	69db      	ldr	r3, [r3, #28]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d107      	bne.n	8003c6c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e019      	b.n	8003c94 <HAL_RCC_OscConfig+0x4f8>
 8003c60:	40021000 	.word	0x40021000
 8003c64:	40007000 	.word	0x40007000
 8003c68:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c6c:	4b0b      	ldr	r3, [pc, #44]	; (8003c9c <HAL_RCC_OscConfig+0x500>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d106      	bne.n	8003c8e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d001      	beq.n	8003c92 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e000      	b.n	8003c94 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3718      	adds	r7, #24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40021000 	.word	0x40021000

08003ca0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d101      	bne.n	8003cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e0d0      	b.n	8003e56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cb4:	4b6a      	ldr	r3, [pc, #424]	; (8003e60 <HAL_RCC_ClockConfig+0x1c0>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d910      	bls.n	8003ce4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc2:	4b67      	ldr	r3, [pc, #412]	; (8003e60 <HAL_RCC_ClockConfig+0x1c0>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f023 0207 	bic.w	r2, r3, #7
 8003cca:	4965      	ldr	r1, [pc, #404]	; (8003e60 <HAL_RCC_ClockConfig+0x1c0>)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cd2:	4b63      	ldr	r3, [pc, #396]	; (8003e60 <HAL_RCC_ClockConfig+0x1c0>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0307 	and.w	r3, r3, #7
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d001      	beq.n	8003ce4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e0b8      	b.n	8003e56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d020      	beq.n	8003d32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0304 	and.w	r3, r3, #4
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d005      	beq.n	8003d08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cfc:	4b59      	ldr	r3, [pc, #356]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	4a58      	ldr	r2, [pc, #352]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003d02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0308 	and.w	r3, r3, #8
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d005      	beq.n	8003d20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d14:	4b53      	ldr	r3, [pc, #332]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	4a52      	ldr	r2, [pc, #328]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003d1a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003d1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d20:	4b50      	ldr	r3, [pc, #320]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	494d      	ldr	r1, [pc, #308]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d040      	beq.n	8003dc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d107      	bne.n	8003d56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d46:	4b47      	ldr	r3, [pc, #284]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d115      	bne.n	8003d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e07f      	b.n	8003e56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d107      	bne.n	8003d6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d5e:	4b41      	ldr	r3, [pc, #260]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d109      	bne.n	8003d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e073      	b.n	8003e56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d6e:	4b3d      	ldr	r3, [pc, #244]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e06b      	b.n	8003e56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d7e:	4b39      	ldr	r3, [pc, #228]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f023 0203 	bic.w	r2, r3, #3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	4936      	ldr	r1, [pc, #216]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d90:	f7fd faac 	bl	80012ec <HAL_GetTick>
 8003d94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d96:	e00a      	b.n	8003dae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d98:	f7fd faa8 	bl	80012ec <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e053      	b.n	8003e56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dae:	4b2d      	ldr	r3, [pc, #180]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f003 020c 	and.w	r2, r3, #12
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d1eb      	bne.n	8003d98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003dc0:	4b27      	ldr	r3, [pc, #156]	; (8003e60 <HAL_RCC_ClockConfig+0x1c0>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0307 	and.w	r3, r3, #7
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d210      	bcs.n	8003df0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dce:	4b24      	ldr	r3, [pc, #144]	; (8003e60 <HAL_RCC_ClockConfig+0x1c0>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f023 0207 	bic.w	r2, r3, #7
 8003dd6:	4922      	ldr	r1, [pc, #136]	; (8003e60 <HAL_RCC_ClockConfig+0x1c0>)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dde:	4b20      	ldr	r3, [pc, #128]	; (8003e60 <HAL_RCC_ClockConfig+0x1c0>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0307 	and.w	r3, r3, #7
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d001      	beq.n	8003df0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e032      	b.n	8003e56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0304 	and.w	r3, r3, #4
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d008      	beq.n	8003e0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dfc:	4b19      	ldr	r3, [pc, #100]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	4916      	ldr	r1, [pc, #88]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0308 	and.w	r3, r3, #8
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d009      	beq.n	8003e2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e1a:	4b12      	ldr	r3, [pc, #72]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	490e      	ldr	r1, [pc, #56]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e2e:	f000 f821 	bl	8003e74 <HAL_RCC_GetSysClockFreq>
 8003e32:	4602      	mov	r2, r0
 8003e34:	4b0b      	ldr	r3, [pc, #44]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	091b      	lsrs	r3, r3, #4
 8003e3a:	f003 030f 	and.w	r3, r3, #15
 8003e3e:	490a      	ldr	r1, [pc, #40]	; (8003e68 <HAL_RCC_ClockConfig+0x1c8>)
 8003e40:	5ccb      	ldrb	r3, [r1, r3]
 8003e42:	fa22 f303 	lsr.w	r3, r2, r3
 8003e46:	4a09      	ldr	r2, [pc, #36]	; (8003e6c <HAL_RCC_ClockConfig+0x1cc>)
 8003e48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e4a:	4b09      	ldr	r3, [pc, #36]	; (8003e70 <HAL_RCC_ClockConfig+0x1d0>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7fd fa0a 	bl	8001268 <HAL_InitTick>

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	40022000 	.word	0x40022000
 8003e64:	40021000 	.word	0x40021000
 8003e68:	0800ba68 	.word	0x0800ba68
 8003e6c:	20000000 	.word	0x20000000
 8003e70:	20000004 	.word	0x20000004

08003e74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b087      	sub	sp, #28
 8003e78:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60fb      	str	r3, [r7, #12]
 8003e7e:	2300      	movs	r3, #0
 8003e80:	60bb      	str	r3, [r7, #8]
 8003e82:	2300      	movs	r3, #0
 8003e84:	617b      	str	r3, [r7, #20]
 8003e86:	2300      	movs	r3, #0
 8003e88:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e8e:	4b1e      	ldr	r3, [pc, #120]	; (8003f08 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f003 030c 	and.w	r3, r3, #12
 8003e9a:	2b04      	cmp	r3, #4
 8003e9c:	d002      	beq.n	8003ea4 <HAL_RCC_GetSysClockFreq+0x30>
 8003e9e:	2b08      	cmp	r3, #8
 8003ea0:	d003      	beq.n	8003eaa <HAL_RCC_GetSysClockFreq+0x36>
 8003ea2:	e027      	b.n	8003ef4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ea4:	4b19      	ldr	r3, [pc, #100]	; (8003f0c <HAL_RCC_GetSysClockFreq+0x98>)
 8003ea6:	613b      	str	r3, [r7, #16]
      break;
 8003ea8:	e027      	b.n	8003efa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	0c9b      	lsrs	r3, r3, #18
 8003eae:	f003 030f 	and.w	r3, r3, #15
 8003eb2:	4a17      	ldr	r2, [pc, #92]	; (8003f10 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003eb4:	5cd3      	ldrb	r3, [r2, r3]
 8003eb6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d010      	beq.n	8003ee4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ec2:	4b11      	ldr	r3, [pc, #68]	; (8003f08 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	0c5b      	lsrs	r3, r3, #17
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	4a11      	ldr	r2, [pc, #68]	; (8003f14 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ece:	5cd3      	ldrb	r3, [r2, r3]
 8003ed0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a0d      	ldr	r2, [pc, #52]	; (8003f0c <HAL_RCC_GetSysClockFreq+0x98>)
 8003ed6:	fb03 f202 	mul.w	r2, r3, r2
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee0:	617b      	str	r3, [r7, #20]
 8003ee2:	e004      	b.n	8003eee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a0c      	ldr	r2, [pc, #48]	; (8003f18 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ee8:	fb02 f303 	mul.w	r3, r2, r3
 8003eec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	613b      	str	r3, [r7, #16]
      break;
 8003ef2:	e002      	b.n	8003efa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ef4:	4b05      	ldr	r3, [pc, #20]	; (8003f0c <HAL_RCC_GetSysClockFreq+0x98>)
 8003ef6:	613b      	str	r3, [r7, #16]
      break;
 8003ef8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003efa:	693b      	ldr	r3, [r7, #16]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	371c      	adds	r7, #28
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bc80      	pop	{r7}
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	007a1200 	.word	0x007a1200
 8003f10:	0800ba78 	.word	0x0800ba78
 8003f14:	0800ba88 	.word	0x0800ba88
 8003f18:	003d0900 	.word	0x003d0900

08003f1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f24:	4b0a      	ldr	r3, [pc, #40]	; (8003f50 <RCC_Delay+0x34>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a0a      	ldr	r2, [pc, #40]	; (8003f54 <RCC_Delay+0x38>)
 8003f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2e:	0a5b      	lsrs	r3, r3, #9
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	fb02 f303 	mul.w	r3, r2, r3
 8003f36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f38:	bf00      	nop
  }
  while (Delay --);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	1e5a      	subs	r2, r3, #1
 8003f3e:	60fa      	str	r2, [r7, #12]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1f9      	bne.n	8003f38 <RCC_Delay+0x1c>
}
 8003f44:	bf00      	nop
 8003f46:	bf00      	nop
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bc80      	pop	{r7}
 8003f4e:	4770      	bx	lr
 8003f50:	20000000 	.word	0x20000000
 8003f54:	10624dd3 	.word	0x10624dd3

08003f58 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003f60:	2300      	movs	r3, #0
 8003f62:	613b      	str	r3, [r7, #16]
 8003f64:	2300      	movs	r3, #0
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d07d      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003f74:	2300      	movs	r3, #0
 8003f76:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f78:	4b4f      	ldr	r3, [pc, #316]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f7a:	69db      	ldr	r3, [r3, #28]
 8003f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10d      	bne.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f84:	4b4c      	ldr	r3, [pc, #304]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f86:	69db      	ldr	r3, [r3, #28]
 8003f88:	4a4b      	ldr	r2, [pc, #300]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f8e:	61d3      	str	r3, [r2, #28]
 8003f90:	4b49      	ldr	r3, [pc, #292]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f92:	69db      	ldr	r3, [r3, #28]
 8003f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f98:	60bb      	str	r3, [r7, #8]
 8003f9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa0:	4b46      	ldr	r3, [pc, #280]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d118      	bne.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fac:	4b43      	ldr	r3, [pc, #268]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a42      	ldr	r2, [pc, #264]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fb6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fb8:	f7fd f998 	bl	80012ec <HAL_GetTick>
 8003fbc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc0:	f7fd f994 	bl	80012ec <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b64      	cmp	r3, #100	; 0x64
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e06d      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd2:	4b3a      	ldr	r3, [pc, #232]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d0f0      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fde:	4b36      	ldr	r3, [pc, #216]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fe6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d02e      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d027      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ffc:	4b2e      	ldr	r3, [pc, #184]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ffe:	6a1b      	ldr	r3, [r3, #32]
 8004000:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004004:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004006:	4b2e      	ldr	r3, [pc, #184]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004008:	2201      	movs	r2, #1
 800400a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800400c:	4b2c      	ldr	r3, [pc, #176]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800400e:	2200      	movs	r2, #0
 8004010:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004012:	4a29      	ldr	r2, [pc, #164]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d014      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004022:	f7fd f963 	bl	80012ec <HAL_GetTick>
 8004026:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004028:	e00a      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800402a:	f7fd f95f 	bl	80012ec <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	f241 3288 	movw	r2, #5000	; 0x1388
 8004038:	4293      	cmp	r3, r2
 800403a:	d901      	bls.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e036      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004040:	4b1d      	ldr	r3, [pc, #116]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d0ee      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800404c:	4b1a      	ldr	r3, [pc, #104]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	4917      	ldr	r1, [pc, #92]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800405a:	4313      	orrs	r3, r2
 800405c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800405e:	7dfb      	ldrb	r3, [r7, #23]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d105      	bne.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004064:	4b14      	ldr	r3, [pc, #80]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004066:	69db      	ldr	r3, [r3, #28]
 8004068:	4a13      	ldr	r2, [pc, #76]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800406a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800406e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b00      	cmp	r3, #0
 800407a:	d008      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800407c:	4b0e      	ldr	r3, [pc, #56]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	490b      	ldr	r1, [pc, #44]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800408a:	4313      	orrs	r3, r2
 800408c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0310 	and.w	r3, r3, #16
 8004096:	2b00      	cmp	r3, #0
 8004098:	d008      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800409a:	4b07      	ldr	r3, [pc, #28]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	4904      	ldr	r1, [pc, #16]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3718      	adds	r7, #24
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	40021000 	.word	0x40021000
 80040bc:	40007000 	.word	0x40007000
 80040c0:	42420440 	.word	0x42420440

080040c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d001      	beq.n	80040dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e03a      	b.n	8004152 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2202      	movs	r2, #2
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68da      	ldr	r2, [r3, #12]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f042 0201 	orr.w	r2, r2, #1
 80040f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a18      	ldr	r2, [pc, #96]	; (800415c <HAL_TIM_Base_Start_IT+0x98>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d00e      	beq.n	800411c <HAL_TIM_Base_Start_IT+0x58>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004106:	d009      	beq.n	800411c <HAL_TIM_Base_Start_IT+0x58>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a14      	ldr	r2, [pc, #80]	; (8004160 <HAL_TIM_Base_Start_IT+0x9c>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d004      	beq.n	800411c <HAL_TIM_Base_Start_IT+0x58>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a13      	ldr	r2, [pc, #76]	; (8004164 <HAL_TIM_Base_Start_IT+0xa0>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d111      	bne.n	8004140 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f003 0307 	and.w	r3, r3, #7
 8004126:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2b06      	cmp	r3, #6
 800412c:	d010      	beq.n	8004150 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f042 0201 	orr.w	r2, r2, #1
 800413c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800413e:	e007      	b.n	8004150 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0201 	orr.w	r2, r2, #1
 800414e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	bc80      	pop	{r7}
 800415a:	4770      	bx	lr
 800415c:	40012c00 	.word	0x40012c00
 8004160:	40000400 	.word	0x40000400
 8004164:	40000800 	.word	0x40000800

08004168 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d101      	bne.n	800417c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e093      	b.n	80042a4 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2b00      	cmp	r3, #0
 8004186:	d106      	bne.n	8004196 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f7fc fec9 	bl	8000f28 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2202      	movs	r2, #2
 800419a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	6812      	ldr	r2, [r2, #0]
 80041a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041ac:	f023 0307 	bic.w	r3, r3, #7
 80041b0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	3304      	adds	r3, #4
 80041ba:	4619      	mov	r1, r3
 80041bc:	4610      	mov	r0, r2
 80041be:	f000 f923 	bl	8004408 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ea:	f023 0303 	bic.w	r3, r3, #3
 80041ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	021b      	lsls	r3, r3, #8
 80041fa:	4313      	orrs	r3, r2
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	4313      	orrs	r3, r2
 8004200:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004208:	f023 030c 	bic.w	r3, r3, #12
 800420c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004214:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004218:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	021b      	lsls	r3, r3, #8
 8004224:	4313      	orrs	r3, r2
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	4313      	orrs	r3, r2
 800422a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	011a      	lsls	r2, r3, #4
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	031b      	lsls	r3, r3, #12
 8004238:	4313      	orrs	r3, r2
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	4313      	orrs	r3, r2
 800423e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004246:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	011b      	lsls	r3, r3, #4
 8004252:	4313      	orrs	r3, r2
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	4313      	orrs	r3, r2
 8004258:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3718      	adds	r7, #24
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042bc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80042c4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042cc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80042d4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d110      	bne.n	80042fe <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80042dc:	7bfb      	ldrb	r3, [r7, #15]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d102      	bne.n	80042e8 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80042e2:	7b7b      	ldrb	r3, [r7, #13]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d001      	beq.n	80042ec <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e089      	b.n	8004400 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042fc:	e031      	b.n	8004362 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	2b04      	cmp	r3, #4
 8004302:	d110      	bne.n	8004326 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004304:	7bbb      	ldrb	r3, [r7, #14]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d102      	bne.n	8004310 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800430a:	7b3b      	ldrb	r3, [r7, #12]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d001      	beq.n	8004314 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e075      	b.n	8004400 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2202      	movs	r2, #2
 8004318:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2202      	movs	r2, #2
 8004320:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004324:	e01d      	b.n	8004362 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004326:	7bfb      	ldrb	r3, [r7, #15]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d108      	bne.n	800433e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800432c:	7bbb      	ldrb	r3, [r7, #14]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d105      	bne.n	800433e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004332:	7b7b      	ldrb	r3, [r7, #13]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d102      	bne.n	800433e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004338:	7b3b      	ldrb	r3, [r7, #12]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d001      	beq.n	8004342 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e05e      	b.n	8004400 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2202      	movs	r2, #2
 8004346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2202      	movs	r2, #2
 800434e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2202      	movs	r2, #2
 8004356:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2202      	movs	r2, #2
 800435e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d003      	beq.n	8004370 <HAL_TIM_Encoder_Start_IT+0xc4>
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	2b04      	cmp	r3, #4
 800436c:	d010      	beq.n	8004390 <HAL_TIM_Encoder_Start_IT+0xe4>
 800436e:	e01f      	b.n	80043b0 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2201      	movs	r2, #1
 8004376:	2100      	movs	r1, #0
 8004378:	4618      	mov	r0, r3
 800437a:	f000 f8a7 	bl	80044cc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68da      	ldr	r2, [r3, #12]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f042 0202 	orr.w	r2, r2, #2
 800438c:	60da      	str	r2, [r3, #12]
      break;
 800438e:	e02e      	b.n	80043ee <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2201      	movs	r2, #1
 8004396:	2104      	movs	r1, #4
 8004398:	4618      	mov	r0, r3
 800439a:	f000 f897 	bl	80044cc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68da      	ldr	r2, [r3, #12]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f042 0204 	orr.w	r2, r2, #4
 80043ac:	60da      	str	r2, [r3, #12]
      break;
 80043ae:	e01e      	b.n	80043ee <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2201      	movs	r2, #1
 80043b6:	2100      	movs	r1, #0
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 f887 	bl	80044cc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2201      	movs	r2, #1
 80043c4:	2104      	movs	r1, #4
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 f880 	bl	80044cc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0202 	orr.w	r2, r2, #2
 80043da:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68da      	ldr	r2, [r3, #12]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f042 0204 	orr.w	r2, r2, #4
 80043ea:	60da      	str	r2, [r3, #12]
      break;
 80043ec:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f042 0201 	orr.w	r2, r2, #1
 80043fc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a29      	ldr	r2, [pc, #164]	; (80044c0 <TIM_Base_SetConfig+0xb8>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d00b      	beq.n	8004438 <TIM_Base_SetConfig+0x30>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004426:	d007      	beq.n	8004438 <TIM_Base_SetConfig+0x30>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a26      	ldr	r2, [pc, #152]	; (80044c4 <TIM_Base_SetConfig+0xbc>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d003      	beq.n	8004438 <TIM_Base_SetConfig+0x30>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a25      	ldr	r2, [pc, #148]	; (80044c8 <TIM_Base_SetConfig+0xc0>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d108      	bne.n	800444a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800443e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	4313      	orrs	r3, r2
 8004448:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a1c      	ldr	r2, [pc, #112]	; (80044c0 <TIM_Base_SetConfig+0xb8>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d00b      	beq.n	800446a <TIM_Base_SetConfig+0x62>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004458:	d007      	beq.n	800446a <TIM_Base_SetConfig+0x62>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a19      	ldr	r2, [pc, #100]	; (80044c4 <TIM_Base_SetConfig+0xbc>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d003      	beq.n	800446a <TIM_Base_SetConfig+0x62>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a18      	ldr	r2, [pc, #96]	; (80044c8 <TIM_Base_SetConfig+0xc0>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d108      	bne.n	800447c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004470:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	4313      	orrs	r3, r2
 800447a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	4313      	orrs	r3, r2
 8004488:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	689a      	ldr	r2, [r3, #8]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a07      	ldr	r2, [pc, #28]	; (80044c0 <TIM_Base_SetConfig+0xb8>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d103      	bne.n	80044b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	691a      	ldr	r2, [r3, #16]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	615a      	str	r2, [r3, #20]
}
 80044b6:	bf00      	nop
 80044b8:	3714      	adds	r7, #20
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bc80      	pop	{r7}
 80044be:	4770      	bx	lr
 80044c0:	40012c00 	.word	0x40012c00
 80044c4:	40000400 	.word	0x40000400
 80044c8:	40000800 	.word	0x40000800

080044cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f003 031f 	and.w	r3, r3, #31
 80044de:	2201      	movs	r2, #1
 80044e0:	fa02 f303 	lsl.w	r3, r2, r3
 80044e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6a1a      	ldr	r2, [r3, #32]
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	43db      	mvns	r3, r3
 80044ee:	401a      	ands	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6a1a      	ldr	r2, [r3, #32]
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f003 031f 	and.w	r3, r3, #31
 80044fe:	6879      	ldr	r1, [r7, #4]
 8004500:	fa01 f303 	lsl.w	r3, r1, r3
 8004504:	431a      	orrs	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	621a      	str	r2, [r3, #32]
}
 800450a:	bf00      	nop
 800450c:	371c      	adds	r7, #28
 800450e:	46bd      	mov	sp, r7
 8004510:	bc80      	pop	{r7}
 8004512:	4770      	bx	lr

08004514 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004524:	2b01      	cmp	r3, #1
 8004526:	d101      	bne.n	800452c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004528:	2302      	movs	r3, #2
 800452a:	e046      	b.n	80045ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2202      	movs	r2, #2
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004552:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	4313      	orrs	r3, r2
 800455c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a16      	ldr	r2, [pc, #88]	; (80045c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d00e      	beq.n	800458e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004578:	d009      	beq.n	800458e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a12      	ldr	r2, [pc, #72]	; (80045c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d004      	beq.n	800458e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a10      	ldr	r2, [pc, #64]	; (80045cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d10c      	bne.n	80045a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004594:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	4313      	orrs	r3, r2
 800459e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	bc80      	pop	{r7}
 80045c2:	4770      	bx	lr
 80045c4:	40012c00 	.word	0x40012c00
 80045c8:	40000400 	.word	0x40000400
 80045cc:	40000800 	.word	0x40000800

080045d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80045d0:	b084      	sub	sp, #16
 80045d2:	b480      	push	{r7}
 80045d4:	b083      	sub	sp, #12
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
 80045da:	f107 0014 	add.w	r0, r7, #20
 80045de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bc80      	pop	{r7}
 80045ec:	b004      	add	sp, #16
 80045ee:	4770      	bx	lr

080045f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004600:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004604:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	b29a      	uxth	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3714      	adds	r7, #20
 8004616:	46bd      	mov	sp, r7
 8004618:	bc80      	pop	{r7}
 800461a:	4770      	bx	lr

0800461c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004624:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004628:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004630:	b29a      	uxth	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	b29b      	uxth	r3, r3
 8004636:	43db      	mvns	r3, r3
 8004638:	b29b      	uxth	r3, r3
 800463a:	4013      	ands	r3, r2
 800463c:	b29a      	uxth	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3714      	adds	r7, #20
 800464a:	46bd      	mov	sp, r7
 800464c:	bc80      	pop	{r7}
 800464e:	4770      	bx	lr

08004650 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	460b      	mov	r3, r1
 800465a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	bc80      	pop	{r7}
 8004666:	4770      	bx	lr

08004668 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004668:	b084      	sub	sp, #16
 800466a:	b480      	push	{r7}
 800466c:	b083      	sub	sp, #12
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
 8004672:	f107 0014 	add.w	r0, r7, #20
 8004676:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bc80      	pop	{r7}
 80046a4:	b004      	add	sp, #16
 80046a6:	4770      	bx	lr

080046a8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b09d      	sub	sp, #116	; 0x74
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80046b2:	2300      	movs	r3, #0
 80046b4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	881b      	ldrh	r3, [r3, #0]
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80046ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ce:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	78db      	ldrb	r3, [r3, #3]
 80046d6:	2b03      	cmp	r3, #3
 80046d8:	d81f      	bhi.n	800471a <USB_ActivateEndpoint+0x72>
 80046da:	a201      	add	r2, pc, #4	; (adr r2, 80046e0 <USB_ActivateEndpoint+0x38>)
 80046dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e0:	080046f1 	.word	0x080046f1
 80046e4:	0800470d 	.word	0x0800470d
 80046e8:	08004723 	.word	0x08004723
 80046ec:	080046ff 	.word	0x080046ff
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80046f0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80046f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046f8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80046fc:	e012      	b.n	8004724 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80046fe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004702:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004706:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800470a:	e00b      	b.n	8004724 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800470c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004710:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004714:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004718:	e004      	b.n	8004724 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004720:	e000      	b.n	8004724 <USB_ActivateEndpoint+0x7c>
      break;
 8004722:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	441a      	add	r2, r3
 800472e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004732:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004736:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800473a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800473e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004742:	b29b      	uxth	r3, r3
 8004744:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	4413      	add	r3, r2
 8004750:	881b      	ldrh	r3, [r3, #0]
 8004752:	b29b      	uxth	r3, r3
 8004754:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004758:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800475c:	b29a      	uxth	r2, r3
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	b29b      	uxth	r3, r3
 8004764:	4313      	orrs	r3, r2
 8004766:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	441a      	add	r2, r3
 8004774:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004778:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800477c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004780:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004788:	b29b      	uxth	r3, r3
 800478a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	7b1b      	ldrb	r3, [r3, #12]
 8004790:	2b00      	cmp	r3, #0
 8004792:	f040 8178 	bne.w	8004a86 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	785b      	ldrb	r3, [r3, #1]
 800479a:	2b00      	cmp	r3, #0
 800479c:	f000 8084 	beq.w	80048a8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	61bb      	str	r3, [r7, #24]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	461a      	mov	r2, r3
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	4413      	add	r3, r2
 80047b2:	61bb      	str	r3, [r7, #24]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	011a      	lsls	r2, r3, #4
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	4413      	add	r3, r2
 80047be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047c2:	617b      	str	r3, [r7, #20]
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	88db      	ldrh	r3, [r3, #6]
 80047c8:	085b      	lsrs	r3, r3, #1
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	005b      	lsls	r3, r3, #1
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4413      	add	r3, r2
 80047de:	881b      	ldrh	r3, [r3, #0]
 80047e0:	827b      	strh	r3, [r7, #18]
 80047e2:	8a7b      	ldrh	r3, [r7, #18]
 80047e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d01b      	beq.n	8004824 <USB_ActivateEndpoint+0x17c>
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4413      	add	r3, r2
 80047f6:	881b      	ldrh	r3, [r3, #0]
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004802:	823b      	strh	r3, [r7, #16]
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	441a      	add	r2, r3
 800480e:	8a3b      	ldrh	r3, [r7, #16]
 8004810:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004814:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004818:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800481c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004820:	b29b      	uxth	r3, r3
 8004822:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	78db      	ldrb	r3, [r3, #3]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d020      	beq.n	800486e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4413      	add	r3, r2
 8004836:	881b      	ldrh	r3, [r3, #0]
 8004838:	b29b      	uxth	r3, r3
 800483a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800483e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004842:	81bb      	strh	r3, [r7, #12]
 8004844:	89bb      	ldrh	r3, [r7, #12]
 8004846:	f083 0320 	eor.w	r3, r3, #32
 800484a:	81bb      	strh	r3, [r7, #12]
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	441a      	add	r2, r3
 8004856:	89bb      	ldrh	r3, [r7, #12]
 8004858:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800485c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004860:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004868:	b29b      	uxth	r3, r3
 800486a:	8013      	strh	r3, [r2, #0]
 800486c:	e2d5      	b.n	8004e1a <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4413      	add	r3, r2
 8004878:	881b      	ldrh	r3, [r3, #0]
 800487a:	b29b      	uxth	r3, r3
 800487c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004880:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004884:	81fb      	strh	r3, [r7, #14]
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	441a      	add	r2, r3
 8004890:	89fb      	ldrh	r3, [r7, #14]
 8004892:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004896:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800489a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800489e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	8013      	strh	r3, [r2, #0]
 80048a6:	e2b8      	b.n	8004e1a <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	633b      	str	r3, [r7, #48]	; 0x30
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	461a      	mov	r2, r3
 80048b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b8:	4413      	add	r3, r2
 80048ba:	633b      	str	r3, [r7, #48]	; 0x30
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	011a      	lsls	r2, r3, #4
 80048c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c4:	4413      	add	r3, r2
 80048c6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80048ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	88db      	ldrh	r3, [r3, #6]
 80048d0:	085b      	lsrs	r3, r3, #1
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	005b      	lsls	r3, r3, #1
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048da:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	62bb      	str	r3, [r7, #40]	; 0x28
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	461a      	mov	r2, r3
 80048ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ec:	4413      	add	r3, r2
 80048ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	011a      	lsls	r2, r3, #4
 80048f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f8:	4413      	add	r3, r2
 80048fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80048fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004902:	881b      	ldrh	r3, [r3, #0]
 8004904:	b29b      	uxth	r3, r3
 8004906:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800490a:	b29a      	uxth	r2, r3
 800490c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490e:	801a      	strh	r2, [r3, #0]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	2b3e      	cmp	r3, #62	; 0x3e
 8004916:	d91d      	bls.n	8004954 <USB_ActivateEndpoint+0x2ac>
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	095b      	lsrs	r3, r3, #5
 800491e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	f003 031f 	and.w	r3, r3, #31
 8004928:	2b00      	cmp	r3, #0
 800492a:	d102      	bne.n	8004932 <USB_ActivateEndpoint+0x28a>
 800492c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800492e:	3b01      	subs	r3, #1
 8004930:	66bb      	str	r3, [r7, #104]	; 0x68
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004934:	881b      	ldrh	r3, [r3, #0]
 8004936:	b29a      	uxth	r2, r3
 8004938:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800493a:	b29b      	uxth	r3, r3
 800493c:	029b      	lsls	r3, r3, #10
 800493e:	b29b      	uxth	r3, r3
 8004940:	4313      	orrs	r3, r2
 8004942:	b29b      	uxth	r3, r3
 8004944:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004948:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800494c:	b29a      	uxth	r2, r3
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004950:	801a      	strh	r2, [r3, #0]
 8004952:	e026      	b.n	80049a2 <USB_ActivateEndpoint+0x2fa>
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d10a      	bne.n	8004972 <USB_ActivateEndpoint+0x2ca>
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	881b      	ldrh	r3, [r3, #0]
 8004960:	b29b      	uxth	r3, r3
 8004962:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004966:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800496a:	b29a      	uxth	r2, r3
 800496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496e:	801a      	strh	r2, [r3, #0]
 8004970:	e017      	b.n	80049a2 <USB_ActivateEndpoint+0x2fa>
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	085b      	lsrs	r3, r3, #1
 8004978:	66bb      	str	r3, [r7, #104]	; 0x68
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d002      	beq.n	800498c <USB_ActivateEndpoint+0x2e4>
 8004986:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004988:	3301      	adds	r3, #1
 800498a:	66bb      	str	r3, [r7, #104]	; 0x68
 800498c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498e:	881b      	ldrh	r3, [r3, #0]
 8004990:	b29a      	uxth	r2, r3
 8004992:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004994:	b29b      	uxth	r3, r3
 8004996:	029b      	lsls	r3, r3, #10
 8004998:	b29b      	uxth	r3, r3
 800499a:	4313      	orrs	r3, r2
 800499c:	b29a      	uxth	r2, r3
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	4413      	add	r3, r2
 80049ac:	881b      	ldrh	r3, [r3, #0]
 80049ae:	847b      	strh	r3, [r7, #34]	; 0x22
 80049b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80049b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d01b      	beq.n	80049f2 <USB_ActivateEndpoint+0x34a>
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	4413      	add	r3, r2
 80049c4:	881b      	ldrh	r3, [r3, #0]
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d0:	843b      	strh	r3, [r7, #32]
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	441a      	add	r2, r3
 80049dc:	8c3b      	ldrh	r3, [r7, #32]
 80049de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d124      	bne.n	8004a44 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	4413      	add	r3, r2
 8004a04:	881b      	ldrh	r3, [r3, #0]
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a10:	83bb      	strh	r3, [r7, #28]
 8004a12:	8bbb      	ldrh	r3, [r7, #28]
 8004a14:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004a18:	83bb      	strh	r3, [r7, #28]
 8004a1a:	8bbb      	ldrh	r3, [r7, #28]
 8004a1c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a20:	83bb      	strh	r3, [r7, #28]
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	441a      	add	r2, r3
 8004a2c:	8bbb      	ldrh	r3, [r7, #28]
 8004a2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	8013      	strh	r3, [r2, #0]
 8004a42:	e1ea      	b.n	8004e1a <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4413      	add	r3, r2
 8004a4e:	881b      	ldrh	r3, [r3, #0]
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a5a:	83fb      	strh	r3, [r7, #30]
 8004a5c:	8bfb      	ldrh	r3, [r7, #30]
 8004a5e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a62:	83fb      	strh	r3, [r7, #30]
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	441a      	add	r2, r3
 8004a6e:	8bfb      	ldrh	r3, [r7, #30]
 8004a70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	8013      	strh	r3, [r2, #0]
 8004a84:	e1c9      	b.n	8004e1a <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	78db      	ldrb	r3, [r3, #3]
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d11e      	bne.n	8004acc <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	4413      	add	r3, r2
 8004a98:	881b      	ldrh	r3, [r3, #0]
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aa4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	441a      	add	r2, r3
 8004ab2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004ab6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004abe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	8013      	strh	r3, [r2, #0]
 8004aca:	e01d      	b.n	8004b08 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	881b      	ldrh	r3, [r3, #0]
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ae2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	441a      	add	r2, r3
 8004af0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004af4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004af8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004afc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	461a      	mov	r2, r3
 8004b16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b18:	4413      	add	r3, r2
 8004b1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	011a      	lsls	r2, r3, #4
 8004b22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b24:	4413      	add	r3, r2
 8004b26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b2a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	891b      	ldrh	r3, [r3, #8]
 8004b30:	085b      	lsrs	r3, r3, #1
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b3a:	801a      	strh	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	657b      	str	r3, [r7, #84]	; 0x54
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	461a      	mov	r2, r3
 8004b4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b4c:	4413      	add	r3, r2
 8004b4e:	657b      	str	r3, [r7, #84]	; 0x54
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	011a      	lsls	r2, r3, #4
 8004b56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b58:	4413      	add	r3, r2
 8004b5a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004b5e:	653b      	str	r3, [r7, #80]	; 0x50
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	895b      	ldrh	r3, [r3, #10]
 8004b64:	085b      	lsrs	r3, r3, #1
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b6e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	785b      	ldrb	r3, [r3, #1]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f040 8093 	bne.w	8004ca0 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4413      	add	r3, r2
 8004b84:	881b      	ldrh	r3, [r3, #0]
 8004b86:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004b8a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d01b      	beq.n	8004bce <USB_ActivateEndpoint+0x526>
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4413      	add	r3, r2
 8004ba0:	881b      	ldrh	r3, [r3, #0]
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bac:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	441a      	add	r2, r3
 8004bb8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004bba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4413      	add	r3, r2
 8004bd8:	881b      	ldrh	r3, [r3, #0]
 8004bda:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004bdc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d01b      	beq.n	8004c1e <USB_ActivateEndpoint+0x576>
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	4413      	add	r3, r2
 8004bf0:	881b      	ldrh	r3, [r3, #0]
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bfc:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	441a      	add	r2, r3
 8004c08:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004c0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c16:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	4413      	add	r3, r2
 8004c28:	881b      	ldrh	r3, [r3, #0]
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c34:	873b      	strh	r3, [r7, #56]	; 0x38
 8004c36:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004c38:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004c3c:	873b      	strh	r3, [r7, #56]	; 0x38
 8004c3e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004c40:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004c44:	873b      	strh	r3, [r7, #56]	; 0x38
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	441a      	add	r2, r3
 8004c50:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004c52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	4413      	add	r3, r2
 8004c70:	881b      	ldrh	r3, [r3, #0]
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c7c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	441a      	add	r2, r3
 8004c88:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	8013      	strh	r3, [r2, #0]
 8004c9e:	e0bc      	b.n	8004e1a <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4413      	add	r3, r2
 8004caa:	881b      	ldrh	r3, [r3, #0]
 8004cac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004cb0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004cb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d01d      	beq.n	8004cf8 <USB_ActivateEndpoint+0x650>
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4413      	add	r3, r2
 8004cc6:	881b      	ldrh	r3, [r3, #0]
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cd2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	441a      	add	r2, r3
 8004ce0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004ce4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ce8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	4413      	add	r3, r2
 8004d02:	881b      	ldrh	r3, [r3, #0]
 8004d04:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004d08:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d01d      	beq.n	8004d50 <USB_ActivateEndpoint+0x6a8>
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d2a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	441a      	add	r2, r3
 8004d38:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004d3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	78db      	ldrb	r3, [r3, #3]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d024      	beq.n	8004da2 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	881b      	ldrh	r3, [r3, #0]
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d6e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004d72:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004d76:	f083 0320 	eor.w	r3, r3, #32
 8004d7a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	441a      	add	r2, r3
 8004d88:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004d8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	8013      	strh	r3, [r2, #0]
 8004da0:	e01d      	b.n	8004dde <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4413      	add	r3, r2
 8004dac:	881b      	ldrh	r3, [r3, #0]
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004db4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004db8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	441a      	add	r2, r3
 8004dc6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004dca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4413      	add	r3, r2
 8004de8:	881b      	ldrh	r3, [r3, #0]
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004df0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	441a      	add	r2, r3
 8004e02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004e06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004e1a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3774      	adds	r7, #116	; 0x74
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bc80      	pop	{r7}
 8004e26:	4770      	bx	lr

08004e28 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b08d      	sub	sp, #52	; 0x34
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	7b1b      	ldrb	r3, [r3, #12]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f040 808e 	bne.w	8004f58 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	785b      	ldrb	r3, [r3, #1]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d044      	beq.n	8004ece <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	4413      	add	r3, r2
 8004e4e:	881b      	ldrh	r3, [r3, #0]
 8004e50:	81bb      	strh	r3, [r7, #12]
 8004e52:	89bb      	ldrh	r3, [r7, #12]
 8004e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d01b      	beq.n	8004e94 <USB_DeactivateEndpoint+0x6c>
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	4413      	add	r3, r2
 8004e66:	881b      	ldrh	r3, [r3, #0]
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e72:	817b      	strh	r3, [r7, #10]
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	441a      	add	r2, r3
 8004e7e:	897b      	ldrh	r3, [r7, #10]
 8004e80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	4413      	add	r3, r2
 8004e9e:	881b      	ldrh	r3, [r3, #0]
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ea6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eaa:	813b      	strh	r3, [r7, #8]
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	441a      	add	r2, r3
 8004eb6:	893b      	ldrh	r3, [r7, #8]
 8004eb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ebc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ec0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	8013      	strh	r3, [r2, #0]
 8004ecc:	e192      	b.n	80051f4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	4413      	add	r3, r2
 8004ed8:	881b      	ldrh	r3, [r3, #0]
 8004eda:	827b      	strh	r3, [r7, #18]
 8004edc:	8a7b      	ldrh	r3, [r7, #18]
 8004ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d01b      	beq.n	8004f1e <USB_DeactivateEndpoint+0xf6>
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	4413      	add	r3, r2
 8004ef0:	881b      	ldrh	r3, [r3, #0]
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ef8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004efc:	823b      	strh	r3, [r7, #16]
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	441a      	add	r2, r3
 8004f08:	8a3b      	ldrh	r3, [r7, #16]
 8004f0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	4413      	add	r3, r2
 8004f28:	881b      	ldrh	r3, [r3, #0]
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f34:	81fb      	strh	r3, [r7, #14]
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	441a      	add	r2, r3
 8004f40:	89fb      	ldrh	r3, [r7, #14]
 8004f42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	8013      	strh	r3, [r2, #0]
 8004f56:	e14d      	b.n	80051f4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	785b      	ldrb	r3, [r3, #1]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f040 80a5 	bne.w	80050ac <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	4413      	add	r3, r2
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	843b      	strh	r3, [r7, #32]
 8004f70:	8c3b      	ldrh	r3, [r7, #32]
 8004f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d01b      	beq.n	8004fb2 <USB_DeactivateEndpoint+0x18a>
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4413      	add	r3, r2
 8004f84:	881b      	ldrh	r3, [r3, #0]
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f90:	83fb      	strh	r3, [r7, #30]
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	441a      	add	r2, r3
 8004f9c:	8bfb      	ldrh	r3, [r7, #30]
 8004f9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fa6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4413      	add	r3, r2
 8004fbc:	881b      	ldrh	r3, [r3, #0]
 8004fbe:	83bb      	strh	r3, [r7, #28]
 8004fc0:	8bbb      	ldrh	r3, [r7, #28]
 8004fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d01b      	beq.n	8005002 <USB_DeactivateEndpoint+0x1da>
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4413      	add	r3, r2
 8004fd4:	881b      	ldrh	r3, [r3, #0]
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe0:	837b      	strh	r3, [r7, #26]
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	441a      	add	r2, r3
 8004fec:	8b7b      	ldrh	r3, [r7, #26]
 8004fee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ff2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ff6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ffa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4413      	add	r3, r2
 800500c:	881b      	ldrh	r3, [r3, #0]
 800500e:	b29b      	uxth	r3, r3
 8005010:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005018:	833b      	strh	r3, [r7, #24]
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	441a      	add	r2, r3
 8005024:	8b3b      	ldrh	r3, [r7, #24]
 8005026:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800502a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800502e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005032:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005036:	b29b      	uxth	r3, r3
 8005038:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4413      	add	r3, r2
 8005044:	881b      	ldrh	r3, [r3, #0]
 8005046:	b29b      	uxth	r3, r3
 8005048:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800504c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005050:	82fb      	strh	r3, [r7, #22]
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	441a      	add	r2, r3
 800505c:	8afb      	ldrh	r3, [r7, #22]
 800505e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005062:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005066:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800506a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800506e:	b29b      	uxth	r3, r3
 8005070:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4413      	add	r3, r2
 800507c:	881b      	ldrh	r3, [r3, #0]
 800507e:	b29b      	uxth	r3, r3
 8005080:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005084:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005088:	82bb      	strh	r3, [r7, #20]
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	441a      	add	r2, r3
 8005094:	8abb      	ldrh	r3, [r7, #20]
 8005096:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800509a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800509e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	8013      	strh	r3, [r2, #0]
 80050aa:	e0a3      	b.n	80051f4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	4413      	add	r3, r2
 80050b6:	881b      	ldrh	r3, [r3, #0]
 80050b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80050ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80050bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d01b      	beq.n	80050fc <USB_DeactivateEndpoint+0x2d4>
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4413      	add	r3, r2
 80050ce:	881b      	ldrh	r3, [r3, #0]
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050da:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	441a      	add	r2, r3
 80050e6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80050e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	4413      	add	r3, r2
 8005106:	881b      	ldrh	r3, [r3, #0]
 8005108:	857b      	strh	r3, [r7, #42]	; 0x2a
 800510a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800510c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005110:	2b00      	cmp	r3, #0
 8005112:	d01b      	beq.n	800514c <USB_DeactivateEndpoint+0x324>
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	881b      	ldrh	r3, [r3, #0]
 8005120:	b29b      	uxth	r3, r3
 8005122:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800512a:	853b      	strh	r3, [r7, #40]	; 0x28
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	441a      	add	r2, r3
 8005136:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005138:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800513c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005140:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005144:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005148:	b29b      	uxth	r3, r3
 800514a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	881b      	ldrh	r3, [r3, #0]
 8005158:	b29b      	uxth	r3, r3
 800515a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800515e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005162:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	441a      	add	r2, r3
 800516e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005170:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005174:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005178:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800517c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005180:	b29b      	uxth	r3, r3
 8005182:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4413      	add	r3, r2
 800518e:	881b      	ldrh	r3, [r3, #0]
 8005190:	b29b      	uxth	r3, r3
 8005192:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005196:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800519a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	441a      	add	r2, r3
 80051a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80051a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	4413      	add	r3, r2
 80051c6:	881b      	ldrh	r3, [r3, #0]
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d2:	847b      	strh	r3, [r7, #34]	; 0x22
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	441a      	add	r2, r3
 80051de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80051e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3734      	adds	r7, #52	; 0x34
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bc80      	pop	{r7}
 80051fe:	4770      	bx	lr

08005200 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b0c2      	sub	sp, #264	; 0x108
 8005204:	af00      	add	r7, sp, #0
 8005206:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800520a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800520e:	6018      	str	r0, [r3, #0]
 8005210:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005214:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005218:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800521a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800521e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	785b      	ldrb	r3, [r3, #1]
 8005226:	2b01      	cmp	r3, #1
 8005228:	f040 86b7 	bne.w	8005f9a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800522c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005230:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	699a      	ldr	r2, [r3, #24]
 8005238:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800523c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	429a      	cmp	r2, r3
 8005246:	d908      	bls.n	800525a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005248:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800524c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005258:	e007      	b.n	800526a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800525a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800525e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800526a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800526e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	7b1b      	ldrb	r3, [r3, #12]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d13a      	bne.n	80052f0 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800527a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800527e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6959      	ldr	r1, [r3, #20]
 8005286:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800528a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	88da      	ldrh	r2, [r3, #6]
 8005292:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005296:	b29b      	uxth	r3, r3
 8005298:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800529c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80052a0:	6800      	ldr	r0, [r0, #0]
 80052a2:	f001 fc9c 	bl	8006bde <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80052a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	613b      	str	r3, [r7, #16]
 80052b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	461a      	mov	r2, r3
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	4413      	add	r3, r2
 80052c8:	613b      	str	r3, [r7, #16]
 80052ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	011a      	lsls	r2, r3, #4
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	4413      	add	r3, r2
 80052dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052e0:	60fb      	str	r3, [r7, #12]
 80052e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	801a      	strh	r2, [r3, #0]
 80052ec:	f000 be1f 	b.w	8005f2e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80052f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	78db      	ldrb	r3, [r3, #3]
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	f040 8462 	bne.w	8005bc6 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005306:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	6a1a      	ldr	r2, [r3, #32]
 800530e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005312:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	429a      	cmp	r2, r3
 800531c:	f240 83df 	bls.w	8005ade <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005324:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800532e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	881b      	ldrh	r3, [r3, #0]
 800533c:	b29b      	uxth	r3, r3
 800533e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005346:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800534a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800534e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005358:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	441a      	add	r2, r3
 8005364:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005368:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800536c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005370:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005378:	b29b      	uxth	r3, r3
 800537a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800537c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005380:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	6a1a      	ldr	r2, [r3, #32]
 8005388:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800538c:	1ad2      	subs	r2, r2, r3
 800538e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005392:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800539a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800539e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	4413      	add	r3, r2
 80053b4:	881b      	ldrh	r3, [r3, #0]
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f000 81c7 	beq.w	8005750 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80053c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	633b      	str	r3, [r7, #48]	; 0x30
 80053ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	785b      	ldrb	r3, [r3, #1]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d177      	bne.n	80054ce <USB_EPStartXfer+0x2ce>
 80053de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80053ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	461a      	mov	r2, r3
 80053fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fe:	4413      	add	r3, r2
 8005400:	62bb      	str	r3, [r7, #40]	; 0x28
 8005402:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005406:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	011a      	lsls	r2, r3, #4
 8005410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005412:	4413      	add	r3, r2
 8005414:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005418:	627b      	str	r3, [r7, #36]	; 0x24
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	881b      	ldrh	r3, [r3, #0]
 800541e:	b29b      	uxth	r3, r3
 8005420:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005424:	b29a      	uxth	r2, r3
 8005426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005428:	801a      	strh	r2, [r3, #0]
 800542a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800542e:	2b3e      	cmp	r3, #62	; 0x3e
 8005430:	d921      	bls.n	8005476 <USB_EPStartXfer+0x276>
 8005432:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005436:	095b      	lsrs	r3, r3, #5
 8005438:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800543c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005440:	f003 031f 	and.w	r3, r3, #31
 8005444:	2b00      	cmp	r3, #0
 8005446:	d104      	bne.n	8005452 <USB_EPStartXfer+0x252>
 8005448:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800544c:	3b01      	subs	r3, #1
 800544e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005454:	881b      	ldrh	r3, [r3, #0]
 8005456:	b29a      	uxth	r2, r3
 8005458:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800545c:	b29b      	uxth	r3, r3
 800545e:	029b      	lsls	r3, r3, #10
 8005460:	b29b      	uxth	r3, r3
 8005462:	4313      	orrs	r3, r2
 8005464:	b29b      	uxth	r3, r3
 8005466:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800546a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800546e:	b29a      	uxth	r2, r3
 8005470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005472:	801a      	strh	r2, [r3, #0]
 8005474:	e050      	b.n	8005518 <USB_EPStartXfer+0x318>
 8005476:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800547a:	2b00      	cmp	r3, #0
 800547c:	d10a      	bne.n	8005494 <USB_EPStartXfer+0x294>
 800547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005480:	881b      	ldrh	r3, [r3, #0]
 8005482:	b29b      	uxth	r3, r3
 8005484:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005488:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800548c:	b29a      	uxth	r2, r3
 800548e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005490:	801a      	strh	r2, [r3, #0]
 8005492:	e041      	b.n	8005518 <USB_EPStartXfer+0x318>
 8005494:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005498:	085b      	lsrs	r3, r3, #1
 800549a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800549e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d004      	beq.n	80054b4 <USB_EPStartXfer+0x2b4>
 80054aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80054ae:	3301      	adds	r3, #1
 80054b0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80054b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b6:	881b      	ldrh	r3, [r3, #0]
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80054be:	b29b      	uxth	r3, r3
 80054c0:	029b      	lsls	r3, r3, #10
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	4313      	orrs	r3, r2
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	801a      	strh	r2, [r3, #0]
 80054cc:	e024      	b.n	8005518 <USB_EPStartXfer+0x318>
 80054ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	785b      	ldrb	r3, [r3, #1]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d11c      	bne.n	8005518 <USB_EPStartXfer+0x318>
 80054de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	461a      	mov	r2, r3
 80054f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f2:	4413      	add	r3, r2
 80054f4:	633b      	str	r3, [r7, #48]	; 0x30
 80054f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	011a      	lsls	r2, r3, #4
 8005504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005506:	4413      	add	r3, r2
 8005508:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800550c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800550e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005512:	b29a      	uxth	r2, r3
 8005514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005516:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005518:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800551c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	895b      	ldrh	r3, [r3, #10]
 8005524:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800552c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	6959      	ldr	r1, [r3, #20]
 8005534:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005538:	b29b      	uxth	r3, r3
 800553a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800553e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005542:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005546:	6800      	ldr	r0, [r0, #0]
 8005548:	f001 fb49 	bl	8006bde <USB_WritePMA>
            ep->xfer_buff += len;
 800554c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005550:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	695a      	ldr	r2, [r3, #20]
 8005558:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800555c:	441a      	add	r2, r3
 800555e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005562:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800556a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800556e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6a1a      	ldr	r2, [r3, #32]
 8005576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800557a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	429a      	cmp	r2, r3
 8005584:	d90f      	bls.n	80055a6 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005586:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800558a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6a1a      	ldr	r2, [r3, #32]
 8005592:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005596:	1ad2      	subs	r2, r2, r3
 8005598:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800559c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	621a      	str	r2, [r3, #32]
 80055a4:	e00e      	b.n	80055c4 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80055a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80055b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2200      	movs	r2, #0
 80055c2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80055c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	785b      	ldrb	r3, [r3, #1]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d177      	bne.n	80056c4 <USB_EPStartXfer+0x4c4>
 80055d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	61bb      	str	r3, [r7, #24]
 80055e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	461a      	mov	r2, r3
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	4413      	add	r3, r2
 80055f6:	61bb      	str	r3, [r7, #24]
 80055f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	011a      	lsls	r2, r3, #4
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	4413      	add	r3, r2
 800560a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800560e:	617b      	str	r3, [r7, #20]
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	881b      	ldrh	r3, [r3, #0]
 8005614:	b29b      	uxth	r3, r3
 8005616:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800561a:	b29a      	uxth	r2, r3
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	801a      	strh	r2, [r3, #0]
 8005620:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005624:	2b3e      	cmp	r3, #62	; 0x3e
 8005626:	d921      	bls.n	800566c <USB_EPStartXfer+0x46c>
 8005628:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800562c:	095b      	lsrs	r3, r3, #5
 800562e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005632:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005636:	f003 031f 	and.w	r3, r3, #31
 800563a:	2b00      	cmp	r3, #0
 800563c:	d104      	bne.n	8005648 <USB_EPStartXfer+0x448>
 800563e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005642:	3b01      	subs	r3, #1
 8005644:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	881b      	ldrh	r3, [r3, #0]
 800564c:	b29a      	uxth	r2, r3
 800564e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005652:	b29b      	uxth	r3, r3
 8005654:	029b      	lsls	r3, r3, #10
 8005656:	b29b      	uxth	r3, r3
 8005658:	4313      	orrs	r3, r2
 800565a:	b29b      	uxth	r3, r3
 800565c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005660:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005664:	b29a      	uxth	r2, r3
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	801a      	strh	r2, [r3, #0]
 800566a:	e056      	b.n	800571a <USB_EPStartXfer+0x51a>
 800566c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005670:	2b00      	cmp	r3, #0
 8005672:	d10a      	bne.n	800568a <USB_EPStartXfer+0x48a>
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	881b      	ldrh	r3, [r3, #0]
 8005678:	b29b      	uxth	r3, r3
 800567a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800567e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005682:	b29a      	uxth	r2, r3
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	801a      	strh	r2, [r3, #0]
 8005688:	e047      	b.n	800571a <USB_EPStartXfer+0x51a>
 800568a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800568e:	085b      	lsrs	r3, r3, #1
 8005690:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005694:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005698:	f003 0301 	and.w	r3, r3, #1
 800569c:	2b00      	cmp	r3, #0
 800569e:	d004      	beq.n	80056aa <USB_EPStartXfer+0x4aa>
 80056a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056a4:	3301      	adds	r3, #1
 80056a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	881b      	ldrh	r3, [r3, #0]
 80056ae:	b29a      	uxth	r2, r3
 80056b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	029b      	lsls	r3, r3, #10
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	4313      	orrs	r3, r2
 80056bc:	b29a      	uxth	r2, r3
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	801a      	strh	r2, [r3, #0]
 80056c2:	e02a      	b.n	800571a <USB_EPStartXfer+0x51a>
 80056c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	785b      	ldrb	r3, [r3, #1]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d122      	bne.n	800571a <USB_EPStartXfer+0x51a>
 80056d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	623b      	str	r3, [r7, #32]
 80056e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	461a      	mov	r2, r3
 80056f2:	6a3b      	ldr	r3, [r7, #32]
 80056f4:	4413      	add	r3, r2
 80056f6:	623b      	str	r3, [r7, #32]
 80056f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	011a      	lsls	r2, r3, #4
 8005706:	6a3b      	ldr	r3, [r7, #32]
 8005708:	4413      	add	r3, r2
 800570a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800570e:	61fb      	str	r3, [r7, #28]
 8005710:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005714:	b29a      	uxth	r2, r3
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800571a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800571e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	891b      	ldrh	r3, [r3, #8]
 8005726:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800572a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800572e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6959      	ldr	r1, [r3, #20]
 8005736:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800573a:	b29b      	uxth	r3, r3
 800573c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005740:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005744:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005748:	6800      	ldr	r0, [r0, #0]
 800574a:	f001 fa48 	bl	8006bde <USB_WritePMA>
 800574e:	e3ee      	b.n	8005f2e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005750:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005754:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	785b      	ldrb	r3, [r3, #1]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d177      	bne.n	8005850 <USB_EPStartXfer+0x650>
 8005760:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005764:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	64bb      	str	r3, [r7, #72]	; 0x48
 800576c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005770:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800577a:	b29b      	uxth	r3, r3
 800577c:	461a      	mov	r2, r3
 800577e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005780:	4413      	add	r3, r2
 8005782:	64bb      	str	r3, [r7, #72]	; 0x48
 8005784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005788:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	011a      	lsls	r2, r3, #4
 8005792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005794:	4413      	add	r3, r2
 8005796:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800579a:	647b      	str	r3, [r7, #68]	; 0x44
 800579c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800579e:	881b      	ldrh	r3, [r3, #0]
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057aa:	801a      	strh	r2, [r3, #0]
 80057ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057b0:	2b3e      	cmp	r3, #62	; 0x3e
 80057b2:	d921      	bls.n	80057f8 <USB_EPStartXfer+0x5f8>
 80057b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057b8:	095b      	lsrs	r3, r3, #5
 80057ba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80057be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057c2:	f003 031f 	and.w	r3, r3, #31
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d104      	bne.n	80057d4 <USB_EPStartXfer+0x5d4>
 80057ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80057ce:	3b01      	subs	r3, #1
 80057d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80057d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057d6:	881b      	ldrh	r3, [r3, #0]
 80057d8:	b29a      	uxth	r2, r3
 80057da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80057de:	b29b      	uxth	r3, r3
 80057e0:	029b      	lsls	r3, r3, #10
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	4313      	orrs	r3, r2
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057f4:	801a      	strh	r2, [r3, #0]
 80057f6:	e056      	b.n	80058a6 <USB_EPStartXfer+0x6a6>
 80057f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10a      	bne.n	8005816 <USB_EPStartXfer+0x616>
 8005800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005802:	881b      	ldrh	r3, [r3, #0]
 8005804:	b29b      	uxth	r3, r3
 8005806:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800580a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800580e:	b29a      	uxth	r2, r3
 8005810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005812:	801a      	strh	r2, [r3, #0]
 8005814:	e047      	b.n	80058a6 <USB_EPStartXfer+0x6a6>
 8005816:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800581a:	085b      	lsrs	r3, r3, #1
 800581c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005820:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005824:	f003 0301 	and.w	r3, r3, #1
 8005828:	2b00      	cmp	r3, #0
 800582a:	d004      	beq.n	8005836 <USB_EPStartXfer+0x636>
 800582c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005830:	3301      	adds	r3, #1
 8005832:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005836:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005838:	881b      	ldrh	r3, [r3, #0]
 800583a:	b29a      	uxth	r2, r3
 800583c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005840:	b29b      	uxth	r3, r3
 8005842:	029b      	lsls	r3, r3, #10
 8005844:	b29b      	uxth	r3, r3
 8005846:	4313      	orrs	r3, r2
 8005848:	b29a      	uxth	r2, r3
 800584a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800584c:	801a      	strh	r2, [r3, #0]
 800584e:	e02a      	b.n	80058a6 <USB_EPStartXfer+0x6a6>
 8005850:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005854:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	785b      	ldrb	r3, [r3, #1]
 800585c:	2b01      	cmp	r3, #1
 800585e:	d122      	bne.n	80058a6 <USB_EPStartXfer+0x6a6>
 8005860:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005864:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	653b      	str	r3, [r7, #80]	; 0x50
 800586c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005870:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800587a:	b29b      	uxth	r3, r3
 800587c:	461a      	mov	r2, r3
 800587e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005880:	4413      	add	r3, r2
 8005882:	653b      	str	r3, [r7, #80]	; 0x50
 8005884:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005888:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	011a      	lsls	r2, r3, #4
 8005892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005894:	4413      	add	r3, r2
 8005896:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800589a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800589c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80058a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	891b      	ldrh	r3, [r3, #8]
 80058b2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6959      	ldr	r1, [r3, #20]
 80058c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80058cc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80058d0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80058d4:	6800      	ldr	r0, [r0, #0]
 80058d6:	f001 f982 	bl	8006bde <USB_WritePMA>
            ep->xfer_buff += len;
 80058da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	695a      	ldr	r2, [r3, #20]
 80058e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058ea:	441a      	add	r2, r3
 80058ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80058f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	6a1a      	ldr	r2, [r3, #32]
 8005904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005908:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	429a      	cmp	r2, r3
 8005912:	d90f      	bls.n	8005934 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005914:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005918:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	6a1a      	ldr	r2, [r3, #32]
 8005920:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005924:	1ad2      	subs	r2, r2, r3
 8005926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800592a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	621a      	str	r2, [r3, #32]
 8005932:	e00e      	b.n	8005952 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005938:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005948:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2200      	movs	r2, #0
 8005950:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005952:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005956:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	643b      	str	r3, [r7, #64]	; 0x40
 800595e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005962:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	785b      	ldrb	r3, [r3, #1]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d177      	bne.n	8005a5e <USB_EPStartXfer+0x85e>
 800596e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005972:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	63bb      	str	r3, [r7, #56]	; 0x38
 800597a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800597e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005988:	b29b      	uxth	r3, r3
 800598a:	461a      	mov	r2, r3
 800598c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598e:	4413      	add	r3, r2
 8005990:	63bb      	str	r3, [r7, #56]	; 0x38
 8005992:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005996:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	011a      	lsls	r2, r3, #4
 80059a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a2:	4413      	add	r3, r2
 80059a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059a8:	637b      	str	r3, [r7, #52]	; 0x34
 80059aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ac:	881b      	ldrh	r3, [r3, #0]
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059b4:	b29a      	uxth	r2, r3
 80059b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059b8:	801a      	strh	r2, [r3, #0]
 80059ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059be:	2b3e      	cmp	r3, #62	; 0x3e
 80059c0:	d921      	bls.n	8005a06 <USB_EPStartXfer+0x806>
 80059c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059c6:	095b      	lsrs	r3, r3, #5
 80059c8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80059cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059d0:	f003 031f 	and.w	r3, r3, #31
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d104      	bne.n	80059e2 <USB_EPStartXfer+0x7e2>
 80059d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059dc:	3b01      	subs	r3, #1
 80059de:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80059e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e4:	881b      	ldrh	r3, [r3, #0]
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	029b      	lsls	r3, r3, #10
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	4313      	orrs	r3, r2
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a02:	801a      	strh	r2, [r3, #0]
 8005a04:	e050      	b.n	8005aa8 <USB_EPStartXfer+0x8a8>
 8005a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d10a      	bne.n	8005a24 <USB_EPStartXfer+0x824>
 8005a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a10:	881b      	ldrh	r3, [r3, #0]
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a20:	801a      	strh	r2, [r3, #0]
 8005a22:	e041      	b.n	8005aa8 <USB_EPStartXfer+0x8a8>
 8005a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a28:	085b      	lsrs	r3, r3, #1
 8005a2a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005a2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a32:	f003 0301 	and.w	r3, r3, #1
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d004      	beq.n	8005a44 <USB_EPStartXfer+0x844>
 8005a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a3e:	3301      	adds	r3, #1
 8005a40:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a46:	881b      	ldrh	r3, [r3, #0]
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	029b      	lsls	r3, r3, #10
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	4313      	orrs	r3, r2
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a5a:	801a      	strh	r2, [r3, #0]
 8005a5c:	e024      	b.n	8005aa8 <USB_EPStartXfer+0x8a8>
 8005a5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	785b      	ldrb	r3, [r3, #1]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d11c      	bne.n	8005aa8 <USB_EPStartXfer+0x8a8>
 8005a6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	461a      	mov	r2, r3
 8005a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a82:	4413      	add	r3, r2
 8005a84:	643b      	str	r3, [r7, #64]	; 0x40
 8005a86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	011a      	lsls	r2, r3, #4
 8005a94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a96:	4413      	add	r3, r2
 8005a98:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aa6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005aa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	895b      	ldrh	r3, [r3, #10]
 8005ab4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005abc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	6959      	ldr	r1, [r3, #20]
 8005ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005ace:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005ad2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005ad6:	6800      	ldr	r0, [r0, #0]
 8005ad8:	f001 f881 	bl	8006bde <USB_WritePMA>
 8005adc:	e227      	b.n	8005f2e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005ade:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ae2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	6a1b      	ldr	r3, [r3, #32]
 8005aea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005aee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005af2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005afc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	4413      	add	r3, r2
 8005b08:	881b      	ldrh	r3, [r3, #0]
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b14:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005b18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	441a      	add	r2, r3
 8005b32:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005b36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005b4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	461a      	mov	r2, r3
 8005b68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b6a:	4413      	add	r3, r2
 8005b6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	011a      	lsls	r2, r3, #4
 8005b7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b7e:	4413      	add	r3, r2
 8005b80:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b84:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b8a:	b29a      	uxth	r2, r3
 8005b8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b8e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005b90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	891b      	ldrh	r3, [r3, #8]
 8005b9c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ba4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	6959      	ldr	r1, [r3, #20]
 8005bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005bb6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005bba:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005bbe:	6800      	ldr	r0, [r0, #0]
 8005bc0:	f001 f80d 	bl	8006bde <USB_WritePMA>
 8005bc4:	e1b3      	b.n	8005f2e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005bc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6a1a      	ldr	r2, [r3, #32]
 8005bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bd6:	1ad2      	subs	r2, r2, r3
 8005bd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005be4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005be8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4413      	add	r3, r2
 8005bfe:	881b      	ldrh	r3, [r3, #0]
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	f000 80c6 	beq.w	8005d98 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005c0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	673b      	str	r3, [r7, #112]	; 0x70
 8005c18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	785b      	ldrb	r3, [r3, #1]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d177      	bne.n	8005d18 <USB_EPStartXfer+0xb18>
 8005c28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	461a      	mov	r2, r3
 8005c46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c48:	4413      	add	r3, r2
 8005c4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	011a      	lsls	r2, r3, #4
 8005c5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c62:	667b      	str	r3, [r7, #100]	; 0x64
 8005c64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c66:	881b      	ldrh	r3, [r3, #0]
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c72:	801a      	strh	r2, [r3, #0]
 8005c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c78:	2b3e      	cmp	r3, #62	; 0x3e
 8005c7a:	d921      	bls.n	8005cc0 <USB_EPStartXfer+0xac0>
 8005c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c80:	095b      	lsrs	r3, r3, #5
 8005c82:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c8a:	f003 031f 	and.w	r3, r3, #31
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d104      	bne.n	8005c9c <USB_EPStartXfer+0xa9c>
 8005c92:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005c96:	3b01      	subs	r3, #1
 8005c98:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005c9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c9e:	881b      	ldrh	r3, [r3, #0]
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	029b      	lsls	r3, r3, #10
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	4313      	orrs	r3, r2
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cbc:	801a      	strh	r2, [r3, #0]
 8005cbe:	e050      	b.n	8005d62 <USB_EPStartXfer+0xb62>
 8005cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d10a      	bne.n	8005cde <USB_EPStartXfer+0xade>
 8005cc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cca:	881b      	ldrh	r3, [r3, #0]
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cda:	801a      	strh	r2, [r3, #0]
 8005cdc:	e041      	b.n	8005d62 <USB_EPStartXfer+0xb62>
 8005cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ce2:	085b      	lsrs	r3, r3, #1
 8005ce4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cec:	f003 0301 	and.w	r3, r3, #1
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d004      	beq.n	8005cfe <USB_EPStartXfer+0xafe>
 8005cf4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005cfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	029b      	lsls	r3, r3, #10
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d14:	801a      	strh	r2, [r3, #0]
 8005d16:	e024      	b.n	8005d62 <USB_EPStartXfer+0xb62>
 8005d18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	785b      	ldrb	r3, [r3, #1]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d11c      	bne.n	8005d62 <USB_EPStartXfer+0xb62>
 8005d28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	461a      	mov	r2, r3
 8005d3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d3c:	4413      	add	r3, r2
 8005d3e:	673b      	str	r3, [r7, #112]	; 0x70
 8005d40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	011a      	lsls	r2, r3, #4
 8005d4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d50:	4413      	add	r3, r2
 8005d52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d60:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005d62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	895b      	ldrh	r3, [r3, #10]
 8005d6e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6959      	ldr	r1, [r3, #20]
 8005d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005d88:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005d8c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005d90:	6800      	ldr	r0, [r0, #0]
 8005d92:	f000 ff24 	bl	8006bde <USB_WritePMA>
 8005d96:	e0ca      	b.n	8005f2e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	785b      	ldrb	r3, [r3, #1]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d177      	bne.n	8005e98 <USB_EPStartXfer+0xc98>
 8005da8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005db4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005db8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005dc8:	4413      	add	r3, r2
 8005dca:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005dcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	011a      	lsls	r2, r3, #4
 8005dda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ddc:	4413      	add	r3, r2
 8005dde:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005de2:	67bb      	str	r3, [r7, #120]	; 0x78
 8005de4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005de6:	881b      	ldrh	r3, [r3, #0]
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005df2:	801a      	strh	r2, [r3, #0]
 8005df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005df8:	2b3e      	cmp	r3, #62	; 0x3e
 8005dfa:	d921      	bls.n	8005e40 <USB_EPStartXfer+0xc40>
 8005dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e00:	095b      	lsrs	r3, r3, #5
 8005e02:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e0a:	f003 031f 	and.w	r3, r3, #31
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d104      	bne.n	8005e1c <USB_EPStartXfer+0xc1c>
 8005e12:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005e16:	3b01      	subs	r3, #1
 8005e18:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005e1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e1e:	881b      	ldrh	r3, [r3, #0]
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	029b      	lsls	r3, r3, #10
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e3c:	801a      	strh	r2, [r3, #0]
 8005e3e:	e05c      	b.n	8005efa <USB_EPStartXfer+0xcfa>
 8005e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d10a      	bne.n	8005e5e <USB_EPStartXfer+0xc5e>
 8005e48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e4a:	881b      	ldrh	r3, [r3, #0]
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e5a:	801a      	strh	r2, [r3, #0]
 8005e5c:	e04d      	b.n	8005efa <USB_EPStartXfer+0xcfa>
 8005e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e62:	085b      	lsrs	r3, r3, #1
 8005e64:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e6c:	f003 0301 	and.w	r3, r3, #1
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d004      	beq.n	8005e7e <USB_EPStartXfer+0xc7e>
 8005e74:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005e78:	3301      	adds	r3, #1
 8005e7a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005e7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e80:	881b      	ldrh	r3, [r3, #0]
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	029b      	lsls	r3, r3, #10
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e94:	801a      	strh	r2, [r3, #0]
 8005e96:	e030      	b.n	8005efa <USB_EPStartXfer+0xcfa>
 8005e98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	785b      	ldrb	r3, [r3, #1]
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d128      	bne.n	8005efa <USB_EPStartXfer+0xcfa>
 8005ea8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005eb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ecc:	4413      	add	r3, r2
 8005ece:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ed2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ed6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	011a      	lsls	r2, r3, #4
 8005ee0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ee4:	4413      	add	r3, r2
 8005ee6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005eea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ef8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005efa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005efe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	891b      	ldrh	r3, [r3, #8]
 8005f06:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	6959      	ldr	r1, [r3, #20]
 8005f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005f20:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005f24:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005f28:	6800      	ldr	r0, [r0, #0]
 8005f2a:	f000 fe58 	bl	8006bde <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005f2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	4413      	add	r3, r2
 8005f48:	881b      	ldrh	r3, [r3, #0]
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f54:	817b      	strh	r3, [r7, #10]
 8005f56:	897b      	ldrh	r3, [r7, #10]
 8005f58:	f083 0310 	eor.w	r3, r3, #16
 8005f5c:	817b      	strh	r3, [r7, #10]
 8005f5e:	897b      	ldrh	r3, [r7, #10]
 8005f60:	f083 0320 	eor.w	r3, r3, #32
 8005f64:	817b      	strh	r3, [r7, #10]
 8005f66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	441a      	add	r2, r3
 8005f80:	897b      	ldrh	r3, [r7, #10]
 8005f82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	8013      	strh	r3, [r2, #0]
 8005f96:	f000 bcde 	b.w	8006956 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005f9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	7b1b      	ldrb	r3, [r3, #12]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f040 80bb 	bne.w	8006122 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005fac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	699a      	ldr	r2, [r3, #24]
 8005fb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d917      	bls.n	8005ff8 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005fc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005fd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	699a      	ldr	r2, [r3, #24]
 8005fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fe8:	1ad2      	subs	r2, r2, r3
 8005fea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	619a      	str	r2, [r3, #24]
 8005ff6:	e00e      	b.n	8006016 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005ff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ffc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	699b      	ldr	r3, [r3, #24]
 8006004:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006008:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800600c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2200      	movs	r2, #0
 8006014:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006016:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800601a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006024:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006028:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006032:	b29b      	uxth	r3, r3
 8006034:	461a      	mov	r2, r3
 8006036:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800603a:	4413      	add	r3, r2
 800603c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006044:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	011a      	lsls	r2, r3, #4
 800604e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006052:	4413      	add	r3, r2
 8006054:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006058:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800605c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006060:	881b      	ldrh	r3, [r3, #0]
 8006062:	b29b      	uxth	r3, r3
 8006064:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006068:	b29a      	uxth	r2, r3
 800606a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800606e:	801a      	strh	r2, [r3, #0]
 8006070:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006074:	2b3e      	cmp	r3, #62	; 0x3e
 8006076:	d924      	bls.n	80060c2 <USB_EPStartXfer+0xec2>
 8006078:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800607c:	095b      	lsrs	r3, r3, #5
 800607e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006082:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006086:	f003 031f 	and.w	r3, r3, #31
 800608a:	2b00      	cmp	r3, #0
 800608c:	d104      	bne.n	8006098 <USB_EPStartXfer+0xe98>
 800608e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006092:	3b01      	subs	r3, #1
 8006094:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006098:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800609c:	881b      	ldrh	r3, [r3, #0]
 800609e:	b29a      	uxth	r2, r3
 80060a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	029b      	lsls	r3, r3, #10
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	4313      	orrs	r3, r2
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060b6:	b29a      	uxth	r2, r3
 80060b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060bc:	801a      	strh	r2, [r3, #0]
 80060be:	f000 bc10 	b.w	80068e2 <USB_EPStartXfer+0x16e2>
 80060c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d10c      	bne.n	80060e4 <USB_EPStartXfer+0xee4>
 80060ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060ce:	881b      	ldrh	r3, [r3, #0]
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060da:	b29a      	uxth	r2, r3
 80060dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060e0:	801a      	strh	r2, [r3, #0]
 80060e2:	e3fe      	b.n	80068e2 <USB_EPStartXfer+0x16e2>
 80060e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060e8:	085b      	lsrs	r3, r3, #1
 80060ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80060ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d004      	beq.n	8006104 <USB_EPStartXfer+0xf04>
 80060fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80060fe:	3301      	adds	r3, #1
 8006100:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006104:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006108:	881b      	ldrh	r3, [r3, #0]
 800610a:	b29a      	uxth	r2, r3
 800610c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006110:	b29b      	uxth	r3, r3
 8006112:	029b      	lsls	r3, r3, #10
 8006114:	b29b      	uxth	r3, r3
 8006116:	4313      	orrs	r3, r2
 8006118:	b29a      	uxth	r2, r3
 800611a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800611e:	801a      	strh	r2, [r3, #0]
 8006120:	e3df      	b.n	80068e2 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006126:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	78db      	ldrb	r3, [r3, #3]
 800612e:	2b02      	cmp	r3, #2
 8006130:	f040 8218 	bne.w	8006564 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006138:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	785b      	ldrb	r3, [r3, #1]
 8006140:	2b00      	cmp	r3, #0
 8006142:	f040 809d 	bne.w	8006280 <USB_EPStartXfer+0x1080>
 8006146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800614a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006158:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006162:	b29b      	uxth	r3, r3
 8006164:	461a      	mov	r2, r3
 8006166:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800616a:	4413      	add	r3, r2
 800616c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006174:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	011a      	lsls	r2, r3, #4
 800617e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006182:	4413      	add	r3, r2
 8006184:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006188:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800618c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006190:	881b      	ldrh	r3, [r3, #0]
 8006192:	b29b      	uxth	r3, r3
 8006194:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006198:	b29a      	uxth	r2, r3
 800619a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800619e:	801a      	strh	r2, [r3, #0]
 80061a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	2b3e      	cmp	r3, #62	; 0x3e
 80061ae:	d92b      	bls.n	8006208 <USB_EPStartXfer+0x1008>
 80061b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	095b      	lsrs	r3, r3, #5
 80061be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80061c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	f003 031f 	and.w	r3, r3, #31
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d104      	bne.n	80061e0 <USB_EPStartXfer+0xfe0>
 80061d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061da:	3b01      	subs	r3, #1
 80061dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80061e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80061e4:	881b      	ldrh	r3, [r3, #0]
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	029b      	lsls	r3, r3, #10
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	4313      	orrs	r3, r2
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061fe:	b29a      	uxth	r2, r3
 8006200:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006204:	801a      	strh	r2, [r3, #0]
 8006206:	e070      	b.n	80062ea <USB_EPStartXfer+0x10ea>
 8006208:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800620c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d10c      	bne.n	8006232 <USB_EPStartXfer+0x1032>
 8006218:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800621c:	881b      	ldrh	r3, [r3, #0]
 800621e:	b29b      	uxth	r3, r3
 8006220:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006224:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006228:	b29a      	uxth	r2, r3
 800622a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800622e:	801a      	strh	r2, [r3, #0]
 8006230:	e05b      	b.n	80062ea <USB_EPStartXfer+0x10ea>
 8006232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006236:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	085b      	lsrs	r3, r3, #1
 8006240:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006244:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006248:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	f003 0301 	and.w	r3, r3, #1
 8006254:	2b00      	cmp	r3, #0
 8006256:	d004      	beq.n	8006262 <USB_EPStartXfer+0x1062>
 8006258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800625c:	3301      	adds	r3, #1
 800625e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006262:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006266:	881b      	ldrh	r3, [r3, #0]
 8006268:	b29a      	uxth	r2, r3
 800626a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800626e:	b29b      	uxth	r3, r3
 8006270:	029b      	lsls	r3, r3, #10
 8006272:	b29b      	uxth	r3, r3
 8006274:	4313      	orrs	r3, r2
 8006276:	b29a      	uxth	r2, r3
 8006278:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800627c:	801a      	strh	r2, [r3, #0]
 800627e:	e034      	b.n	80062ea <USB_EPStartXfer+0x10ea>
 8006280:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006284:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	785b      	ldrb	r3, [r3, #1]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d12c      	bne.n	80062ea <USB_EPStartXfer+0x10ea>
 8006290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006294:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800629e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	461a      	mov	r2, r3
 80062b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80062b4:	4413      	add	r3, r2
 80062b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	011a      	lsls	r2, r3, #4
 80062c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80062cc:	4413      	add	r3, r2
 80062ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80062e8:	801a      	strh	r2, [r3, #0]
 80062ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80062f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	785b      	ldrb	r3, [r3, #1]
 8006304:	2b00      	cmp	r3, #0
 8006306:	f040 809d 	bne.w	8006444 <USB_EPStartXfer+0x1244>
 800630a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800630e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800631c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006326:	b29b      	uxth	r3, r3
 8006328:	461a      	mov	r2, r3
 800632a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800632e:	4413      	add	r3, r2
 8006330:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006334:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006338:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	011a      	lsls	r2, r3, #4
 8006342:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006346:	4413      	add	r3, r2
 8006348:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800634c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006350:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006354:	881b      	ldrh	r3, [r3, #0]
 8006356:	b29b      	uxth	r3, r3
 8006358:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800635c:	b29a      	uxth	r2, r3
 800635e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006362:	801a      	strh	r2, [r3, #0]
 8006364:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006368:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	2b3e      	cmp	r3, #62	; 0x3e
 8006372:	d92b      	bls.n	80063cc <USB_EPStartXfer+0x11cc>
 8006374:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006378:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	095b      	lsrs	r3, r3, #5
 8006382:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800638a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	f003 031f 	and.w	r3, r3, #31
 8006396:	2b00      	cmp	r3, #0
 8006398:	d104      	bne.n	80063a4 <USB_EPStartXfer+0x11a4>
 800639a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800639e:	3b01      	subs	r3, #1
 80063a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80063a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063a8:	881b      	ldrh	r3, [r3, #0]
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	029b      	lsls	r3, r3, #10
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	4313      	orrs	r3, r2
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063c2:	b29a      	uxth	r2, r3
 80063c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063c8:	801a      	strh	r2, [r3, #0]
 80063ca:	e069      	b.n	80064a0 <USB_EPStartXfer+0x12a0>
 80063cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d10c      	bne.n	80063f6 <USB_EPStartXfer+0x11f6>
 80063dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063e0:	881b      	ldrh	r3, [r3, #0]
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063ec:	b29a      	uxth	r2, r3
 80063ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063f2:	801a      	strh	r2, [r3, #0]
 80063f4:	e054      	b.n	80064a0 <USB_EPStartXfer+0x12a0>
 80063f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	085b      	lsrs	r3, r3, #1
 8006404:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800640c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	f003 0301 	and.w	r3, r3, #1
 8006418:	2b00      	cmp	r3, #0
 800641a:	d004      	beq.n	8006426 <USB_EPStartXfer+0x1226>
 800641c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006420:	3301      	adds	r3, #1
 8006422:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006426:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800642a:	881b      	ldrh	r3, [r3, #0]
 800642c:	b29a      	uxth	r2, r3
 800642e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006432:	b29b      	uxth	r3, r3
 8006434:	029b      	lsls	r3, r3, #10
 8006436:	b29b      	uxth	r3, r3
 8006438:	4313      	orrs	r3, r2
 800643a:	b29a      	uxth	r2, r3
 800643c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006440:	801a      	strh	r2, [r3, #0]
 8006442:	e02d      	b.n	80064a0 <USB_EPStartXfer+0x12a0>
 8006444:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006448:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	785b      	ldrb	r3, [r3, #1]
 8006450:	2b01      	cmp	r3, #1
 8006452:	d125      	bne.n	80064a0 <USB_EPStartXfer+0x12a0>
 8006454:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006458:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006462:	b29b      	uxth	r3, r3
 8006464:	461a      	mov	r2, r3
 8006466:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800646a:	4413      	add	r3, r2
 800646c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006470:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006474:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	011a      	lsls	r2, r3, #4
 800647e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006482:	4413      	add	r3, r2
 8006484:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006488:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800648c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006490:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	b29a      	uxth	r2, r3
 800649a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800649e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80064a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	69db      	ldr	r3, [r3, #28]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f000 8218 	beq.w	80068e2 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80064b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	4413      	add	r3, r2
 80064cc:	881b      	ldrh	r3, [r3, #0]
 80064ce:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80064d2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80064d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d005      	beq.n	80064ea <USB_EPStartXfer+0x12ea>
 80064de:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80064e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10d      	bne.n	8006506 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80064ea:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80064ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f040 81f5 	bne.w	80068e2 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80064f8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80064fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006500:	2b00      	cmp	r3, #0
 8006502:	f040 81ee 	bne.w	80068e2 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006506:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800650a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006514:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4413      	add	r3, r2
 8006520:	881b      	ldrh	r3, [r3, #0]
 8006522:	b29b      	uxth	r3, r3
 8006524:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800652c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006534:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800653e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	441a      	add	r2, r3
 800654a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800654e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006552:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006556:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800655a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800655e:	b29b      	uxth	r3, r3
 8006560:	8013      	strh	r3, [r2, #0]
 8006562:	e1be      	b.n	80068e2 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006568:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	78db      	ldrb	r3, [r3, #3]
 8006570:	2b01      	cmp	r3, #1
 8006572:	f040 81b4 	bne.w	80068de <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800657a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	699a      	ldr	r2, [r3, #24]
 8006582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006586:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	429a      	cmp	r2, r3
 8006590:	d917      	bls.n	80065c2 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006592:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006596:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80065a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	699a      	ldr	r2, [r3, #24]
 80065ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065b2:	1ad2      	subs	r2, r2, r3
 80065b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	619a      	str	r2, [r3, #24]
 80065c0:	e00e      	b.n	80065e0 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80065c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80065d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2200      	movs	r2, #0
 80065de:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80065e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	785b      	ldrb	r3, [r3, #1]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f040 8085 	bne.w	80066fc <USB_EPStartXfer+0x14fc>
 80065f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006600:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006604:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800660e:	b29b      	uxth	r3, r3
 8006610:	461a      	mov	r2, r3
 8006612:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006616:	4413      	add	r3, r2
 8006618:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800661c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006620:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	011a      	lsls	r2, r3, #4
 800662a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800662e:	4413      	add	r3, r2
 8006630:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006634:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006638:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800663c:	881b      	ldrh	r3, [r3, #0]
 800663e:	b29b      	uxth	r3, r3
 8006640:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006644:	b29a      	uxth	r2, r3
 8006646:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800664a:	801a      	strh	r2, [r3, #0]
 800664c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006650:	2b3e      	cmp	r3, #62	; 0x3e
 8006652:	d923      	bls.n	800669c <USB_EPStartXfer+0x149c>
 8006654:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006658:	095b      	lsrs	r3, r3, #5
 800665a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800665e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006662:	f003 031f 	and.w	r3, r3, #31
 8006666:	2b00      	cmp	r3, #0
 8006668:	d104      	bne.n	8006674 <USB_EPStartXfer+0x1474>
 800666a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800666e:	3b01      	subs	r3, #1
 8006670:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006674:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006678:	881b      	ldrh	r3, [r3, #0]
 800667a:	b29a      	uxth	r2, r3
 800667c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006680:	b29b      	uxth	r3, r3
 8006682:	029b      	lsls	r3, r3, #10
 8006684:	b29b      	uxth	r3, r3
 8006686:	4313      	orrs	r3, r2
 8006688:	b29b      	uxth	r3, r3
 800668a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800668e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006692:	b29a      	uxth	r2, r3
 8006694:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006698:	801a      	strh	r2, [r3, #0]
 800669a:	e060      	b.n	800675e <USB_EPStartXfer+0x155e>
 800669c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d10c      	bne.n	80066be <USB_EPStartXfer+0x14be>
 80066a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066a8:	881b      	ldrh	r3, [r3, #0]
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066b4:	b29a      	uxth	r2, r3
 80066b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066ba:	801a      	strh	r2, [r3, #0]
 80066bc:	e04f      	b.n	800675e <USB_EPStartXfer+0x155e>
 80066be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066c2:	085b      	lsrs	r3, r3, #1
 80066c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80066c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066cc:	f003 0301 	and.w	r3, r3, #1
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d004      	beq.n	80066de <USB_EPStartXfer+0x14de>
 80066d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066d8:	3301      	adds	r3, #1
 80066da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80066de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066e2:	881b      	ldrh	r3, [r3, #0]
 80066e4:	b29a      	uxth	r2, r3
 80066e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	029b      	lsls	r3, r3, #10
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	4313      	orrs	r3, r2
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066f8:	801a      	strh	r2, [r3, #0]
 80066fa:	e030      	b.n	800675e <USB_EPStartXfer+0x155e>
 80066fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006700:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	785b      	ldrb	r3, [r3, #1]
 8006708:	2b01      	cmp	r3, #1
 800670a:	d128      	bne.n	800675e <USB_EPStartXfer+0x155e>
 800670c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006710:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800671a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800671e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006728:	b29b      	uxth	r3, r3
 800672a:	461a      	mov	r2, r3
 800672c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006730:	4413      	add	r3, r2
 8006732:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800673a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	011a      	lsls	r2, r3, #4
 8006744:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006748:	4413      	add	r3, r2
 800674a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800674e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006752:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006756:	b29a      	uxth	r2, r3
 8006758:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800675c:	801a      	strh	r2, [r3, #0]
 800675e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006762:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800676c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006770:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	785b      	ldrb	r3, [r3, #1]
 8006778:	2b00      	cmp	r3, #0
 800677a:	f040 8085 	bne.w	8006888 <USB_EPStartXfer+0x1688>
 800677e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006782:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800678c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006790:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800679a:	b29b      	uxth	r3, r3
 800679c:	461a      	mov	r2, r3
 800679e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80067a2:	4413      	add	r3, r2
 80067a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80067a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	011a      	lsls	r2, r3, #4
 80067b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80067ba:	4413      	add	r3, r2
 80067bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067c8:	881b      	ldrh	r3, [r3, #0]
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067d6:	801a      	strh	r2, [r3, #0]
 80067d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067dc:	2b3e      	cmp	r3, #62	; 0x3e
 80067de:	d923      	bls.n	8006828 <USB_EPStartXfer+0x1628>
 80067e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067e4:	095b      	lsrs	r3, r3, #5
 80067e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80067ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067ee:	f003 031f 	and.w	r3, r3, #31
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d104      	bne.n	8006800 <USB_EPStartXfer+0x1600>
 80067f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067fa:	3b01      	subs	r3, #1
 80067fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006800:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006804:	881b      	ldrh	r3, [r3, #0]
 8006806:	b29a      	uxth	r2, r3
 8006808:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800680c:	b29b      	uxth	r3, r3
 800680e:	029b      	lsls	r3, r3, #10
 8006810:	b29b      	uxth	r3, r3
 8006812:	4313      	orrs	r3, r2
 8006814:	b29b      	uxth	r3, r3
 8006816:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800681a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800681e:	b29a      	uxth	r2, r3
 8006820:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006824:	801a      	strh	r2, [r3, #0]
 8006826:	e05c      	b.n	80068e2 <USB_EPStartXfer+0x16e2>
 8006828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800682c:	2b00      	cmp	r3, #0
 800682e:	d10c      	bne.n	800684a <USB_EPStartXfer+0x164a>
 8006830:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006834:	881b      	ldrh	r3, [r3, #0]
 8006836:	b29b      	uxth	r3, r3
 8006838:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800683c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006840:	b29a      	uxth	r2, r3
 8006842:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006846:	801a      	strh	r2, [r3, #0]
 8006848:	e04b      	b.n	80068e2 <USB_EPStartXfer+0x16e2>
 800684a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800684e:	085b      	lsrs	r3, r3, #1
 8006850:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006854:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006858:	f003 0301 	and.w	r3, r3, #1
 800685c:	2b00      	cmp	r3, #0
 800685e:	d004      	beq.n	800686a <USB_EPStartXfer+0x166a>
 8006860:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006864:	3301      	adds	r3, #1
 8006866:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800686a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800686e:	881b      	ldrh	r3, [r3, #0]
 8006870:	b29a      	uxth	r2, r3
 8006872:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006876:	b29b      	uxth	r3, r3
 8006878:	029b      	lsls	r3, r3, #10
 800687a:	b29b      	uxth	r3, r3
 800687c:	4313      	orrs	r3, r2
 800687e:	b29a      	uxth	r2, r3
 8006880:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006884:	801a      	strh	r2, [r3, #0]
 8006886:	e02c      	b.n	80068e2 <USB_EPStartXfer+0x16e2>
 8006888:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800688c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	785b      	ldrb	r3, [r3, #1]
 8006894:	2b01      	cmp	r3, #1
 8006896:	d124      	bne.n	80068e2 <USB_EPStartXfer+0x16e2>
 8006898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800689c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	461a      	mov	r2, r3
 80068aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80068ae:	4413      	add	r3, r2
 80068b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80068b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	011a      	lsls	r2, r3, #4
 80068c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80068c6:	4413      	add	r3, r2
 80068c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80068d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80068da:	801a      	strh	r2, [r3, #0]
 80068dc:	e001      	b.n	80068e2 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e03a      	b.n	8006958 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80068e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	4413      	add	r3, r2
 80068fc:	881b      	ldrh	r3, [r3, #0]
 80068fe:	b29b      	uxth	r3, r3
 8006900:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006908:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800690c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006910:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006914:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006918:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800691c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006920:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006928:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006932:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	441a      	add	r2, r3
 800693e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006942:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006946:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800694a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800694e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006952:	b29b      	uxth	r3, r3
 8006954:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	4618      	mov	r0, r3
 800695a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006962:	b480      	push	{r7}
 8006964:	b085      	sub	sp, #20
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
 800696a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	785b      	ldrb	r3, [r3, #1]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d020      	beq.n	80069b6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	4413      	add	r3, r2
 800697e:	881b      	ldrh	r3, [r3, #0]
 8006980:	b29b      	uxth	r3, r3
 8006982:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006986:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800698a:	81bb      	strh	r3, [r7, #12]
 800698c:	89bb      	ldrh	r3, [r7, #12]
 800698e:	f083 0310 	eor.w	r3, r3, #16
 8006992:	81bb      	strh	r3, [r7, #12]
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	441a      	add	r2, r3
 800699e:	89bb      	ldrh	r3, [r7, #12]
 80069a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	8013      	strh	r3, [r2, #0]
 80069b4:	e01f      	b.n	80069f6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	4413      	add	r3, r2
 80069c0:	881b      	ldrh	r3, [r3, #0]
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069cc:	81fb      	strh	r3, [r7, #14]
 80069ce:	89fb      	ldrh	r3, [r7, #14]
 80069d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80069d4:	81fb      	strh	r3, [r7, #14]
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	441a      	add	r2, r3
 80069e0:	89fb      	ldrh	r3, [r7, #14]
 80069e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3714      	adds	r7, #20
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bc80      	pop	{r7}
 8006a00:	4770      	bx	lr

08006a02 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a02:	b480      	push	{r7}
 8006a04:	b087      	sub	sp, #28
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
 8006a0a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	7b1b      	ldrb	r3, [r3, #12]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	f040 809d 	bne.w	8006b50 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	785b      	ldrb	r3, [r3, #1]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d04c      	beq.n	8006ab8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4413      	add	r3, r2
 8006a28:	881b      	ldrh	r3, [r3, #0]
 8006a2a:	823b      	strh	r3, [r7, #16]
 8006a2c:	8a3b      	ldrh	r3, [r7, #16]
 8006a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d01b      	beq.n	8006a6e <USB_EPClearStall+0x6c>
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	4413      	add	r3, r2
 8006a40:	881b      	ldrh	r3, [r3, #0]
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a4c:	81fb      	strh	r3, [r7, #14]
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	441a      	add	r2, r3
 8006a58:	89fb      	ldrh	r3, [r7, #14]
 8006a5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a66:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	78db      	ldrb	r3, [r3, #3]
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d06c      	beq.n	8006b50 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	4413      	add	r3, r2
 8006a80:	881b      	ldrh	r3, [r3, #0]
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a8c:	81bb      	strh	r3, [r7, #12]
 8006a8e:	89bb      	ldrh	r3, [r7, #12]
 8006a90:	f083 0320 	eor.w	r3, r3, #32
 8006a94:	81bb      	strh	r3, [r7, #12]
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	441a      	add	r2, r3
 8006aa0:	89bb      	ldrh	r3, [r7, #12]
 8006aa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006aa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	8013      	strh	r3, [r2, #0]
 8006ab6:	e04b      	b.n	8006b50 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4413      	add	r3, r2
 8006ac2:	881b      	ldrh	r3, [r3, #0]
 8006ac4:	82fb      	strh	r3, [r7, #22]
 8006ac6:	8afb      	ldrh	r3, [r7, #22]
 8006ac8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d01b      	beq.n	8006b08 <USB_EPClearStall+0x106>
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4413      	add	r3, r2
 8006ada:	881b      	ldrh	r3, [r3, #0]
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ae6:	82bb      	strh	r3, [r7, #20]
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	441a      	add	r2, r3
 8006af2:	8abb      	ldrh	r3, [r7, #20]
 8006af4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006af8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006afc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4413      	add	r3, r2
 8006b12:	881b      	ldrh	r3, [r3, #0]
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b1e:	827b      	strh	r3, [r7, #18]
 8006b20:	8a7b      	ldrh	r3, [r7, #18]
 8006b22:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006b26:	827b      	strh	r3, [r7, #18]
 8006b28:	8a7b      	ldrh	r3, [r7, #18]
 8006b2a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006b2e:	827b      	strh	r3, [r7, #18]
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	441a      	add	r2, r3
 8006b3a:	8a7b      	ldrh	r3, [r7, #18]
 8006b3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	371c      	adds	r7, #28
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bc80      	pop	{r7}
 8006b5a:	4770      	bx	lr

08006b5c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	460b      	mov	r3, r1
 8006b66:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006b68:	78fb      	ldrb	r3, [r7, #3]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d103      	bne.n	8006b76 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2280      	movs	r2, #128	; 0x80
 8006b72:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bc80      	pop	{r7}
 8006b80:	4770      	bx	lr

08006b82 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006b82:	b480      	push	{r7}
 8006b84:	b083      	sub	sp, #12
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bc80      	pop	{r7}
 8006b94:	4770      	bx	lr

08006b96 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006b96:	b480      	push	{r7}
 8006b98:	b083      	sub	sp, #12
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006b9e:	2300      	movs	r3, #0
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bc80      	pop	{r7}
 8006ba8:	4770      	bx	lr

08006baa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006baa:	b480      	push	{r7}
 8006bac:	b085      	sub	sp, #20
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3714      	adds	r7, #20
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bc80      	pop	{r7}
 8006bc6:	4770      	bx	lr

08006bc8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bc80      	pop	{r7}
 8006bdc:	4770      	bx	lr

08006bde <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006bde:	b480      	push	{r7}
 8006be0:	b08b      	sub	sp, #44	; 0x2c
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	60f8      	str	r0, [r7, #12]
 8006be6:	60b9      	str	r1, [r7, #8]
 8006be8:	4611      	mov	r1, r2
 8006bea:	461a      	mov	r2, r3
 8006bec:	460b      	mov	r3, r1
 8006bee:	80fb      	strh	r3, [r7, #6]
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006bf4:	88bb      	ldrh	r3, [r7, #4]
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	085b      	lsrs	r3, r3, #1
 8006bfa:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006c04:	88fb      	ldrh	r3, [r7, #6]
 8006c06:	005a      	lsls	r2, r3, #1
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c10:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	627b      	str	r3, [r7, #36]	; 0x24
 8006c16:	e01e      	b.n	8006c56 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	3301      	adds	r3, #1
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	021b      	lsls	r3, r3, #8
 8006c26:	b21a      	sxth	r2, r3
 8006c28:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	b21b      	sxth	r3, r3
 8006c30:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006c32:	6a3b      	ldr	r3, [r7, #32]
 8006c34:	8a7a      	ldrh	r2, [r7, #18]
 8006c36:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006c38:	6a3b      	ldr	r3, [r7, #32]
 8006c3a:	3302      	adds	r3, #2
 8006c3c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006c3e:	6a3b      	ldr	r3, [r7, #32]
 8006c40:	3302      	adds	r3, #2
 8006c42:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	3301      	adds	r3, #1
 8006c48:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c52:	3b01      	subs	r3, #1
 8006c54:	627b      	str	r3, [r7, #36]	; 0x24
 8006c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d1dd      	bne.n	8006c18 <USB_WritePMA+0x3a>
  }
}
 8006c5c:	bf00      	nop
 8006c5e:	bf00      	nop
 8006c60:	372c      	adds	r7, #44	; 0x2c
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bc80      	pop	{r7}
 8006c66:	4770      	bx	lr

08006c68 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b08b      	sub	sp, #44	; 0x2c
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	4611      	mov	r1, r2
 8006c74:	461a      	mov	r2, r3
 8006c76:	460b      	mov	r3, r1
 8006c78:	80fb      	strh	r3, [r7, #6]
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006c7e:	88bb      	ldrh	r3, [r7, #4]
 8006c80:	085b      	lsrs	r3, r3, #1
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006c8e:	88fb      	ldrh	r3, [r7, #6]
 8006c90:	005a      	lsls	r2, r3, #1
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	4413      	add	r3, r2
 8006c96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c9a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8006ca0:	e01b      	b.n	8006cda <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006ca2:	6a3b      	ldr	r3, [r7, #32]
 8006ca4:	881b      	ldrh	r3, [r3, #0]
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006caa:	6a3b      	ldr	r3, [r7, #32]
 8006cac:	3302      	adds	r3, #2
 8006cae:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	b2da      	uxtb	r2, r3
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	3301      	adds	r3, #1
 8006cbc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	0a1b      	lsrs	r3, r3, #8
 8006cc2:	b2da      	uxtb	r2, r3
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006cce:	6a3b      	ldr	r3, [r7, #32]
 8006cd0:	3302      	adds	r3, #2
 8006cd2:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8006cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d1e0      	bne.n	8006ca2 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006ce0:	88bb      	ldrh	r3, [r7, #4]
 8006ce2:	f003 0301 	and.w	r3, r3, #1
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d007      	beq.n	8006cfc <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006cec:	6a3b      	ldr	r3, [r7, #32]
 8006cee:	881b      	ldrh	r3, [r3, #0]
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	b2da      	uxtb	r2, r3
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	701a      	strb	r2, [r3, #0]
  }
}
 8006cfc:	bf00      	nop
 8006cfe:	372c      	adds	r7, #44	; 0x2c
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bc80      	pop	{r7}
 8006d04:	4770      	bx	lr

08006d06 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b084      	sub	sp, #16
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
 8006d0e:	460b      	mov	r3, r1
 8006d10:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006d12:	2300      	movs	r3, #0
 8006d14:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	7c1b      	ldrb	r3, [r3, #16]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d115      	bne.n	8006d4a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006d1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d22:	2202      	movs	r2, #2
 8006d24:	2181      	movs	r1, #129	; 0x81
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f001 fe87 	bl	8008a3a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006d32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d36:	2202      	movs	r2, #2
 8006d38:	2101      	movs	r1, #1
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f001 fe7d 	bl	8008a3a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006d48:	e012      	b.n	8006d70 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006d4a:	2340      	movs	r3, #64	; 0x40
 8006d4c:	2202      	movs	r2, #2
 8006d4e:	2181      	movs	r1, #129	; 0x81
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f001 fe72 	bl	8008a3a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006d5c:	2340      	movs	r3, #64	; 0x40
 8006d5e:	2202      	movs	r2, #2
 8006d60:	2101      	movs	r1, #1
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f001 fe69 	bl	8008a3a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006d70:	2308      	movs	r3, #8
 8006d72:	2203      	movs	r2, #3
 8006d74:	2182      	movs	r1, #130	; 0x82
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f001 fe5f 	bl	8008a3a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006d82:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006d86:	f001 ff7f 	bl	8008c88 <USBD_static_malloc>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d102      	bne.n	8006da2 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	73fb      	strb	r3, [r7, #15]
 8006da0:	e026      	b.n	8006df0 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006da8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	7c1b      	ldrb	r3, [r3, #16]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d109      	bne.n	8006de0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006dd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006dd6:	2101      	movs	r1, #1
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f001 ff1f 	bl	8008c1c <USBD_LL_PrepareReceive>
 8006dde:	e007      	b.n	8006df0 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006de6:	2340      	movs	r3, #64	; 0x40
 8006de8:	2101      	movs	r1, #1
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f001 ff16 	bl	8008c1c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b084      	sub	sp, #16
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
 8006e02:	460b      	mov	r3, r1
 8006e04:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006e06:	2300      	movs	r3, #0
 8006e08:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006e0a:	2181      	movs	r1, #129	; 0x81
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f001 fe3a 	bl	8008a86 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006e18:	2101      	movs	r1, #1
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f001 fe33 	bl	8008a86 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006e28:	2182      	movs	r1, #130	; 0x82
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f001 fe2b 	bl	8008a86 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d00e      	beq.n	8006e5e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e50:	4618      	mov	r0, r3
 8006e52:	f001 ff25 	bl	8008ca0 <USBD_static_free>
    pdev->pClassData = NULL;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b086      	sub	sp, #24
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e78:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006e82:	2300      	movs	r3, #0
 8006e84:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d039      	beq.n	8006f06 <USBD_CDC_Setup+0x9e>
 8006e92:	2b20      	cmp	r3, #32
 8006e94:	d17f      	bne.n	8006f96 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	88db      	ldrh	r3, [r3, #6]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d029      	beq.n	8006ef2 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	b25b      	sxtb	r3, r3
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	da11      	bge.n	8006ecc <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	683a      	ldr	r2, [r7, #0]
 8006eb2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006eb4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006eb6:	683a      	ldr	r2, [r7, #0]
 8006eb8:	88d2      	ldrh	r2, [r2, #6]
 8006eba:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006ebc:	6939      	ldr	r1, [r7, #16]
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	88db      	ldrh	r3, [r3, #6]
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f001 fa0a 	bl	80082de <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006eca:	e06b      	b.n	8006fa4 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	785a      	ldrb	r2, [r3, #1]
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	88db      	ldrh	r3, [r3, #6]
 8006eda:	b2da      	uxtb	r2, r3
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006ee2:	6939      	ldr	r1, [r7, #16]
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	88db      	ldrh	r3, [r3, #6]
 8006ee8:	461a      	mov	r2, r3
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f001 fa25 	bl	800833a <USBD_CtlPrepareRx>
      break;
 8006ef0:	e058      	b.n	8006fa4 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	683a      	ldr	r2, [r7, #0]
 8006efc:	7850      	ldrb	r0, [r2, #1]
 8006efe:	2200      	movs	r2, #0
 8006f00:	6839      	ldr	r1, [r7, #0]
 8006f02:	4798      	blx	r3
      break;
 8006f04:	e04e      	b.n	8006fa4 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	785b      	ldrb	r3, [r3, #1]
 8006f0a:	2b0b      	cmp	r3, #11
 8006f0c:	d02e      	beq.n	8006f6c <USBD_CDC_Setup+0x104>
 8006f0e:	2b0b      	cmp	r3, #11
 8006f10:	dc38      	bgt.n	8006f84 <USBD_CDC_Setup+0x11c>
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d002      	beq.n	8006f1c <USBD_CDC_Setup+0xb4>
 8006f16:	2b0a      	cmp	r3, #10
 8006f18:	d014      	beq.n	8006f44 <USBD_CDC_Setup+0xdc>
 8006f1a:	e033      	b.n	8006f84 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f22:	2b03      	cmp	r3, #3
 8006f24:	d107      	bne.n	8006f36 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006f26:	f107 030c 	add.w	r3, r7, #12
 8006f2a:	2202      	movs	r2, #2
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f001 f9d5 	bl	80082de <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f34:	e02e      	b.n	8006f94 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006f36:	6839      	ldr	r1, [r7, #0]
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f001 f966 	bl	800820a <USBD_CtlError>
            ret = USBD_FAIL;
 8006f3e:	2302      	movs	r3, #2
 8006f40:	75fb      	strb	r3, [r7, #23]
          break;
 8006f42:	e027      	b.n	8006f94 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f4a:	2b03      	cmp	r3, #3
 8006f4c:	d107      	bne.n	8006f5e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006f4e:	f107 030f 	add.w	r3, r7, #15
 8006f52:	2201      	movs	r2, #1
 8006f54:	4619      	mov	r1, r3
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f001 f9c1 	bl	80082de <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f5c:	e01a      	b.n	8006f94 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006f5e:	6839      	ldr	r1, [r7, #0]
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f001 f952 	bl	800820a <USBD_CtlError>
            ret = USBD_FAIL;
 8006f66:	2302      	movs	r3, #2
 8006f68:	75fb      	strb	r3, [r7, #23]
          break;
 8006f6a:	e013      	b.n	8006f94 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f72:	2b03      	cmp	r3, #3
 8006f74:	d00d      	beq.n	8006f92 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006f76:	6839      	ldr	r1, [r7, #0]
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f001 f946 	bl	800820a <USBD_CtlError>
            ret = USBD_FAIL;
 8006f7e:	2302      	movs	r3, #2
 8006f80:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006f82:	e006      	b.n	8006f92 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006f84:	6839      	ldr	r1, [r7, #0]
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f001 f93f 	bl	800820a <USBD_CtlError>
          ret = USBD_FAIL;
 8006f8c:	2302      	movs	r3, #2
 8006f8e:	75fb      	strb	r3, [r7, #23]
          break;
 8006f90:	e000      	b.n	8006f94 <USBD_CDC_Setup+0x12c>
          break;
 8006f92:	bf00      	nop
      }
      break;
 8006f94:	e006      	b.n	8006fa4 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006f96:	6839      	ldr	r1, [r7, #0]
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f001 f936 	bl	800820a <USBD_CtlError>
      ret = USBD_FAIL;
 8006f9e:	2302      	movs	r3, #2
 8006fa0:	75fb      	strb	r3, [r7, #23]
      break;
 8006fa2:	bf00      	nop
  }

  return ret;
 8006fa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3718      	adds	r7, #24
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}

08006fae <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b084      	sub	sp, #16
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fc0:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fc8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d03a      	beq.n	800704a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006fd4:	78fa      	ldrb	r2, [r7, #3]
 8006fd6:	6879      	ldr	r1, [r7, #4]
 8006fd8:	4613      	mov	r3, r2
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	4413      	add	r3, r2
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	440b      	add	r3, r1
 8006fe2:	331c      	adds	r3, #28
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d029      	beq.n	800703e <USBD_CDC_DataIn+0x90>
 8006fea:	78fa      	ldrb	r2, [r7, #3]
 8006fec:	6879      	ldr	r1, [r7, #4]
 8006fee:	4613      	mov	r3, r2
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	4413      	add	r3, r2
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	440b      	add	r3, r1
 8006ff8:	331c      	adds	r3, #28
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	78f9      	ldrb	r1, [r7, #3]
 8006ffe:	68b8      	ldr	r0, [r7, #8]
 8007000:	460b      	mov	r3, r1
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	440b      	add	r3, r1
 8007006:	00db      	lsls	r3, r3, #3
 8007008:	4403      	add	r3, r0
 800700a:	3338      	adds	r3, #56	; 0x38
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	fbb2 f1f3 	udiv	r1, r2, r3
 8007012:	fb01 f303 	mul.w	r3, r1, r3
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	2b00      	cmp	r3, #0
 800701a:	d110      	bne.n	800703e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800701c:	78fa      	ldrb	r2, [r7, #3]
 800701e:	6879      	ldr	r1, [r7, #4]
 8007020:	4613      	mov	r3, r2
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	4413      	add	r3, r2
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	440b      	add	r3, r1
 800702a:	331c      	adds	r3, #28
 800702c:	2200      	movs	r2, #0
 800702e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007030:	78f9      	ldrb	r1, [r7, #3]
 8007032:	2300      	movs	r3, #0
 8007034:	2200      	movs	r2, #0
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f001 fdcd 	bl	8008bd6 <USBD_LL_Transmit>
 800703c:	e003      	b.n	8007046 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2200      	movs	r2, #0
 8007042:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007046:	2300      	movs	r3, #0
 8007048:	e000      	b.n	800704c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800704a:	2302      	movs	r3, #2
  }
}
 800704c:	4618      	mov	r0, r3
 800704e:	3710      	adds	r7, #16
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	460b      	mov	r3, r1
 800705e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007066:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007068:	78fb      	ldrb	r3, [r7, #3]
 800706a:	4619      	mov	r1, r3
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f001 fdf8 	bl	8008c62 <USBD_LL_GetRxDataSize>
 8007072:	4602      	mov	r2, r0
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007080:	2b00      	cmp	r3, #0
 8007082:	d00d      	beq.n	80070a0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007098:	4611      	mov	r1, r2
 800709a:	4798      	blx	r3

    return USBD_OK;
 800709c:	2300      	movs	r3, #0
 800709e:	e000      	b.n	80070a2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80070a0:	2302      	movs	r3, #2
  }
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b084      	sub	sp, #16
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070b8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d015      	beq.n	80070f0 <USBD_CDC_EP0_RxReady+0x46>
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80070ca:	2bff      	cmp	r3, #255	; 0xff
 80070cc:	d010      	beq.n	80070f0 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80070dc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80070e4:	b292      	uxth	r2, r2
 80070e6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	22ff      	movs	r2, #255	; 0xff
 80070ec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3710      	adds	r7, #16
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
	...

080070fc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2243      	movs	r2, #67	; 0x43
 8007108:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800710a:	4b03      	ldr	r3, [pc, #12]	; (8007118 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800710c:	4618      	mov	r0, r3
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	bc80      	pop	{r7}
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	20000094 	.word	0x20000094

0800711c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2243      	movs	r2, #67	; 0x43
 8007128:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800712a:	4b03      	ldr	r3, [pc, #12]	; (8007138 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800712c:	4618      	mov	r0, r3
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	bc80      	pop	{r7}
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	20000050 	.word	0x20000050

0800713c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2243      	movs	r2, #67	; 0x43
 8007148:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800714a:	4b03      	ldr	r3, [pc, #12]	; (8007158 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800714c:	4618      	mov	r0, r3
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	bc80      	pop	{r7}
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	200000d8 	.word	0x200000d8

0800715c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	220a      	movs	r2, #10
 8007168:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800716a:	4b03      	ldr	r3, [pc, #12]	; (8007178 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800716c:	4618      	mov	r0, r3
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	bc80      	pop	{r7}
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	2000000c 	.word	0x2000000c

0800717c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800717c:	b480      	push	{r7}
 800717e:	b085      	sub	sp, #20
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007186:	2302      	movs	r3, #2
 8007188:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d005      	beq.n	800719c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	683a      	ldr	r2, [r7, #0]
 8007194:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007198:	2300      	movs	r3, #0
 800719a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800719c:	7bfb      	ldrb	r3, [r7, #15]
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3714      	adds	r7, #20
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bc80      	pop	{r7}
 80071a6:	4770      	bx	lr

080071a8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b087      	sub	sp, #28
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	4613      	mov	r3, r2
 80071b4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071bc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	68ba      	ldr	r2, [r7, #8]
 80071c2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80071c6:	88fa      	ldrh	r2, [r7, #6]
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	371c      	adds	r7, #28
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bc80      	pop	{r7}
 80071d8:	4770      	bx	lr

080071da <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80071da:	b480      	push	{r7}
 80071dc:	b085      	sub	sp, #20
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
 80071e2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ea:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	683a      	ldr	r2, [r7, #0]
 80071f0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3714      	adds	r7, #20
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bc80      	pop	{r7}
 80071fe:	4770      	bx	lr

08007200 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800720e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007216:	2b00      	cmp	r3, #0
 8007218:	d01c      	beq.n	8007254 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007220:	2b00      	cmp	r3, #0
 8007222:	d115      	bne.n	8007250 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2201      	movs	r2, #1
 8007228:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007242:	b29b      	uxth	r3, r3
 8007244:	2181      	movs	r1, #129	; 0x81
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f001 fcc5 	bl	8008bd6 <USBD_LL_Transmit>

      return USBD_OK;
 800724c:	2300      	movs	r3, #0
 800724e:	e002      	b.n	8007256 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007250:	2301      	movs	r3, #1
 8007252:	e000      	b.n	8007256 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007254:	2302      	movs	r3, #2
  }
}
 8007256:	4618      	mov	r0, r3
 8007258:	3710      	adds	r7, #16
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800725e:	b580      	push	{r7, lr}
 8007260:	b084      	sub	sp, #16
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800726c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007274:	2b00      	cmp	r3, #0
 8007276:	d017      	beq.n	80072a8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	7c1b      	ldrb	r3, [r3, #16]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d109      	bne.n	8007294 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007286:	f44f 7300 	mov.w	r3, #512	; 0x200
 800728a:	2101      	movs	r1, #1
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f001 fcc5 	bl	8008c1c <USBD_LL_PrepareReceive>
 8007292:	e007      	b.n	80072a4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800729a:	2340      	movs	r3, #64	; 0x40
 800729c:	2101      	movs	r1, #1
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f001 fcbc 	bl	8008c1c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80072a4:	2300      	movs	r3, #0
 80072a6:	e000      	b.n	80072aa <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80072a8:	2302      	movs	r3, #2
  }
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b084      	sub	sp, #16
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	60f8      	str	r0, [r7, #12]
 80072ba:	60b9      	str	r1, [r7, #8]
 80072bc:	4613      	mov	r3, r2
 80072be:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d101      	bne.n	80072ca <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80072c6:	2302      	movs	r3, #2
 80072c8:	e01a      	b.n	8007300 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d003      	beq.n	80072dc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d003      	beq.n	80072ea <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	68ba      	ldr	r2, [r7, #8]
 80072e6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2201      	movs	r2, #1
 80072ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	79fa      	ldrb	r2, [r7, #7]
 80072f6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f001 fb29 	bl	8008950 <USBD_LL_Init>

  return USBD_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3710      	adds	r7, #16
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007312:	2300      	movs	r3, #0
 8007314:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d006      	beq.n	800732a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007324:	2300      	movs	r3, #0
 8007326:	73fb      	strb	r3, [r7, #15]
 8007328:	e001      	b.n	800732e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800732a:	2302      	movs	r3, #2
 800732c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800732e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007330:	4618      	mov	r0, r3
 8007332:	3714      	adds	r7, #20
 8007334:	46bd      	mov	sp, r7
 8007336:	bc80      	pop	{r7}
 8007338:	4770      	bx	lr

0800733a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b082      	sub	sp, #8
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f001 fb5e 	bl	8008a04 <USBD_LL_Start>

  return USBD_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3708      	adds	r7, #8
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007352:	b480      	push	{r7}
 8007354:	b083      	sub	sp, #12
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	bc80      	pop	{r7}
 8007364:	4770      	bx	lr

08007366 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b084      	sub	sp, #16
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
 800736e:	460b      	mov	r3, r1
 8007370:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007372:	2302      	movs	r3, #2
 8007374:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00c      	beq.n	800739a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	78fa      	ldrb	r2, [r7, #3]
 800738a:	4611      	mov	r1, r2
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	4798      	blx	r3
 8007390:	4603      	mov	r3, r0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d101      	bne.n	800739a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007396:	2300      	movs	r3, #0
 8007398:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800739a:	7bfb      	ldrb	r3, [r7, #15]
}
 800739c:	4618      	mov	r0, r3
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b082      	sub	sp, #8
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	460b      	mov	r3, r1
 80073ae:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	78fa      	ldrb	r2, [r7, #3]
 80073ba:	4611      	mov	r1, r2
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	4798      	blx	r3

  return USBD_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3708      	adds	r7, #8
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b082      	sub	sp, #8
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
 80073d2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80073da:	6839      	ldr	r1, [r7, #0]
 80073dc:	4618      	mov	r0, r3
 80073de:	f000 fed8 	bl	8008192 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2201      	movs	r2, #1
 80073e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80073f0:	461a      	mov	r2, r3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80073fe:	f003 031f 	and.w	r3, r3, #31
 8007402:	2b02      	cmp	r3, #2
 8007404:	d016      	beq.n	8007434 <USBD_LL_SetupStage+0x6a>
 8007406:	2b02      	cmp	r3, #2
 8007408:	d81c      	bhi.n	8007444 <USBD_LL_SetupStage+0x7a>
 800740a:	2b00      	cmp	r3, #0
 800740c:	d002      	beq.n	8007414 <USBD_LL_SetupStage+0x4a>
 800740e:	2b01      	cmp	r3, #1
 8007410:	d008      	beq.n	8007424 <USBD_LL_SetupStage+0x5a>
 8007412:	e017      	b.n	8007444 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800741a:	4619      	mov	r1, r3
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 f9cb 	bl	80077b8 <USBD_StdDevReq>
      break;
 8007422:	e01a      	b.n	800745a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800742a:	4619      	mov	r1, r3
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 fa2d 	bl	800788c <USBD_StdItfReq>
      break;
 8007432:	e012      	b.n	800745a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800743a:	4619      	mov	r1, r3
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 fa6d 	bl	800791c <USBD_StdEPReq>
      break;
 8007442:	e00a      	b.n	800745a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800744a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800744e:	b2db      	uxtb	r3, r3
 8007450:	4619      	mov	r1, r3
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f001 fb36 	bl	8008ac4 <USBD_LL_StallEP>
      break;
 8007458:	bf00      	nop
  }

  return USBD_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3708      	adds	r7, #8
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b086      	sub	sp, #24
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	460b      	mov	r3, r1
 800746e:	607a      	str	r2, [r7, #4]
 8007470:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007472:	7afb      	ldrb	r3, [r7, #11]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d14b      	bne.n	8007510 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800747e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007486:	2b03      	cmp	r3, #3
 8007488:	d134      	bne.n	80074f4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	68da      	ldr	r2, [r3, #12]
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	429a      	cmp	r2, r3
 8007494:	d919      	bls.n	80074ca <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	68da      	ldr	r2, [r3, #12]
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	1ad2      	subs	r2, r2, r3
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	68da      	ldr	r2, [r3, #12]
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d203      	bcs.n	80074b8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	e002      	b.n	80074be <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80074bc:	b29b      	uxth	r3, r3
 80074be:	461a      	mov	r2, r3
 80074c0:	6879      	ldr	r1, [r7, #4]
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f000 ff57 	bl	8008376 <USBD_CtlContinueRx>
 80074c8:	e038      	b.n	800753c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00a      	beq.n	80074ec <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80074dc:	2b03      	cmp	r3, #3
 80074de:	d105      	bne.n	80074ec <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074e6:	691b      	ldr	r3, [r3, #16]
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80074ec:	68f8      	ldr	r0, [r7, #12]
 80074ee:	f000 ff54 	bl	800839a <USBD_CtlSendStatus>
 80074f2:	e023      	b.n	800753c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80074fa:	2b05      	cmp	r3, #5
 80074fc:	d11e      	bne.n	800753c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2200      	movs	r2, #0
 8007502:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007506:	2100      	movs	r1, #0
 8007508:	68f8      	ldr	r0, [r7, #12]
 800750a:	f001 fadb 	bl	8008ac4 <USBD_LL_StallEP>
 800750e:	e015      	b.n	800753c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007516:	699b      	ldr	r3, [r3, #24]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00d      	beq.n	8007538 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007522:	2b03      	cmp	r3, #3
 8007524:	d108      	bne.n	8007538 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800752c:	699b      	ldr	r3, [r3, #24]
 800752e:	7afa      	ldrb	r2, [r7, #11]
 8007530:	4611      	mov	r1, r2
 8007532:	68f8      	ldr	r0, [r7, #12]
 8007534:	4798      	blx	r3
 8007536:	e001      	b.n	800753c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007538:	2302      	movs	r3, #2
 800753a:	e000      	b.n	800753e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3718      	adds	r7, #24
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007546:	b580      	push	{r7, lr}
 8007548:	b086      	sub	sp, #24
 800754a:	af00      	add	r7, sp, #0
 800754c:	60f8      	str	r0, [r7, #12]
 800754e:	460b      	mov	r3, r1
 8007550:	607a      	str	r2, [r7, #4]
 8007552:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007554:	7afb      	ldrb	r3, [r7, #11]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d17f      	bne.n	800765a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	3314      	adds	r3, #20
 800755e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007566:	2b02      	cmp	r3, #2
 8007568:	d15c      	bne.n	8007624 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	68da      	ldr	r2, [r3, #12]
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	691b      	ldr	r3, [r3, #16]
 8007572:	429a      	cmp	r2, r3
 8007574:	d915      	bls.n	80075a2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	68da      	ldr	r2, [r3, #12]
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	1ad2      	subs	r2, r2, r3
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	b29b      	uxth	r3, r3
 800758a:	461a      	mov	r2, r3
 800758c:	6879      	ldr	r1, [r7, #4]
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	f000 fec1 	bl	8008316 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007594:	2300      	movs	r3, #0
 8007596:	2200      	movs	r2, #0
 8007598:	2100      	movs	r1, #0
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	f001 fb3e 	bl	8008c1c <USBD_LL_PrepareReceive>
 80075a0:	e04e      	b.n	8007640 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	697a      	ldr	r2, [r7, #20]
 80075a8:	6912      	ldr	r2, [r2, #16]
 80075aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80075ae:	fb01 f202 	mul.w	r2, r1, r2
 80075b2:	1a9b      	subs	r3, r3, r2
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d11c      	bne.n	80075f2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	689a      	ldr	r2, [r3, #8]
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d316      	bcc.n	80075f2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	689a      	ldr	r2, [r3, #8]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d20f      	bcs.n	80075f2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80075d2:	2200      	movs	r2, #0
 80075d4:	2100      	movs	r1, #0
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f000 fe9d 	bl	8008316 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2200      	movs	r2, #0
 80075e0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075e4:	2300      	movs	r3, #0
 80075e6:	2200      	movs	r2, #0
 80075e8:	2100      	movs	r1, #0
 80075ea:	68f8      	ldr	r0, [r7, #12]
 80075ec:	f001 fb16 	bl	8008c1c <USBD_LL_PrepareReceive>
 80075f0:	e026      	b.n	8007640 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00a      	beq.n	8007614 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007604:	2b03      	cmp	r3, #3
 8007606:	d105      	bne.n	8007614 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	68f8      	ldr	r0, [r7, #12]
 8007612:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007614:	2180      	movs	r1, #128	; 0x80
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	f001 fa54 	bl	8008ac4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f000 fecf 	bl	80083c0 <USBD_CtlReceiveStatus>
 8007622:	e00d      	b.n	8007640 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800762a:	2b04      	cmp	r3, #4
 800762c:	d004      	beq.n	8007638 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007634:	2b00      	cmp	r3, #0
 8007636:	d103      	bne.n	8007640 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007638:	2180      	movs	r1, #128	; 0x80
 800763a:	68f8      	ldr	r0, [r7, #12]
 800763c:	f001 fa42 	bl	8008ac4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007646:	2b01      	cmp	r3, #1
 8007648:	d11d      	bne.n	8007686 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800764a:	68f8      	ldr	r0, [r7, #12]
 800764c:	f7ff fe81 	bl	8007352 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2200      	movs	r2, #0
 8007654:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007658:	e015      	b.n	8007686 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007660:	695b      	ldr	r3, [r3, #20]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d00d      	beq.n	8007682 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800766c:	2b03      	cmp	r3, #3
 800766e:	d108      	bne.n	8007682 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007676:	695b      	ldr	r3, [r3, #20]
 8007678:	7afa      	ldrb	r2, [r7, #11]
 800767a:	4611      	mov	r1, r2
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	4798      	blx	r3
 8007680:	e001      	b.n	8007686 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007682:	2302      	movs	r3, #2
 8007684:	e000      	b.n	8007688 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007686:	2300      	movs	r3, #0
}
 8007688:	4618      	mov	r0, r3
 800768a:	3718      	adds	r7, #24
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007698:	2340      	movs	r3, #64	; 0x40
 800769a:	2200      	movs	r2, #0
 800769c:	2100      	movs	r1, #0
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f001 f9cb 	bl	8008a3a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2240      	movs	r2, #64	; 0x40
 80076b0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80076b4:	2340      	movs	r3, #64	; 0x40
 80076b6:	2200      	movs	r2, #0
 80076b8:	2180      	movs	r1, #128	; 0x80
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f001 f9bd 	bl	8008a3a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2240      	movs	r2, #64	; 0x40
 80076ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d009      	beq.n	8007708 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	6852      	ldr	r2, [r2, #4]
 8007700:	b2d2      	uxtb	r2, r2
 8007702:	4611      	mov	r1, r2
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	4798      	blx	r3
  }

  return USBD_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3708      	adds	r7, #8
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007712:	b480      	push	{r7}
 8007714:	b083      	sub	sp, #12
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
 800771a:	460b      	mov	r3, r1
 800771c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	78fa      	ldrb	r2, [r7, #3]
 8007722:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	370c      	adds	r7, #12
 800772a:	46bd      	mov	sp, r7
 800772c:	bc80      	pop	{r7}
 800772e:	4770      	bx	lr

08007730 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2204      	movs	r2, #4
 8007748:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	370c      	adds	r7, #12
 8007752:	46bd      	mov	sp, r7
 8007754:	bc80      	pop	{r7}
 8007756:	4770      	bx	lr

08007758 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007766:	2b04      	cmp	r3, #4
 8007768:	d105      	bne.n	8007776 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007776:	2300      	movs	r3, #0
}
 8007778:	4618      	mov	r0, r3
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	bc80      	pop	{r7}
 8007780:	4770      	bx	lr

08007782 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b082      	sub	sp, #8
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007790:	2b03      	cmp	r3, #3
 8007792:	d10b      	bne.n	80077ac <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800779a:	69db      	ldr	r3, [r3, #28]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d005      	beq.n	80077ac <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077a6:	69db      	ldr	r3, [r3, #28]
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3708      	adds	r7, #8
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
	...

080077b8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077c2:	2300      	movs	r3, #0
 80077c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077ce:	2b40      	cmp	r3, #64	; 0x40
 80077d0:	d005      	beq.n	80077de <USBD_StdDevReq+0x26>
 80077d2:	2b40      	cmp	r3, #64	; 0x40
 80077d4:	d84f      	bhi.n	8007876 <USBD_StdDevReq+0xbe>
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d009      	beq.n	80077ee <USBD_StdDevReq+0x36>
 80077da:	2b20      	cmp	r3, #32
 80077dc:	d14b      	bne.n	8007876 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	6839      	ldr	r1, [r7, #0]
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	4798      	blx	r3
      break;
 80077ec:	e048      	b.n	8007880 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	785b      	ldrb	r3, [r3, #1]
 80077f2:	2b09      	cmp	r3, #9
 80077f4:	d839      	bhi.n	800786a <USBD_StdDevReq+0xb2>
 80077f6:	a201      	add	r2, pc, #4	; (adr r2, 80077fc <USBD_StdDevReq+0x44>)
 80077f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077fc:	0800784d 	.word	0x0800784d
 8007800:	08007861 	.word	0x08007861
 8007804:	0800786b 	.word	0x0800786b
 8007808:	08007857 	.word	0x08007857
 800780c:	0800786b 	.word	0x0800786b
 8007810:	0800782f 	.word	0x0800782f
 8007814:	08007825 	.word	0x08007825
 8007818:	0800786b 	.word	0x0800786b
 800781c:	08007843 	.word	0x08007843
 8007820:	08007839 	.word	0x08007839
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007824:	6839      	ldr	r1, [r7, #0]
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 f9dc 	bl	8007be4 <USBD_GetDescriptor>
          break;
 800782c:	e022      	b.n	8007874 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800782e:	6839      	ldr	r1, [r7, #0]
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fb3f 	bl	8007eb4 <USBD_SetAddress>
          break;
 8007836:	e01d      	b.n	8007874 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007838:	6839      	ldr	r1, [r7, #0]
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 fb7e 	bl	8007f3c <USBD_SetConfig>
          break;
 8007840:	e018      	b.n	8007874 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007842:	6839      	ldr	r1, [r7, #0]
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 fc07 	bl	8008058 <USBD_GetConfig>
          break;
 800784a:	e013      	b.n	8007874 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800784c:	6839      	ldr	r1, [r7, #0]
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 fc37 	bl	80080c2 <USBD_GetStatus>
          break;
 8007854:	e00e      	b.n	8007874 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007856:	6839      	ldr	r1, [r7, #0]
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 fc65 	bl	8008128 <USBD_SetFeature>
          break;
 800785e:	e009      	b.n	8007874 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007860:	6839      	ldr	r1, [r7, #0]
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 fc74 	bl	8008150 <USBD_ClrFeature>
          break;
 8007868:	e004      	b.n	8007874 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800786a:	6839      	ldr	r1, [r7, #0]
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 fccc 	bl	800820a <USBD_CtlError>
          break;
 8007872:	bf00      	nop
      }
      break;
 8007874:	e004      	b.n	8007880 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007876:	6839      	ldr	r1, [r7, #0]
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 fcc6 	bl	800820a <USBD_CtlError>
      break;
 800787e:	bf00      	nop
  }

  return ret;
 8007880:	7bfb      	ldrb	r3, [r7, #15]
}
 8007882:	4618      	mov	r0, r3
 8007884:	3710      	adds	r7, #16
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop

0800788c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007896:	2300      	movs	r3, #0
 8007898:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078a2:	2b40      	cmp	r3, #64	; 0x40
 80078a4:	d005      	beq.n	80078b2 <USBD_StdItfReq+0x26>
 80078a6:	2b40      	cmp	r3, #64	; 0x40
 80078a8:	d82e      	bhi.n	8007908 <USBD_StdItfReq+0x7c>
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d001      	beq.n	80078b2 <USBD_StdItfReq+0x26>
 80078ae:	2b20      	cmp	r3, #32
 80078b0:	d12a      	bne.n	8007908 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078b8:	3b01      	subs	r3, #1
 80078ba:	2b02      	cmp	r3, #2
 80078bc:	d81d      	bhi.n	80078fa <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	889b      	ldrh	r3, [r3, #4]
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d813      	bhi.n	80078f0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	6839      	ldr	r1, [r7, #0]
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	4798      	blx	r3
 80078d6:	4603      	mov	r3, r0
 80078d8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	88db      	ldrh	r3, [r3, #6]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d110      	bne.n	8007904 <USBD_StdItfReq+0x78>
 80078e2:	7bfb      	ldrb	r3, [r7, #15]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d10d      	bne.n	8007904 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 fd56 	bl	800839a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80078ee:	e009      	b.n	8007904 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80078f0:	6839      	ldr	r1, [r7, #0]
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 fc89 	bl	800820a <USBD_CtlError>
          break;
 80078f8:	e004      	b.n	8007904 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80078fa:	6839      	ldr	r1, [r7, #0]
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 fc84 	bl	800820a <USBD_CtlError>
          break;
 8007902:	e000      	b.n	8007906 <USBD_StdItfReq+0x7a>
          break;
 8007904:	bf00      	nop
      }
      break;
 8007906:	e004      	b.n	8007912 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007908:	6839      	ldr	r1, [r7, #0]
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 fc7d 	bl	800820a <USBD_CtlError>
      break;
 8007910:	bf00      	nop
  }

  return USBD_OK;
 8007912:	2300      	movs	r3, #0
}
 8007914:	4618      	mov	r0, r3
 8007916:	3710      	adds	r7, #16
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007926:	2300      	movs	r3, #0
 8007928:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	889b      	ldrh	r3, [r3, #4]
 800792e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007938:	2b40      	cmp	r3, #64	; 0x40
 800793a:	d007      	beq.n	800794c <USBD_StdEPReq+0x30>
 800793c:	2b40      	cmp	r3, #64	; 0x40
 800793e:	f200 8146 	bhi.w	8007bce <USBD_StdEPReq+0x2b2>
 8007942:	2b00      	cmp	r3, #0
 8007944:	d00a      	beq.n	800795c <USBD_StdEPReq+0x40>
 8007946:	2b20      	cmp	r3, #32
 8007948:	f040 8141 	bne.w	8007bce <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	6839      	ldr	r1, [r7, #0]
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	4798      	blx	r3
      break;
 800795a:	e13d      	b.n	8007bd8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007964:	2b20      	cmp	r3, #32
 8007966:	d10a      	bne.n	800797e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	6839      	ldr	r1, [r7, #0]
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	4798      	blx	r3
 8007976:	4603      	mov	r3, r0
 8007978:	73fb      	strb	r3, [r7, #15]

        return ret;
 800797a:	7bfb      	ldrb	r3, [r7, #15]
 800797c:	e12d      	b.n	8007bda <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	785b      	ldrb	r3, [r3, #1]
 8007982:	2b03      	cmp	r3, #3
 8007984:	d007      	beq.n	8007996 <USBD_StdEPReq+0x7a>
 8007986:	2b03      	cmp	r3, #3
 8007988:	f300 811b 	bgt.w	8007bc2 <USBD_StdEPReq+0x2a6>
 800798c:	2b00      	cmp	r3, #0
 800798e:	d072      	beq.n	8007a76 <USBD_StdEPReq+0x15a>
 8007990:	2b01      	cmp	r3, #1
 8007992:	d03a      	beq.n	8007a0a <USBD_StdEPReq+0xee>
 8007994:	e115      	b.n	8007bc2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800799c:	2b02      	cmp	r3, #2
 800799e:	d002      	beq.n	80079a6 <USBD_StdEPReq+0x8a>
 80079a0:	2b03      	cmp	r3, #3
 80079a2:	d015      	beq.n	80079d0 <USBD_StdEPReq+0xb4>
 80079a4:	e02b      	b.n	80079fe <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079a6:	7bbb      	ldrb	r3, [r7, #14]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d00c      	beq.n	80079c6 <USBD_StdEPReq+0xaa>
 80079ac:	7bbb      	ldrb	r3, [r7, #14]
 80079ae:	2b80      	cmp	r3, #128	; 0x80
 80079b0:	d009      	beq.n	80079c6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80079b2:	7bbb      	ldrb	r3, [r7, #14]
 80079b4:	4619      	mov	r1, r3
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f001 f884 	bl	8008ac4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80079bc:	2180      	movs	r1, #128	; 0x80
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f001 f880 	bl	8008ac4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80079c4:	e020      	b.n	8007a08 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80079c6:	6839      	ldr	r1, [r7, #0]
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 fc1e 	bl	800820a <USBD_CtlError>
              break;
 80079ce:	e01b      	b.n	8007a08 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	885b      	ldrh	r3, [r3, #2]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d10e      	bne.n	80079f6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80079d8:	7bbb      	ldrb	r3, [r7, #14]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00b      	beq.n	80079f6 <USBD_StdEPReq+0xda>
 80079de:	7bbb      	ldrb	r3, [r7, #14]
 80079e0:	2b80      	cmp	r3, #128	; 0x80
 80079e2:	d008      	beq.n	80079f6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	88db      	ldrh	r3, [r3, #6]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d104      	bne.n	80079f6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80079ec:	7bbb      	ldrb	r3, [r7, #14]
 80079ee:	4619      	mov	r1, r3
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f001 f867 	bl	8008ac4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 fccf 	bl	800839a <USBD_CtlSendStatus>

              break;
 80079fc:	e004      	b.n	8007a08 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80079fe:	6839      	ldr	r1, [r7, #0]
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 fc02 	bl	800820a <USBD_CtlError>
              break;
 8007a06:	bf00      	nop
          }
          break;
 8007a08:	e0e0      	b.n	8007bcc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	d002      	beq.n	8007a1a <USBD_StdEPReq+0xfe>
 8007a14:	2b03      	cmp	r3, #3
 8007a16:	d015      	beq.n	8007a44 <USBD_StdEPReq+0x128>
 8007a18:	e026      	b.n	8007a68 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a1a:	7bbb      	ldrb	r3, [r7, #14]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00c      	beq.n	8007a3a <USBD_StdEPReq+0x11e>
 8007a20:	7bbb      	ldrb	r3, [r7, #14]
 8007a22:	2b80      	cmp	r3, #128	; 0x80
 8007a24:	d009      	beq.n	8007a3a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007a26:	7bbb      	ldrb	r3, [r7, #14]
 8007a28:	4619      	mov	r1, r3
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f001 f84a 	bl	8008ac4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007a30:	2180      	movs	r1, #128	; 0x80
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f001 f846 	bl	8008ac4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a38:	e01c      	b.n	8007a74 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007a3a:	6839      	ldr	r1, [r7, #0]
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 fbe4 	bl	800820a <USBD_CtlError>
              break;
 8007a42:	e017      	b.n	8007a74 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	885b      	ldrh	r3, [r3, #2]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d112      	bne.n	8007a72 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007a4c:	7bbb      	ldrb	r3, [r7, #14]
 8007a4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d004      	beq.n	8007a60 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007a56:	7bbb      	ldrb	r3, [r7, #14]
 8007a58:	4619      	mov	r1, r3
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f001 f851 	bl	8008b02 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 fc9a 	bl	800839a <USBD_CtlSendStatus>
              }
              break;
 8007a66:	e004      	b.n	8007a72 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007a68:	6839      	ldr	r1, [r7, #0]
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 fbcd 	bl	800820a <USBD_CtlError>
              break;
 8007a70:	e000      	b.n	8007a74 <USBD_StdEPReq+0x158>
              break;
 8007a72:	bf00      	nop
          }
          break;
 8007a74:	e0aa      	b.n	8007bcc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a7c:	2b02      	cmp	r3, #2
 8007a7e:	d002      	beq.n	8007a86 <USBD_StdEPReq+0x16a>
 8007a80:	2b03      	cmp	r3, #3
 8007a82:	d032      	beq.n	8007aea <USBD_StdEPReq+0x1ce>
 8007a84:	e097      	b.n	8007bb6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a86:	7bbb      	ldrb	r3, [r7, #14]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d007      	beq.n	8007a9c <USBD_StdEPReq+0x180>
 8007a8c:	7bbb      	ldrb	r3, [r7, #14]
 8007a8e:	2b80      	cmp	r3, #128	; 0x80
 8007a90:	d004      	beq.n	8007a9c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007a92:	6839      	ldr	r1, [r7, #0]
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 fbb8 	bl	800820a <USBD_CtlError>
                break;
 8007a9a:	e091      	b.n	8007bc0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	da0b      	bge.n	8007abc <USBD_StdEPReq+0x1a0>
 8007aa4:	7bbb      	ldrb	r3, [r7, #14]
 8007aa6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007aaa:	4613      	mov	r3, r2
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	4413      	add	r3, r2
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	3310      	adds	r3, #16
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	4413      	add	r3, r2
 8007ab8:	3304      	adds	r3, #4
 8007aba:	e00b      	b.n	8007ad4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007abc:	7bbb      	ldrb	r3, [r7, #14]
 8007abe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	4413      	add	r3, r2
 8007ac8:	009b      	lsls	r3, r3, #2
 8007aca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	3304      	adds	r3, #4
 8007ad4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	2202      	movs	r2, #2
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fbfb 	bl	80082de <USBD_CtlSendData>
              break;
 8007ae8:	e06a      	b.n	8007bc0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007aea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	da11      	bge.n	8007b16 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007af2:	7bbb      	ldrb	r3, [r7, #14]
 8007af4:	f003 020f 	and.w	r2, r3, #15
 8007af8:	6879      	ldr	r1, [r7, #4]
 8007afa:	4613      	mov	r3, r2
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	4413      	add	r3, r2
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	440b      	add	r3, r1
 8007b04:	3318      	adds	r3, #24
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d117      	bne.n	8007b3c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007b0c:	6839      	ldr	r1, [r7, #0]
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 fb7b 	bl	800820a <USBD_CtlError>
                  break;
 8007b14:	e054      	b.n	8007bc0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007b16:	7bbb      	ldrb	r3, [r7, #14]
 8007b18:	f003 020f 	and.w	r2, r3, #15
 8007b1c:	6879      	ldr	r1, [r7, #4]
 8007b1e:	4613      	mov	r3, r2
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	4413      	add	r3, r2
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	440b      	add	r3, r1
 8007b28:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d104      	bne.n	8007b3c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007b32:	6839      	ldr	r1, [r7, #0]
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 fb68 	bl	800820a <USBD_CtlError>
                  break;
 8007b3a:	e041      	b.n	8007bc0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	da0b      	bge.n	8007b5c <USBD_StdEPReq+0x240>
 8007b44:	7bbb      	ldrb	r3, [r7, #14]
 8007b46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	4413      	add	r3, r2
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	3310      	adds	r3, #16
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	4413      	add	r3, r2
 8007b58:	3304      	adds	r3, #4
 8007b5a:	e00b      	b.n	8007b74 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b5c:	7bbb      	ldrb	r3, [r7, #14]
 8007b5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b62:	4613      	mov	r3, r2
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	4413      	add	r3, r2
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	4413      	add	r3, r2
 8007b72:	3304      	adds	r3, #4
 8007b74:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007b76:	7bbb      	ldrb	r3, [r7, #14]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d002      	beq.n	8007b82 <USBD_StdEPReq+0x266>
 8007b7c:	7bbb      	ldrb	r3, [r7, #14]
 8007b7e:	2b80      	cmp	r3, #128	; 0x80
 8007b80:	d103      	bne.n	8007b8a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	2200      	movs	r2, #0
 8007b86:	601a      	str	r2, [r3, #0]
 8007b88:	e00e      	b.n	8007ba8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007b8a:	7bbb      	ldrb	r3, [r7, #14]
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 ffd6 	bl	8008b40 <USBD_LL_IsStallEP>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d003      	beq.n	8007ba2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	601a      	str	r2, [r3, #0]
 8007ba0:	e002      	b.n	8007ba8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	2202      	movs	r2, #2
 8007bac:	4619      	mov	r1, r3
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 fb95 	bl	80082de <USBD_CtlSendData>
              break;
 8007bb4:	e004      	b.n	8007bc0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007bb6:	6839      	ldr	r1, [r7, #0]
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 fb26 	bl	800820a <USBD_CtlError>
              break;
 8007bbe:	bf00      	nop
          }
          break;
 8007bc0:	e004      	b.n	8007bcc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007bc2:	6839      	ldr	r1, [r7, #0]
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 fb20 	bl	800820a <USBD_CtlError>
          break;
 8007bca:	bf00      	nop
      }
      break;
 8007bcc:	e004      	b.n	8007bd8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007bce:	6839      	ldr	r1, [r7, #0]
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 fb1a 	bl	800820a <USBD_CtlError>
      break;
 8007bd6:	bf00      	nop
  }

  return ret;
 8007bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3710      	adds	r7, #16
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
	...

08007be4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	885b      	ldrh	r3, [r3, #2]
 8007bfe:	0a1b      	lsrs	r3, r3, #8
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	3b01      	subs	r3, #1
 8007c04:	2b06      	cmp	r3, #6
 8007c06:	f200 8128 	bhi.w	8007e5a <USBD_GetDescriptor+0x276>
 8007c0a:	a201      	add	r2, pc, #4	; (adr r2, 8007c10 <USBD_GetDescriptor+0x2c>)
 8007c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c10:	08007c2d 	.word	0x08007c2d
 8007c14:	08007c45 	.word	0x08007c45
 8007c18:	08007c85 	.word	0x08007c85
 8007c1c:	08007e5b 	.word	0x08007e5b
 8007c20:	08007e5b 	.word	0x08007e5b
 8007c24:	08007dfb 	.word	0x08007dfb
 8007c28:	08007e27 	.word	0x08007e27
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	7c12      	ldrb	r2, [r2, #16]
 8007c38:	f107 0108 	add.w	r1, r7, #8
 8007c3c:	4610      	mov	r0, r2
 8007c3e:	4798      	blx	r3
 8007c40:	60f8      	str	r0, [r7, #12]
      break;
 8007c42:	e112      	b.n	8007e6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	7c1b      	ldrb	r3, [r3, #16]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d10d      	bne.n	8007c68 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c54:	f107 0208 	add.w	r2, r7, #8
 8007c58:	4610      	mov	r0, r2
 8007c5a:	4798      	blx	r3
 8007c5c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	3301      	adds	r3, #1
 8007c62:	2202      	movs	r2, #2
 8007c64:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007c66:	e100      	b.n	8007e6a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c70:	f107 0208 	add.w	r2, r7, #8
 8007c74:	4610      	mov	r0, r2
 8007c76:	4798      	blx	r3
 8007c78:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	2202      	movs	r2, #2
 8007c80:	701a      	strb	r2, [r3, #0]
      break;
 8007c82:	e0f2      	b.n	8007e6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	885b      	ldrh	r3, [r3, #2]
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	2b05      	cmp	r3, #5
 8007c8c:	f200 80ac 	bhi.w	8007de8 <USBD_GetDescriptor+0x204>
 8007c90:	a201      	add	r2, pc, #4	; (adr r2, 8007c98 <USBD_GetDescriptor+0xb4>)
 8007c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c96:	bf00      	nop
 8007c98:	08007cb1 	.word	0x08007cb1
 8007c9c:	08007ce5 	.word	0x08007ce5
 8007ca0:	08007d19 	.word	0x08007d19
 8007ca4:	08007d4d 	.word	0x08007d4d
 8007ca8:	08007d81 	.word	0x08007d81
 8007cac:	08007db5 	.word	0x08007db5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d00b      	beq.n	8007cd4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	7c12      	ldrb	r2, [r2, #16]
 8007cc8:	f107 0108 	add.w	r1, r7, #8
 8007ccc:	4610      	mov	r0, r2
 8007cce:	4798      	blx	r3
 8007cd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cd2:	e091      	b.n	8007df8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cd4:	6839      	ldr	r1, [r7, #0]
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 fa97 	bl	800820a <USBD_CtlError>
            err++;
 8007cdc:	7afb      	ldrb	r3, [r7, #11]
 8007cde:	3301      	adds	r3, #1
 8007ce0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ce2:	e089      	b.n	8007df8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00b      	beq.n	8007d08 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	7c12      	ldrb	r2, [r2, #16]
 8007cfc:	f107 0108 	add.w	r1, r7, #8
 8007d00:	4610      	mov	r0, r2
 8007d02:	4798      	blx	r3
 8007d04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d06:	e077      	b.n	8007df8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d08:	6839      	ldr	r1, [r7, #0]
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 fa7d 	bl	800820a <USBD_CtlError>
            err++;
 8007d10:	7afb      	ldrb	r3, [r7, #11]
 8007d12:	3301      	adds	r3, #1
 8007d14:	72fb      	strb	r3, [r7, #11]
          break;
 8007d16:	e06f      	b.n	8007df8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d00b      	beq.n	8007d3c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	7c12      	ldrb	r2, [r2, #16]
 8007d30:	f107 0108 	add.w	r1, r7, #8
 8007d34:	4610      	mov	r0, r2
 8007d36:	4798      	blx	r3
 8007d38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d3a:	e05d      	b.n	8007df8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d3c:	6839      	ldr	r1, [r7, #0]
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 fa63 	bl	800820a <USBD_CtlError>
            err++;
 8007d44:	7afb      	ldrb	r3, [r7, #11]
 8007d46:	3301      	adds	r3, #1
 8007d48:	72fb      	strb	r3, [r7, #11]
          break;
 8007d4a:	e055      	b.n	8007df8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d00b      	beq.n	8007d70 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d5e:	691b      	ldr	r3, [r3, #16]
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	7c12      	ldrb	r2, [r2, #16]
 8007d64:	f107 0108 	add.w	r1, r7, #8
 8007d68:	4610      	mov	r0, r2
 8007d6a:	4798      	blx	r3
 8007d6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d6e:	e043      	b.n	8007df8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d70:	6839      	ldr	r1, [r7, #0]
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 fa49 	bl	800820a <USBD_CtlError>
            err++;
 8007d78:	7afb      	ldrb	r3, [r7, #11]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	72fb      	strb	r3, [r7, #11]
          break;
 8007d7e:	e03b      	b.n	8007df8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d86:	695b      	ldr	r3, [r3, #20]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d00b      	beq.n	8007da4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d92:	695b      	ldr	r3, [r3, #20]
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	7c12      	ldrb	r2, [r2, #16]
 8007d98:	f107 0108 	add.w	r1, r7, #8
 8007d9c:	4610      	mov	r0, r2
 8007d9e:	4798      	blx	r3
 8007da0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007da2:	e029      	b.n	8007df8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007da4:	6839      	ldr	r1, [r7, #0]
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 fa2f 	bl	800820a <USBD_CtlError>
            err++;
 8007dac:	7afb      	ldrb	r3, [r7, #11]
 8007dae:	3301      	adds	r3, #1
 8007db0:	72fb      	strb	r3, [r7, #11]
          break;
 8007db2:	e021      	b.n	8007df8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007dba:	699b      	ldr	r3, [r3, #24]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d00b      	beq.n	8007dd8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007dc6:	699b      	ldr	r3, [r3, #24]
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	7c12      	ldrb	r2, [r2, #16]
 8007dcc:	f107 0108 	add.w	r1, r7, #8
 8007dd0:	4610      	mov	r0, r2
 8007dd2:	4798      	blx	r3
 8007dd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dd6:	e00f      	b.n	8007df8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007dd8:	6839      	ldr	r1, [r7, #0]
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 fa15 	bl	800820a <USBD_CtlError>
            err++;
 8007de0:	7afb      	ldrb	r3, [r7, #11]
 8007de2:	3301      	adds	r3, #1
 8007de4:	72fb      	strb	r3, [r7, #11]
          break;
 8007de6:	e007      	b.n	8007df8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007de8:	6839      	ldr	r1, [r7, #0]
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 fa0d 	bl	800820a <USBD_CtlError>
          err++;
 8007df0:	7afb      	ldrb	r3, [r7, #11]
 8007df2:	3301      	adds	r3, #1
 8007df4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007df6:	e038      	b.n	8007e6a <USBD_GetDescriptor+0x286>
 8007df8:	e037      	b.n	8007e6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	7c1b      	ldrb	r3, [r3, #16]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d109      	bne.n	8007e16 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e0a:	f107 0208 	add.w	r2, r7, #8
 8007e0e:	4610      	mov	r0, r2
 8007e10:	4798      	blx	r3
 8007e12:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e14:	e029      	b.n	8007e6a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007e16:	6839      	ldr	r1, [r7, #0]
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 f9f6 	bl	800820a <USBD_CtlError>
        err++;
 8007e1e:	7afb      	ldrb	r3, [r7, #11]
 8007e20:	3301      	adds	r3, #1
 8007e22:	72fb      	strb	r3, [r7, #11]
      break;
 8007e24:	e021      	b.n	8007e6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	7c1b      	ldrb	r3, [r3, #16]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d10d      	bne.n	8007e4a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e36:	f107 0208 	add.w	r2, r7, #8
 8007e3a:	4610      	mov	r0, r2
 8007e3c:	4798      	blx	r3
 8007e3e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	3301      	adds	r3, #1
 8007e44:	2207      	movs	r2, #7
 8007e46:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e48:	e00f      	b.n	8007e6a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007e4a:	6839      	ldr	r1, [r7, #0]
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 f9dc 	bl	800820a <USBD_CtlError>
        err++;
 8007e52:	7afb      	ldrb	r3, [r7, #11]
 8007e54:	3301      	adds	r3, #1
 8007e56:	72fb      	strb	r3, [r7, #11]
      break;
 8007e58:	e007      	b.n	8007e6a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007e5a:	6839      	ldr	r1, [r7, #0]
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 f9d4 	bl	800820a <USBD_CtlError>
      err++;
 8007e62:	7afb      	ldrb	r3, [r7, #11]
 8007e64:	3301      	adds	r3, #1
 8007e66:	72fb      	strb	r3, [r7, #11]
      break;
 8007e68:	bf00      	nop
  }

  if (err != 0U)
 8007e6a:	7afb      	ldrb	r3, [r7, #11]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d11c      	bne.n	8007eaa <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007e70:	893b      	ldrh	r3, [r7, #8]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d011      	beq.n	8007e9a <USBD_GetDescriptor+0x2b6>
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	88db      	ldrh	r3, [r3, #6]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00d      	beq.n	8007e9a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	88da      	ldrh	r2, [r3, #6]
 8007e82:	893b      	ldrh	r3, [r7, #8]
 8007e84:	4293      	cmp	r3, r2
 8007e86:	bf28      	it	cs
 8007e88:	4613      	movcs	r3, r2
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007e8e:	893b      	ldrh	r3, [r7, #8]
 8007e90:	461a      	mov	r2, r3
 8007e92:	68f9      	ldr	r1, [r7, #12]
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 fa22 	bl	80082de <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	88db      	ldrh	r3, [r3, #6]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d104      	bne.n	8007eac <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 fa79 	bl	800839a <USBD_CtlSendStatus>
 8007ea8:	e000      	b.n	8007eac <USBD_GetDescriptor+0x2c8>
    return;
 8007eaa:	bf00      	nop
    }
  }
}
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
 8007eb2:	bf00      	nop

08007eb4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	889b      	ldrh	r3, [r3, #4]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d130      	bne.n	8007f28 <USBD_SetAddress+0x74>
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	88db      	ldrh	r3, [r3, #6]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d12c      	bne.n	8007f28 <USBD_SetAddress+0x74>
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	885b      	ldrh	r3, [r3, #2]
 8007ed2:	2b7f      	cmp	r3, #127	; 0x7f
 8007ed4:	d828      	bhi.n	8007f28 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	885b      	ldrh	r3, [r3, #2]
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ee0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ee8:	2b03      	cmp	r3, #3
 8007eea:	d104      	bne.n	8007ef6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007eec:	6839      	ldr	r1, [r7, #0]
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 f98b 	bl	800820a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ef4:	e01d      	b.n	8007f32 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	7bfa      	ldrb	r2, [r7, #15]
 8007efa:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007efe:	7bfb      	ldrb	r3, [r7, #15]
 8007f00:	4619      	mov	r1, r3
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fe48 	bl	8008b98 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 fa46 	bl	800839a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007f0e:	7bfb      	ldrb	r3, [r7, #15]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d004      	beq.n	8007f1e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2202      	movs	r2, #2
 8007f18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f1c:	e009      	b.n	8007f32 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2201      	movs	r2, #1
 8007f22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f26:	e004      	b.n	8007f32 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007f28:	6839      	ldr	r1, [r7, #0]
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 f96d 	bl	800820a <USBD_CtlError>
  }
}
 8007f30:	bf00      	nop
 8007f32:	bf00      	nop
 8007f34:	3710      	adds	r7, #16
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
	...

08007f3c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b082      	sub	sp, #8
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	885b      	ldrh	r3, [r3, #2]
 8007f4a:	b2da      	uxtb	r2, r3
 8007f4c:	4b41      	ldr	r3, [pc, #260]	; (8008054 <USBD_SetConfig+0x118>)
 8007f4e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007f50:	4b40      	ldr	r3, [pc, #256]	; (8008054 <USBD_SetConfig+0x118>)
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d904      	bls.n	8007f62 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007f58:	6839      	ldr	r1, [r7, #0]
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 f955 	bl	800820a <USBD_CtlError>
 8007f60:	e075      	b.n	800804e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f68:	2b02      	cmp	r3, #2
 8007f6a:	d002      	beq.n	8007f72 <USBD_SetConfig+0x36>
 8007f6c:	2b03      	cmp	r3, #3
 8007f6e:	d023      	beq.n	8007fb8 <USBD_SetConfig+0x7c>
 8007f70:	e062      	b.n	8008038 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007f72:	4b38      	ldr	r3, [pc, #224]	; (8008054 <USBD_SetConfig+0x118>)
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d01a      	beq.n	8007fb0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007f7a:	4b36      	ldr	r3, [pc, #216]	; (8008054 <USBD_SetConfig+0x118>)
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	461a      	mov	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2203      	movs	r2, #3
 8007f88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007f8c:	4b31      	ldr	r3, [pc, #196]	; (8008054 <USBD_SetConfig+0x118>)
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	4619      	mov	r1, r3
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f7ff f9e7 	bl	8007366 <USBD_SetClassConfig>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b02      	cmp	r3, #2
 8007f9c:	d104      	bne.n	8007fa8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007f9e:	6839      	ldr	r1, [r7, #0]
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 f932 	bl	800820a <USBD_CtlError>
            return;
 8007fa6:	e052      	b.n	800804e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 f9f6 	bl	800839a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007fae:	e04e      	b.n	800804e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 f9f2 	bl	800839a <USBD_CtlSendStatus>
        break;
 8007fb6:	e04a      	b.n	800804e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007fb8:	4b26      	ldr	r3, [pc, #152]	; (8008054 <USBD_SetConfig+0x118>)
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d112      	bne.n	8007fe6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2202      	movs	r2, #2
 8007fc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007fc8:	4b22      	ldr	r3, [pc, #136]	; (8008054 <USBD_SetConfig+0x118>)
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	461a      	mov	r2, r3
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007fd2:	4b20      	ldr	r3, [pc, #128]	; (8008054 <USBD_SetConfig+0x118>)
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f7ff f9e3 	bl	80073a4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 f9db 	bl	800839a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007fe4:	e033      	b.n	800804e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007fe6:	4b1b      	ldr	r3, [pc, #108]	; (8008054 <USBD_SetConfig+0x118>)
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	461a      	mov	r2, r3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d01d      	beq.n	8008030 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f7ff f9d1 	bl	80073a4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008002:	4b14      	ldr	r3, [pc, #80]	; (8008054 <USBD_SetConfig+0x118>)
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	461a      	mov	r2, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800800c:	4b11      	ldr	r3, [pc, #68]	; (8008054 <USBD_SetConfig+0x118>)
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	4619      	mov	r1, r3
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f7ff f9a7 	bl	8007366 <USBD_SetClassConfig>
 8008018:	4603      	mov	r3, r0
 800801a:	2b02      	cmp	r3, #2
 800801c:	d104      	bne.n	8008028 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800801e:	6839      	ldr	r1, [r7, #0]
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 f8f2 	bl	800820a <USBD_CtlError>
            return;
 8008026:	e012      	b.n	800804e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 f9b6 	bl	800839a <USBD_CtlSendStatus>
        break;
 800802e:	e00e      	b.n	800804e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 f9b2 	bl	800839a <USBD_CtlSendStatus>
        break;
 8008036:	e00a      	b.n	800804e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008038:	6839      	ldr	r1, [r7, #0]
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 f8e5 	bl	800820a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008040:	4b04      	ldr	r3, [pc, #16]	; (8008054 <USBD_SetConfig+0x118>)
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	4619      	mov	r1, r3
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f7ff f9ac 	bl	80073a4 <USBD_ClrClassConfig>
        break;
 800804c:	bf00      	nop
    }
  }
}
 800804e:	3708      	adds	r7, #8
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}
 8008054:	20000750 	.word	0x20000750

08008058 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	88db      	ldrh	r3, [r3, #6]
 8008066:	2b01      	cmp	r3, #1
 8008068:	d004      	beq.n	8008074 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800806a:	6839      	ldr	r1, [r7, #0]
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 f8cc 	bl	800820a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008072:	e022      	b.n	80080ba <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800807a:	2b02      	cmp	r3, #2
 800807c:	dc02      	bgt.n	8008084 <USBD_GetConfig+0x2c>
 800807e:	2b00      	cmp	r3, #0
 8008080:	dc03      	bgt.n	800808a <USBD_GetConfig+0x32>
 8008082:	e015      	b.n	80080b0 <USBD_GetConfig+0x58>
 8008084:	2b03      	cmp	r3, #3
 8008086:	d00b      	beq.n	80080a0 <USBD_GetConfig+0x48>
 8008088:	e012      	b.n	80080b0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	3308      	adds	r3, #8
 8008094:	2201      	movs	r2, #1
 8008096:	4619      	mov	r1, r3
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 f920 	bl	80082de <USBD_CtlSendData>
        break;
 800809e:	e00c      	b.n	80080ba <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	3304      	adds	r3, #4
 80080a4:	2201      	movs	r2, #1
 80080a6:	4619      	mov	r1, r3
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 f918 	bl	80082de <USBD_CtlSendData>
        break;
 80080ae:	e004      	b.n	80080ba <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80080b0:	6839      	ldr	r1, [r7, #0]
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 f8a9 	bl	800820a <USBD_CtlError>
        break;
 80080b8:	bf00      	nop
}
 80080ba:	bf00      	nop
 80080bc:	3708      	adds	r7, #8
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080c2:	b580      	push	{r7, lr}
 80080c4:	b082      	sub	sp, #8
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
 80080ca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080d2:	3b01      	subs	r3, #1
 80080d4:	2b02      	cmp	r3, #2
 80080d6:	d81e      	bhi.n	8008116 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	88db      	ldrh	r3, [r3, #6]
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d004      	beq.n	80080ea <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80080e0:	6839      	ldr	r1, [r7, #0]
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 f891 	bl	800820a <USBD_CtlError>
        break;
 80080e8:	e01a      	b.n	8008120 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2201      	movs	r2, #1
 80080ee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d005      	beq.n	8008106 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	f043 0202 	orr.w	r2, r3, #2
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	330c      	adds	r3, #12
 800810a:	2202      	movs	r2, #2
 800810c:	4619      	mov	r1, r3
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 f8e5 	bl	80082de <USBD_CtlSendData>
      break;
 8008114:	e004      	b.n	8008120 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008116:	6839      	ldr	r1, [r7, #0]
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 f876 	bl	800820a <USBD_CtlError>
      break;
 800811e:	bf00      	nop
  }
}
 8008120:	bf00      	nop
 8008122:	3708      	adds	r7, #8
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	885b      	ldrh	r3, [r3, #2]
 8008136:	2b01      	cmp	r3, #1
 8008138:	d106      	bne.n	8008148 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2201      	movs	r2, #1
 800813e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 f929 	bl	800839a <USBD_CtlSendStatus>
  }
}
 8008148:	bf00      	nop
 800814a:	3708      	adds	r7, #8
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008160:	3b01      	subs	r3, #1
 8008162:	2b02      	cmp	r3, #2
 8008164:	d80b      	bhi.n	800817e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	885b      	ldrh	r3, [r3, #2]
 800816a:	2b01      	cmp	r3, #1
 800816c:	d10c      	bne.n	8008188 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f90f 	bl	800839a <USBD_CtlSendStatus>
      }
      break;
 800817c:	e004      	b.n	8008188 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800817e:	6839      	ldr	r1, [r7, #0]
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 f842 	bl	800820a <USBD_CtlError>
      break;
 8008186:	e000      	b.n	800818a <USBD_ClrFeature+0x3a>
      break;
 8008188:	bf00      	nop
  }
}
 800818a:	bf00      	nop
 800818c:	3708      	adds	r7, #8
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}

08008192 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008192:	b480      	push	{r7}
 8008194:	b083      	sub	sp, #12
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
 800819a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	781a      	ldrb	r2, [r3, #0]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	785a      	ldrb	r2, [r3, #1]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	3302      	adds	r3, #2
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	b29a      	uxth	r2, r3
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	3303      	adds	r3, #3
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	021b      	lsls	r3, r3, #8
 80081be:	b29b      	uxth	r3, r3
 80081c0:	4413      	add	r3, r2
 80081c2:	b29a      	uxth	r2, r3
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	3304      	adds	r3, #4
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	b29a      	uxth	r2, r3
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	3305      	adds	r3, #5
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	021b      	lsls	r3, r3, #8
 80081da:	b29b      	uxth	r3, r3
 80081dc:	4413      	add	r3, r2
 80081de:	b29a      	uxth	r2, r3
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	3306      	adds	r3, #6
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	b29a      	uxth	r2, r3
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	3307      	adds	r3, #7
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	021b      	lsls	r3, r3, #8
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	4413      	add	r3, r2
 80081fa:	b29a      	uxth	r2, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	80da      	strh	r2, [r3, #6]

}
 8008200:	bf00      	nop
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	bc80      	pop	{r7}
 8008208:	4770      	bx	lr

0800820a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800820a:	b580      	push	{r7, lr}
 800820c:	b082      	sub	sp, #8
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
 8008212:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008214:	2180      	movs	r1, #128	; 0x80
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 fc54 	bl	8008ac4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800821c:	2100      	movs	r1, #0
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 fc50 	bl	8008ac4 <USBD_LL_StallEP>
}
 8008224:	bf00      	nop
 8008226:	3708      	adds	r7, #8
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b086      	sub	sp, #24
 8008230:	af00      	add	r7, sp, #0
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	60b9      	str	r1, [r7, #8]
 8008236:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008238:	2300      	movs	r3, #0
 800823a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d032      	beq.n	80082a8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008242:	68f8      	ldr	r0, [r7, #12]
 8008244:	f000 f834 	bl	80082b0 <USBD_GetLen>
 8008248:	4603      	mov	r3, r0
 800824a:	3301      	adds	r3, #1
 800824c:	b29b      	uxth	r3, r3
 800824e:	005b      	lsls	r3, r3, #1
 8008250:	b29a      	uxth	r2, r3
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008256:	7dfb      	ldrb	r3, [r7, #23]
 8008258:	1c5a      	adds	r2, r3, #1
 800825a:	75fa      	strb	r2, [r7, #23]
 800825c:	461a      	mov	r2, r3
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	4413      	add	r3, r2
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	7812      	ldrb	r2, [r2, #0]
 8008266:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008268:	7dfb      	ldrb	r3, [r7, #23]
 800826a:	1c5a      	adds	r2, r3, #1
 800826c:	75fa      	strb	r2, [r7, #23]
 800826e:	461a      	mov	r2, r3
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	4413      	add	r3, r2
 8008274:	2203      	movs	r2, #3
 8008276:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008278:	e012      	b.n	80082a0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	1c5a      	adds	r2, r3, #1
 800827e:	60fa      	str	r2, [r7, #12]
 8008280:	7dfa      	ldrb	r2, [r7, #23]
 8008282:	1c51      	adds	r1, r2, #1
 8008284:	75f9      	strb	r1, [r7, #23]
 8008286:	4611      	mov	r1, r2
 8008288:	68ba      	ldr	r2, [r7, #8]
 800828a:	440a      	add	r2, r1
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008290:	7dfb      	ldrb	r3, [r7, #23]
 8008292:	1c5a      	adds	r2, r3, #1
 8008294:	75fa      	strb	r2, [r7, #23]
 8008296:	461a      	mov	r2, r3
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	4413      	add	r3, r2
 800829c:	2200      	movs	r2, #0
 800829e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d1e8      	bne.n	800827a <USBD_GetString+0x4e>
    }
  }
}
 80082a8:	bf00      	nop
 80082aa:	3718      	adds	r7, #24
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b085      	sub	sp, #20
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80082b8:	2300      	movs	r3, #0
 80082ba:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80082bc:	e005      	b.n	80082ca <USBD_GetLen+0x1a>
  {
    len++;
 80082be:	7bfb      	ldrb	r3, [r7, #15]
 80082c0:	3301      	adds	r3, #1
 80082c2:	73fb      	strb	r3, [r7, #15]
    buf++;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	3301      	adds	r3, #1
 80082c8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d1f5      	bne.n	80082be <USBD_GetLen+0xe>
  }

  return len;
 80082d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3714      	adds	r7, #20
 80082d8:	46bd      	mov	sp, r7
 80082da:	bc80      	pop	{r7}
 80082dc:	4770      	bx	lr

080082de <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b084      	sub	sp, #16
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	60f8      	str	r0, [r7, #12]
 80082e6:	60b9      	str	r1, [r7, #8]
 80082e8:	4613      	mov	r3, r2
 80082ea:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2202      	movs	r2, #2
 80082f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80082f4:	88fa      	ldrh	r2, [r7, #6]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80082fa:	88fa      	ldrh	r2, [r7, #6]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008300:	88fb      	ldrh	r3, [r7, #6]
 8008302:	68ba      	ldr	r2, [r7, #8]
 8008304:	2100      	movs	r1, #0
 8008306:	68f8      	ldr	r0, [r7, #12]
 8008308:	f000 fc65 	bl	8008bd6 <USBD_LL_Transmit>

  return USBD_OK;
 800830c:	2300      	movs	r3, #0
}
 800830e:	4618      	mov	r0, r3
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008316:	b580      	push	{r7, lr}
 8008318:	b084      	sub	sp, #16
 800831a:	af00      	add	r7, sp, #0
 800831c:	60f8      	str	r0, [r7, #12]
 800831e:	60b9      	str	r1, [r7, #8]
 8008320:	4613      	mov	r3, r2
 8008322:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008324:	88fb      	ldrh	r3, [r7, #6]
 8008326:	68ba      	ldr	r2, [r7, #8]
 8008328:	2100      	movs	r1, #0
 800832a:	68f8      	ldr	r0, [r7, #12]
 800832c:	f000 fc53 	bl	8008bd6 <USBD_LL_Transmit>

  return USBD_OK;
 8008330:	2300      	movs	r3, #0
}
 8008332:	4618      	mov	r0, r3
 8008334:	3710      	adds	r7, #16
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}

0800833a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800833a:	b580      	push	{r7, lr}
 800833c:	b084      	sub	sp, #16
 800833e:	af00      	add	r7, sp, #0
 8008340:	60f8      	str	r0, [r7, #12]
 8008342:	60b9      	str	r1, [r7, #8]
 8008344:	4613      	mov	r3, r2
 8008346:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2203      	movs	r2, #3
 800834c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008350:	88fa      	ldrh	r2, [r7, #6]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008358:	88fa      	ldrh	r2, [r7, #6]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008360:	88fb      	ldrh	r3, [r7, #6]
 8008362:	68ba      	ldr	r2, [r7, #8]
 8008364:	2100      	movs	r1, #0
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	f000 fc58 	bl	8008c1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008376:	b580      	push	{r7, lr}
 8008378:	b084      	sub	sp, #16
 800837a:	af00      	add	r7, sp, #0
 800837c:	60f8      	str	r0, [r7, #12]
 800837e:	60b9      	str	r1, [r7, #8]
 8008380:	4613      	mov	r3, r2
 8008382:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008384:	88fb      	ldrh	r3, [r7, #6]
 8008386:	68ba      	ldr	r2, [r7, #8]
 8008388:	2100      	movs	r1, #0
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f000 fc46 	bl	8008c1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008390:	2300      	movs	r3, #0
}
 8008392:	4618      	mov	r0, r3
 8008394:	3710      	adds	r7, #16
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800839a:	b580      	push	{r7, lr}
 800839c:	b082      	sub	sp, #8
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2204      	movs	r2, #4
 80083a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80083aa:	2300      	movs	r3, #0
 80083ac:	2200      	movs	r2, #0
 80083ae:	2100      	movs	r1, #0
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f000 fc10 	bl	8008bd6 <USBD_LL_Transmit>

  return USBD_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3708      	adds	r7, #8
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2205      	movs	r2, #5
 80083cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083d0:	2300      	movs	r3, #0
 80083d2:	2200      	movs	r2, #0
 80083d4:	2100      	movs	r1, #0
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 fc20 	bl	8008c1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083dc:	2300      	movs	r3, #0
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3708      	adds	r7, #8
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
	...

080083e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80083ec:	2200      	movs	r2, #0
 80083ee:	4912      	ldr	r1, [pc, #72]	; (8008438 <MX_USB_DEVICE_Init+0x50>)
 80083f0:	4812      	ldr	r0, [pc, #72]	; (800843c <MX_USB_DEVICE_Init+0x54>)
 80083f2:	f7fe ff5e 	bl	80072b2 <USBD_Init>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d001      	beq.n	8008400 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80083fc:	f7f8 fd20 	bl	8000e40 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008400:	490f      	ldr	r1, [pc, #60]	; (8008440 <MX_USB_DEVICE_Init+0x58>)
 8008402:	480e      	ldr	r0, [pc, #56]	; (800843c <MX_USB_DEVICE_Init+0x54>)
 8008404:	f7fe ff80 	bl	8007308 <USBD_RegisterClass>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d001      	beq.n	8008412 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800840e:	f7f8 fd17 	bl	8000e40 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008412:	490c      	ldr	r1, [pc, #48]	; (8008444 <MX_USB_DEVICE_Init+0x5c>)
 8008414:	4809      	ldr	r0, [pc, #36]	; (800843c <MX_USB_DEVICE_Init+0x54>)
 8008416:	f7fe feb1 	bl	800717c <USBD_CDC_RegisterInterface>
 800841a:	4603      	mov	r3, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d001      	beq.n	8008424 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008420:	f7f8 fd0e 	bl	8000e40 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008424:	4805      	ldr	r0, [pc, #20]	; (800843c <MX_USB_DEVICE_Init+0x54>)
 8008426:	f7fe ff88 	bl	800733a <USBD_Start>
 800842a:	4603      	mov	r3, r0
 800842c:	2b00      	cmp	r3, #0
 800842e:	d001      	beq.n	8008434 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008430:	f7f8 fd06 	bl	8000e40 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008434:	bf00      	nop
 8008436:	bd80      	pop	{r7, pc}
 8008438:	2000012c 	.word	0x2000012c
 800843c:	20000754 	.word	0x20000754
 8008440:	20000018 	.word	0x20000018
 8008444:	2000011c 	.word	0x2000011c

08008448 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800844c:	2200      	movs	r2, #0
 800844e:	4905      	ldr	r1, [pc, #20]	; (8008464 <CDC_Init_FS+0x1c>)
 8008450:	4805      	ldr	r0, [pc, #20]	; (8008468 <CDC_Init_FS+0x20>)
 8008452:	f7fe fea9 	bl	80071a8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008456:	4905      	ldr	r1, [pc, #20]	; (800846c <CDC_Init_FS+0x24>)
 8008458:	4803      	ldr	r0, [pc, #12]	; (8008468 <CDC_Init_FS+0x20>)
 800845a:	f7fe febe 	bl	80071da <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800845e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008460:	4618      	mov	r0, r3
 8008462:	bd80      	pop	{r7, pc}
 8008464:	20000e18 	.word	0x20000e18
 8008468:	20000754 	.word	0x20000754
 800846c:	20000a18 	.word	0x20000a18

08008470 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008470:	b480      	push	{r7}
 8008472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008474:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008476:	4618      	mov	r0, r3
 8008478:	46bd      	mov	sp, r7
 800847a:	bc80      	pop	{r7}
 800847c:	4770      	bx	lr
	...

08008480 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008480:	b480      	push	{r7}
 8008482:	b083      	sub	sp, #12
 8008484:	af00      	add	r7, sp, #0
 8008486:	4603      	mov	r3, r0
 8008488:	6039      	str	r1, [r7, #0]
 800848a:	71fb      	strb	r3, [r7, #7]
 800848c:	4613      	mov	r3, r2
 800848e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008490:	79fb      	ldrb	r3, [r7, #7]
 8008492:	2b23      	cmp	r3, #35	; 0x23
 8008494:	d84a      	bhi.n	800852c <CDC_Control_FS+0xac>
 8008496:	a201      	add	r2, pc, #4	; (adr r2, 800849c <CDC_Control_FS+0x1c>)
 8008498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800849c:	0800852d 	.word	0x0800852d
 80084a0:	0800852d 	.word	0x0800852d
 80084a4:	0800852d 	.word	0x0800852d
 80084a8:	0800852d 	.word	0x0800852d
 80084ac:	0800852d 	.word	0x0800852d
 80084b0:	0800852d 	.word	0x0800852d
 80084b4:	0800852d 	.word	0x0800852d
 80084b8:	0800852d 	.word	0x0800852d
 80084bc:	0800852d 	.word	0x0800852d
 80084c0:	0800852d 	.word	0x0800852d
 80084c4:	0800852d 	.word	0x0800852d
 80084c8:	0800852d 	.word	0x0800852d
 80084cc:	0800852d 	.word	0x0800852d
 80084d0:	0800852d 	.word	0x0800852d
 80084d4:	0800852d 	.word	0x0800852d
 80084d8:	0800852d 	.word	0x0800852d
 80084dc:	0800852d 	.word	0x0800852d
 80084e0:	0800852d 	.word	0x0800852d
 80084e4:	0800852d 	.word	0x0800852d
 80084e8:	0800852d 	.word	0x0800852d
 80084ec:	0800852d 	.word	0x0800852d
 80084f0:	0800852d 	.word	0x0800852d
 80084f4:	0800852d 	.word	0x0800852d
 80084f8:	0800852d 	.word	0x0800852d
 80084fc:	0800852d 	.word	0x0800852d
 8008500:	0800852d 	.word	0x0800852d
 8008504:	0800852d 	.word	0x0800852d
 8008508:	0800852d 	.word	0x0800852d
 800850c:	0800852d 	.word	0x0800852d
 8008510:	0800852d 	.word	0x0800852d
 8008514:	0800852d 	.word	0x0800852d
 8008518:	0800852d 	.word	0x0800852d
 800851c:	0800852d 	.word	0x0800852d
 8008520:	0800852d 	.word	0x0800852d
 8008524:	0800852d 	.word	0x0800852d
 8008528:	0800852d 	.word	0x0800852d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800852c:	bf00      	nop
  }

  return (USBD_OK);
 800852e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008530:	4618      	mov	r0, r3
 8008532:	370c      	adds	r7, #12
 8008534:	46bd      	mov	sp, r7
 8008536:	bc80      	pop	{r7}
 8008538:	4770      	bx	lr
 800853a:	bf00      	nop

0800853c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008546:	6879      	ldr	r1, [r7, #4]
 8008548:	4805      	ldr	r0, [pc, #20]	; (8008560 <CDC_Receive_FS+0x24>)
 800854a:	f7fe fe46 	bl	80071da <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800854e:	4804      	ldr	r0, [pc, #16]	; (8008560 <CDC_Receive_FS+0x24>)
 8008550:	f7fe fe85 	bl	800725e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008554:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008556:	4618      	mov	r0, r3
 8008558:	3708      	adds	r7, #8
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	20000754 	.word	0x20000754

08008564 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b084      	sub	sp, #16
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	460b      	mov	r3, r1
 800856e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008570:	2300      	movs	r3, #0
 8008572:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008574:	4b0d      	ldr	r3, [pc, #52]	; (80085ac <CDC_Transmit_FS+0x48>)
 8008576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800857a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008582:	2b00      	cmp	r3, #0
 8008584:	d001      	beq.n	800858a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008586:	2301      	movs	r3, #1
 8008588:	e00b      	b.n	80085a2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800858a:	887b      	ldrh	r3, [r7, #2]
 800858c:	461a      	mov	r2, r3
 800858e:	6879      	ldr	r1, [r7, #4]
 8008590:	4806      	ldr	r0, [pc, #24]	; (80085ac <CDC_Transmit_FS+0x48>)
 8008592:	f7fe fe09 	bl	80071a8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008596:	4805      	ldr	r0, [pc, #20]	; (80085ac <CDC_Transmit_FS+0x48>)
 8008598:	f7fe fe32 	bl	8007200 <USBD_CDC_TransmitPacket>
 800859c:	4603      	mov	r3, r0
 800859e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80085a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3710      	adds	r7, #16
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	20000754 	.word	0x20000754

080085b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	4603      	mov	r3, r0
 80085b8:	6039      	str	r1, [r7, #0]
 80085ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	2212      	movs	r2, #18
 80085c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80085c2:	4b03      	ldr	r3, [pc, #12]	; (80085d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bc80      	pop	{r7}
 80085cc:	4770      	bx	lr
 80085ce:	bf00      	nop
 80085d0:	20000148 	.word	0x20000148

080085d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
 80085da:	4603      	mov	r3, r0
 80085dc:	6039      	str	r1, [r7, #0]
 80085de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	2204      	movs	r2, #4
 80085e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80085e6:	4b03      	ldr	r3, [pc, #12]	; (80085f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	370c      	adds	r7, #12
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bc80      	pop	{r7}
 80085f0:	4770      	bx	lr
 80085f2:	bf00      	nop
 80085f4:	2000015c 	.word	0x2000015c

080085f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	4603      	mov	r3, r0
 8008600:	6039      	str	r1, [r7, #0]
 8008602:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008604:	79fb      	ldrb	r3, [r7, #7]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d105      	bne.n	8008616 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800860a:	683a      	ldr	r2, [r7, #0]
 800860c:	4907      	ldr	r1, [pc, #28]	; (800862c <USBD_FS_ProductStrDescriptor+0x34>)
 800860e:	4808      	ldr	r0, [pc, #32]	; (8008630 <USBD_FS_ProductStrDescriptor+0x38>)
 8008610:	f7ff fe0c 	bl	800822c <USBD_GetString>
 8008614:	e004      	b.n	8008620 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008616:	683a      	ldr	r2, [r7, #0]
 8008618:	4904      	ldr	r1, [pc, #16]	; (800862c <USBD_FS_ProductStrDescriptor+0x34>)
 800861a:	4805      	ldr	r0, [pc, #20]	; (8008630 <USBD_FS_ProductStrDescriptor+0x38>)
 800861c:	f7ff fe06 	bl	800822c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008620:	4b02      	ldr	r3, [pc, #8]	; (800862c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008622:	4618      	mov	r0, r3
 8008624:	3708      	adds	r7, #8
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop
 800862c:	20001218 	.word	0x20001218
 8008630:	0800ba20 	.word	0x0800ba20

08008634 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	4603      	mov	r3, r0
 800863c:	6039      	str	r1, [r7, #0]
 800863e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008640:	683a      	ldr	r2, [r7, #0]
 8008642:	4904      	ldr	r1, [pc, #16]	; (8008654 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008644:	4804      	ldr	r0, [pc, #16]	; (8008658 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008646:	f7ff fdf1 	bl	800822c <USBD_GetString>
  return USBD_StrDesc;
 800864a:	4b02      	ldr	r3, [pc, #8]	; (8008654 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800864c:	4618      	mov	r0, r3
 800864e:	3708      	adds	r7, #8
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}
 8008654:	20001218 	.word	0x20001218
 8008658:	0800ba38 	.word	0x0800ba38

0800865c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	4603      	mov	r3, r0
 8008664:	6039      	str	r1, [r7, #0]
 8008666:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	221a      	movs	r2, #26
 800866c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800866e:	f000 f843 	bl	80086f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008672:	4b02      	ldr	r3, [pc, #8]	; (800867c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008674:	4618      	mov	r0, r3
 8008676:	3708      	adds	r7, #8
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}
 800867c:	20000160 	.word	0x20000160

08008680 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	4603      	mov	r3, r0
 8008688:	6039      	str	r1, [r7, #0]
 800868a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800868c:	79fb      	ldrb	r3, [r7, #7]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d105      	bne.n	800869e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008692:	683a      	ldr	r2, [r7, #0]
 8008694:	4907      	ldr	r1, [pc, #28]	; (80086b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008696:	4808      	ldr	r0, [pc, #32]	; (80086b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008698:	f7ff fdc8 	bl	800822c <USBD_GetString>
 800869c:	e004      	b.n	80086a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800869e:	683a      	ldr	r2, [r7, #0]
 80086a0:	4904      	ldr	r1, [pc, #16]	; (80086b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80086a2:	4805      	ldr	r0, [pc, #20]	; (80086b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80086a4:	f7ff fdc2 	bl	800822c <USBD_GetString>
  }
  return USBD_StrDesc;
 80086a8:	4b02      	ldr	r3, [pc, #8]	; (80086b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3708      	adds	r7, #8
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	20001218 	.word	0x20001218
 80086b8:	0800ba4c 	.word	0x0800ba4c

080086bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	4603      	mov	r3, r0
 80086c4:	6039      	str	r1, [r7, #0]
 80086c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80086c8:	79fb      	ldrb	r3, [r7, #7]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d105      	bne.n	80086da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80086ce:	683a      	ldr	r2, [r7, #0]
 80086d0:	4907      	ldr	r1, [pc, #28]	; (80086f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80086d2:	4808      	ldr	r0, [pc, #32]	; (80086f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80086d4:	f7ff fdaa 	bl	800822c <USBD_GetString>
 80086d8:	e004      	b.n	80086e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80086da:	683a      	ldr	r2, [r7, #0]
 80086dc:	4904      	ldr	r1, [pc, #16]	; (80086f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80086de:	4805      	ldr	r0, [pc, #20]	; (80086f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80086e0:	f7ff fda4 	bl	800822c <USBD_GetString>
  }
  return USBD_StrDesc;
 80086e4:	4b02      	ldr	r3, [pc, #8]	; (80086f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3708      	adds	r7, #8
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	20001218 	.word	0x20001218
 80086f4:	0800ba58 	.word	0x0800ba58

080086f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80086fe:	4b0f      	ldr	r3, [pc, #60]	; (800873c <Get_SerialNum+0x44>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008704:	4b0e      	ldr	r3, [pc, #56]	; (8008740 <Get_SerialNum+0x48>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800870a:	4b0e      	ldr	r3, [pc, #56]	; (8008744 <Get_SerialNum+0x4c>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008710:	68fa      	ldr	r2, [r7, #12]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4413      	add	r3, r2
 8008716:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d009      	beq.n	8008732 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800871e:	2208      	movs	r2, #8
 8008720:	4909      	ldr	r1, [pc, #36]	; (8008748 <Get_SerialNum+0x50>)
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	f000 f814 	bl	8008750 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008728:	2204      	movs	r2, #4
 800872a:	4908      	ldr	r1, [pc, #32]	; (800874c <Get_SerialNum+0x54>)
 800872c:	68b8      	ldr	r0, [r7, #8]
 800872e:	f000 f80f 	bl	8008750 <IntToUnicode>
  }
}
 8008732:	bf00      	nop
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	1ffff7e8 	.word	0x1ffff7e8
 8008740:	1ffff7ec 	.word	0x1ffff7ec
 8008744:	1ffff7f0 	.word	0x1ffff7f0
 8008748:	20000162 	.word	0x20000162
 800874c:	20000172 	.word	0x20000172

08008750 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008750:	b480      	push	{r7}
 8008752:	b087      	sub	sp, #28
 8008754:	af00      	add	r7, sp, #0
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	60b9      	str	r1, [r7, #8]
 800875a:	4613      	mov	r3, r2
 800875c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800875e:	2300      	movs	r3, #0
 8008760:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008762:	2300      	movs	r3, #0
 8008764:	75fb      	strb	r3, [r7, #23]
 8008766:	e027      	b.n	80087b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	0f1b      	lsrs	r3, r3, #28
 800876c:	2b09      	cmp	r3, #9
 800876e:	d80b      	bhi.n	8008788 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	0f1b      	lsrs	r3, r3, #28
 8008774:	b2da      	uxtb	r2, r3
 8008776:	7dfb      	ldrb	r3, [r7, #23]
 8008778:	005b      	lsls	r3, r3, #1
 800877a:	4619      	mov	r1, r3
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	440b      	add	r3, r1
 8008780:	3230      	adds	r2, #48	; 0x30
 8008782:	b2d2      	uxtb	r2, r2
 8008784:	701a      	strb	r2, [r3, #0]
 8008786:	e00a      	b.n	800879e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	0f1b      	lsrs	r3, r3, #28
 800878c:	b2da      	uxtb	r2, r3
 800878e:	7dfb      	ldrb	r3, [r7, #23]
 8008790:	005b      	lsls	r3, r3, #1
 8008792:	4619      	mov	r1, r3
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	440b      	add	r3, r1
 8008798:	3237      	adds	r2, #55	; 0x37
 800879a:	b2d2      	uxtb	r2, r2
 800879c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	011b      	lsls	r3, r3, #4
 80087a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80087a4:	7dfb      	ldrb	r3, [r7, #23]
 80087a6:	005b      	lsls	r3, r3, #1
 80087a8:	3301      	adds	r3, #1
 80087aa:	68ba      	ldr	r2, [r7, #8]
 80087ac:	4413      	add	r3, r2
 80087ae:	2200      	movs	r2, #0
 80087b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80087b2:	7dfb      	ldrb	r3, [r7, #23]
 80087b4:	3301      	adds	r3, #1
 80087b6:	75fb      	strb	r3, [r7, #23]
 80087b8:	7dfa      	ldrb	r2, [r7, #23]
 80087ba:	79fb      	ldrb	r3, [r7, #7]
 80087bc:	429a      	cmp	r2, r3
 80087be:	d3d3      	bcc.n	8008768 <IntToUnicode+0x18>
  }
}
 80087c0:	bf00      	nop
 80087c2:	bf00      	nop
 80087c4:	371c      	adds	r7, #28
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bc80      	pop	{r7}
 80087ca:	4770      	bx	lr

080087cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a0d      	ldr	r2, [pc, #52]	; (8008810 <HAL_PCD_MspInit+0x44>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d113      	bne.n	8008806 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80087de:	4b0d      	ldr	r3, [pc, #52]	; (8008814 <HAL_PCD_MspInit+0x48>)
 80087e0:	69db      	ldr	r3, [r3, #28]
 80087e2:	4a0c      	ldr	r2, [pc, #48]	; (8008814 <HAL_PCD_MspInit+0x48>)
 80087e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80087e8:	61d3      	str	r3, [r2, #28]
 80087ea:	4b0a      	ldr	r3, [pc, #40]	; (8008814 <HAL_PCD_MspInit+0x48>)
 80087ec:	69db      	ldr	r3, [r3, #28]
 80087ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80087f2:	60fb      	str	r3, [r7, #12]
 80087f4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80087f6:	2200      	movs	r2, #0
 80087f8:	2100      	movs	r1, #0
 80087fa:	2014      	movs	r0, #20
 80087fc:	f7f9 f88d 	bl	800191a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008800:	2014      	movs	r0, #20
 8008802:	f7f9 f8a6 	bl	8001952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008806:	bf00      	nop
 8008808:	3710      	adds	r7, #16
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	40005c00 	.word	0x40005c00
 8008814:	40021000 	.word	0x40021000

08008818 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800882c:	4619      	mov	r1, r3
 800882e:	4610      	mov	r0, r2
 8008830:	f7fe fdcb 	bl	80073ca <USBD_LL_SetupStage>
}
 8008834:	bf00      	nop
 8008836:	3708      	adds	r7, #8
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	460b      	mov	r3, r1
 8008846:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800884e:	78fa      	ldrb	r2, [r7, #3]
 8008850:	6879      	ldr	r1, [r7, #4]
 8008852:	4613      	mov	r3, r2
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	4413      	add	r3, r2
 8008858:	00db      	lsls	r3, r3, #3
 800885a:	440b      	add	r3, r1
 800885c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	78fb      	ldrb	r3, [r7, #3]
 8008864:	4619      	mov	r1, r3
 8008866:	f7fe fdfd 	bl	8007464 <USBD_LL_DataOutStage>
}
 800886a:	bf00      	nop
 800886c:	3708      	adds	r7, #8
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b082      	sub	sp, #8
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
 800887a:	460b      	mov	r3, r1
 800887c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8008884:	78fa      	ldrb	r2, [r7, #3]
 8008886:	6879      	ldr	r1, [r7, #4]
 8008888:	4613      	mov	r3, r2
 800888a:	009b      	lsls	r3, r3, #2
 800888c:	4413      	add	r3, r2
 800888e:	00db      	lsls	r3, r3, #3
 8008890:	440b      	add	r3, r1
 8008892:	333c      	adds	r3, #60	; 0x3c
 8008894:	681a      	ldr	r2, [r3, #0]
 8008896:	78fb      	ldrb	r3, [r7, #3]
 8008898:	4619      	mov	r1, r3
 800889a:	f7fe fe54 	bl	8007546 <USBD_LL_DataInStage>
}
 800889e:	bf00      	nop
 80088a0:	3708      	adds	r7, #8
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}

080088a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b082      	sub	sp, #8
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7fe ff64 	bl	8007782 <USBD_LL_SOF>
}
 80088ba:	bf00      	nop
 80088bc:	3708      	adds	r7, #8
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088c2:	b580      	push	{r7, lr}
 80088c4:	b084      	sub	sp, #16
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80088ca:	2301      	movs	r3, #1
 80088cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	2b02      	cmp	r3, #2
 80088d4:	d001      	beq.n	80088da <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80088d6:	f7f8 fab3 	bl	8000e40 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80088e0:	7bfa      	ldrb	r2, [r7, #15]
 80088e2:	4611      	mov	r1, r2
 80088e4:	4618      	mov	r0, r3
 80088e6:	f7fe ff14 	bl	8007712 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80088f0:	4618      	mov	r0, r3
 80088f2:	f7fe fecd 	bl	8007690 <USBD_LL_Reset>
}
 80088f6:	bf00      	nop
 80088f8:	3710      	adds	r7, #16
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
	...

08008900 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800890e:	4618      	mov	r0, r3
 8008910:	f7fe ff0e 	bl	8007730 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	699b      	ldr	r3, [r3, #24]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d005      	beq.n	8008928 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800891c:	4b04      	ldr	r3, [pc, #16]	; (8008930 <HAL_PCD_SuspendCallback+0x30>)
 800891e:	691b      	ldr	r3, [r3, #16]
 8008920:	4a03      	ldr	r2, [pc, #12]	; (8008930 <HAL_PCD_SuspendCallback+0x30>)
 8008922:	f043 0306 	orr.w	r3, r3, #6
 8008926:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008928:	bf00      	nop
 800892a:	3708      	adds	r7, #8
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}
 8008930:	e000ed00 	.word	0xe000ed00

08008934 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b082      	sub	sp, #8
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008942:	4618      	mov	r0, r3
 8008944:	f7fe ff08 	bl	8007758 <USBD_LL_Resume>
}
 8008948:	bf00      	nop
 800894a:	3708      	adds	r7, #8
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008958:	4a28      	ldr	r2, [pc, #160]	; (80089fc <USBD_LL_Init+0xac>)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4a26      	ldr	r2, [pc, #152]	; (80089fc <USBD_LL_Init+0xac>)
 8008964:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008968:	4b24      	ldr	r3, [pc, #144]	; (80089fc <USBD_LL_Init+0xac>)
 800896a:	4a25      	ldr	r2, [pc, #148]	; (8008a00 <USBD_LL_Init+0xb0>)
 800896c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800896e:	4b23      	ldr	r3, [pc, #140]	; (80089fc <USBD_LL_Init+0xac>)
 8008970:	2208      	movs	r2, #8
 8008972:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008974:	4b21      	ldr	r3, [pc, #132]	; (80089fc <USBD_LL_Init+0xac>)
 8008976:	2202      	movs	r2, #2
 8008978:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800897a:	4b20      	ldr	r3, [pc, #128]	; (80089fc <USBD_LL_Init+0xac>)
 800897c:	2200      	movs	r2, #0
 800897e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008980:	4b1e      	ldr	r3, [pc, #120]	; (80089fc <USBD_LL_Init+0xac>)
 8008982:	2200      	movs	r2, #0
 8008984:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008986:	4b1d      	ldr	r3, [pc, #116]	; (80089fc <USBD_LL_Init+0xac>)
 8008988:	2200      	movs	r2, #0
 800898a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800898c:	481b      	ldr	r0, [pc, #108]	; (80089fc <USBD_LL_Init+0xac>)
 800898e:	f7f9 f997 	bl	8001cc0 <HAL_PCD_Init>
 8008992:	4603      	mov	r3, r0
 8008994:	2b00      	cmp	r3, #0
 8008996:	d001      	beq.n	800899c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008998:	f7f8 fa52 	bl	8000e40 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80089a2:	2318      	movs	r3, #24
 80089a4:	2200      	movs	r2, #0
 80089a6:	2100      	movs	r1, #0
 80089a8:	f7fa feb6 	bl	8003718 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80089b2:	2358      	movs	r3, #88	; 0x58
 80089b4:	2200      	movs	r2, #0
 80089b6:	2180      	movs	r1, #128	; 0x80
 80089b8:	f7fa feae 	bl	8003718 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80089c2:	23c0      	movs	r3, #192	; 0xc0
 80089c4:	2200      	movs	r2, #0
 80089c6:	2181      	movs	r1, #129	; 0x81
 80089c8:	f7fa fea6 	bl	8003718 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80089d2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80089d6:	2200      	movs	r2, #0
 80089d8:	2101      	movs	r1, #1
 80089da:	f7fa fe9d 	bl	8003718 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80089e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089e8:	2200      	movs	r2, #0
 80089ea:	2182      	movs	r1, #130	; 0x82
 80089ec:	f7fa fe94 	bl	8003718 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3708      	adds	r7, #8
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop
 80089fc:	20001418 	.word	0x20001418
 8008a00:	40005c00 	.word	0x40005c00

08008a04 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b084      	sub	sp, #16
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a10:	2300      	movs	r3, #0
 8008a12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f7f9 fa4f 	bl	8001ebe <HAL_PCD_Start>
 8008a20:	4603      	mov	r3, r0
 8008a22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a24:	7bfb      	ldrb	r3, [r7, #15]
 8008a26:	4618      	mov	r0, r3
 8008a28:	f000 f94e 	bl	8008cc8 <USBD_Get_USB_Status>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a30:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3710      	adds	r7, #16
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}

08008a3a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b084      	sub	sp, #16
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
 8008a42:	4608      	mov	r0, r1
 8008a44:	4611      	mov	r1, r2
 8008a46:	461a      	mov	r2, r3
 8008a48:	4603      	mov	r3, r0
 8008a4a:	70fb      	strb	r3, [r7, #3]
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	70bb      	strb	r3, [r7, #2]
 8008a50:	4613      	mov	r3, r2
 8008a52:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a54:	2300      	movs	r3, #0
 8008a56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008a62:	78bb      	ldrb	r3, [r7, #2]
 8008a64:	883a      	ldrh	r2, [r7, #0]
 8008a66:	78f9      	ldrb	r1, [r7, #3]
 8008a68:	f7f9 fba4 	bl	80021b4 <HAL_PCD_EP_Open>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a70:	7bfb      	ldrb	r3, [r7, #15]
 8008a72:	4618      	mov	r0, r3
 8008a74:	f000 f928 	bl	8008cc8 <USBD_Get_USB_Status>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3710      	adds	r7, #16
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b084      	sub	sp, #16
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
 8008a8e:	460b      	mov	r3, r1
 8008a90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a92:	2300      	movs	r3, #0
 8008a94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a96:	2300      	movs	r3, #0
 8008a98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008aa0:	78fa      	ldrb	r2, [r7, #3]
 8008aa2:	4611      	mov	r1, r2
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f7f9 fbe2 	bl	800226e <HAL_PCD_EP_Close>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008aae:	7bfb      	ldrb	r3, [r7, #15]
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f000 f909 	bl	8008cc8 <USBD_Get_USB_Status>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008aba:	7bbb      	ldrb	r3, [r7, #14]
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3710      	adds	r7, #16
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	460b      	mov	r3, r1
 8008ace:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ade:	78fa      	ldrb	r2, [r7, #3]
 8008ae0:	4611      	mov	r1, r2
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f7f9 fc8a 	bl	80023fc <HAL_PCD_EP_SetStall>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008aec:	7bfb      	ldrb	r3, [r7, #15]
 8008aee:	4618      	mov	r0, r3
 8008af0:	f000 f8ea 	bl	8008cc8 <USBD_Get_USB_Status>
 8008af4:	4603      	mov	r3, r0
 8008af6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008af8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3710      	adds	r7, #16
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b084      	sub	sp, #16
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
 8008b0a:	460b      	mov	r3, r1
 8008b0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b12:	2300      	movs	r3, #0
 8008b14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b1c:	78fa      	ldrb	r2, [r7, #3]
 8008b1e:	4611      	mov	r1, r2
 8008b20:	4618      	mov	r0, r3
 8008b22:	f7f9 fccb 	bl	80024bc <HAL_PCD_EP_ClrStall>
 8008b26:	4603      	mov	r3, r0
 8008b28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b2a:	7bfb      	ldrb	r3, [r7, #15]
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f000 f8cb 	bl	8008cc8 <USBD_Get_USB_Status>
 8008b32:	4603      	mov	r3, r0
 8008b34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b36:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3710      	adds	r7, #16
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b085      	sub	sp, #20
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	460b      	mov	r3, r1
 8008b4a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b52:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008b54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	da0c      	bge.n	8008b76 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008b5c:	78fb      	ldrb	r3, [r7, #3]
 8008b5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b62:	68f9      	ldr	r1, [r7, #12]
 8008b64:	1c5a      	adds	r2, r3, #1
 8008b66:	4613      	mov	r3, r2
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	4413      	add	r3, r2
 8008b6c:	00db      	lsls	r3, r3, #3
 8008b6e:	440b      	add	r3, r1
 8008b70:	3302      	adds	r3, #2
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	e00b      	b.n	8008b8e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008b76:	78fb      	ldrb	r3, [r7, #3]
 8008b78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b7c:	68f9      	ldr	r1, [r7, #12]
 8008b7e:	4613      	mov	r3, r2
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	4413      	add	r3, r2
 8008b84:	00db      	lsls	r3, r3, #3
 8008b86:	440b      	add	r3, r1
 8008b88:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008b8c:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3714      	adds	r7, #20
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bc80      	pop	{r7}
 8008b96:	4770      	bx	lr

08008b98 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008bb2:	78fa      	ldrb	r2, [r7, #3]
 8008bb4:	4611      	mov	r1, r2
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f7f9 fad7 	bl	800216a <HAL_PCD_SetAddress>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bc0:	7bfb      	ldrb	r3, [r7, #15]
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f000 f880 	bl	8008cc8 <USBD_Get_USB_Status>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bcc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3710      	adds	r7, #16
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}

08008bd6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008bd6:	b580      	push	{r7, lr}
 8008bd8:	b086      	sub	sp, #24
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	60f8      	str	r0, [r7, #12]
 8008bde:	607a      	str	r2, [r7, #4]
 8008be0:	461a      	mov	r2, r3
 8008be2:	460b      	mov	r3, r1
 8008be4:	72fb      	strb	r3, [r7, #11]
 8008be6:	4613      	mov	r3, r2
 8008be8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bea:	2300      	movs	r3, #0
 8008bec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008bf8:	893b      	ldrh	r3, [r7, #8]
 8008bfa:	7af9      	ldrb	r1, [r7, #11]
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	f7f9 fbc6 	bl	800238e <HAL_PCD_EP_Transmit>
 8008c02:	4603      	mov	r3, r0
 8008c04:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c06:	7dfb      	ldrb	r3, [r7, #23]
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f000 f85d 	bl	8008cc8 <USBD_Get_USB_Status>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c12:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3718      	adds	r7, #24
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b086      	sub	sp, #24
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	607a      	str	r2, [r7, #4]
 8008c26:	461a      	mov	r2, r3
 8008c28:	460b      	mov	r3, r1
 8008c2a:	72fb      	strb	r3, [r7, #11]
 8008c2c:	4613      	mov	r3, r2
 8008c2e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c30:	2300      	movs	r3, #0
 8008c32:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c34:	2300      	movs	r3, #0
 8008c36:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008c3e:	893b      	ldrh	r3, [r7, #8]
 8008c40:	7af9      	ldrb	r1, [r7, #11]
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	f7f9 fb5b 	bl	80022fe <HAL_PCD_EP_Receive>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c4c:	7dfb      	ldrb	r3, [r7, #23]
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f000 f83a 	bl	8008cc8 <USBD_Get_USB_Status>
 8008c54:	4603      	mov	r3, r0
 8008c56:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c58:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3718      	adds	r7, #24
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}

08008c62 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b082      	sub	sp, #8
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	6078      	str	r0, [r7, #4]
 8008c6a:	460b      	mov	r3, r1
 8008c6c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c74:	78fa      	ldrb	r2, [r7, #3]
 8008c76:	4611      	mov	r1, r2
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f7f9 fb71 	bl	8002360 <HAL_PCD_EP_GetRxCount>
 8008c7e:	4603      	mov	r3, r0
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3708      	adds	r7, #8
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008c90:	4b02      	ldr	r3, [pc, #8]	; (8008c9c <USBD_static_malloc+0x14>)
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	370c      	adds	r7, #12
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bc80      	pop	{r7}
 8008c9a:	4770      	bx	lr
 8008c9c:	20001708 	.word	0x20001708

08008ca0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]

}
 8008ca8:	bf00      	nop
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bc80      	pop	{r7}
 8008cb0:	4770      	bx	lr

08008cb2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cb2:	b480      	push	{r7}
 8008cb4:	b083      	sub	sp, #12
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
 8008cba:	460b      	mov	r3, r1
 8008cbc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008cbe:	bf00      	nop
 8008cc0:	370c      	adds	r7, #12
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bc80      	pop	{r7}
 8008cc6:	4770      	bx	lr

08008cc8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b085      	sub	sp, #20
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	4603      	mov	r3, r0
 8008cd0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008cd6:	79fb      	ldrb	r3, [r7, #7]
 8008cd8:	2b03      	cmp	r3, #3
 8008cda:	d817      	bhi.n	8008d0c <USBD_Get_USB_Status+0x44>
 8008cdc:	a201      	add	r2, pc, #4	; (adr r2, 8008ce4 <USBD_Get_USB_Status+0x1c>)
 8008cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce2:	bf00      	nop
 8008ce4:	08008cf5 	.word	0x08008cf5
 8008ce8:	08008cfb 	.word	0x08008cfb
 8008cec:	08008d01 	.word	0x08008d01
 8008cf0:	08008d07 	.word	0x08008d07
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	73fb      	strb	r3, [r7, #15]
    break;
 8008cf8:	e00b      	b.n	8008d12 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008cfa:	2302      	movs	r3, #2
 8008cfc:	73fb      	strb	r3, [r7, #15]
    break;
 8008cfe:	e008      	b.n	8008d12 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d00:	2301      	movs	r3, #1
 8008d02:	73fb      	strb	r3, [r7, #15]
    break;
 8008d04:	e005      	b.n	8008d12 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d06:	2302      	movs	r3, #2
 8008d08:	73fb      	strb	r3, [r7, #15]
    break;
 8008d0a:	e002      	b.n	8008d12 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008d0c:	2302      	movs	r3, #2
 8008d0e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d10:	bf00      	nop
  }
  return usb_status;
 8008d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3714      	adds	r7, #20
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bc80      	pop	{r7}
 8008d1c:	4770      	bx	lr
 8008d1e:	bf00      	nop

08008d20 <__cvt>:
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d26:	461f      	mov	r7, r3
 8008d28:	bfbb      	ittet	lt
 8008d2a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008d2e:	461f      	movlt	r7, r3
 8008d30:	2300      	movge	r3, #0
 8008d32:	232d      	movlt	r3, #45	; 0x2d
 8008d34:	b088      	sub	sp, #32
 8008d36:	4614      	mov	r4, r2
 8008d38:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008d3a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008d3c:	7013      	strb	r3, [r2, #0]
 8008d3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008d40:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008d44:	f023 0820 	bic.w	r8, r3, #32
 8008d48:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008d4c:	d005      	beq.n	8008d5a <__cvt+0x3a>
 8008d4e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008d52:	d100      	bne.n	8008d56 <__cvt+0x36>
 8008d54:	3501      	adds	r5, #1
 8008d56:	2302      	movs	r3, #2
 8008d58:	e000      	b.n	8008d5c <__cvt+0x3c>
 8008d5a:	2303      	movs	r3, #3
 8008d5c:	aa07      	add	r2, sp, #28
 8008d5e:	9204      	str	r2, [sp, #16]
 8008d60:	aa06      	add	r2, sp, #24
 8008d62:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008d66:	e9cd 3500 	strd	r3, r5, [sp]
 8008d6a:	4622      	mov	r2, r4
 8008d6c:	463b      	mov	r3, r7
 8008d6e:	f000 fe73 	bl	8009a58 <_dtoa_r>
 8008d72:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008d76:	4606      	mov	r6, r0
 8008d78:	d102      	bne.n	8008d80 <__cvt+0x60>
 8008d7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d7c:	07db      	lsls	r3, r3, #31
 8008d7e:	d522      	bpl.n	8008dc6 <__cvt+0xa6>
 8008d80:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008d84:	eb06 0905 	add.w	r9, r6, r5
 8008d88:	d110      	bne.n	8008dac <__cvt+0x8c>
 8008d8a:	7833      	ldrb	r3, [r6, #0]
 8008d8c:	2b30      	cmp	r3, #48	; 0x30
 8008d8e:	d10a      	bne.n	8008da6 <__cvt+0x86>
 8008d90:	2200      	movs	r2, #0
 8008d92:	2300      	movs	r3, #0
 8008d94:	4620      	mov	r0, r4
 8008d96:	4639      	mov	r1, r7
 8008d98:	f7f7 fe06 	bl	80009a8 <__aeabi_dcmpeq>
 8008d9c:	b918      	cbnz	r0, 8008da6 <__cvt+0x86>
 8008d9e:	f1c5 0501 	rsb	r5, r5, #1
 8008da2:	f8ca 5000 	str.w	r5, [sl]
 8008da6:	f8da 3000 	ldr.w	r3, [sl]
 8008daa:	4499      	add	r9, r3
 8008dac:	2200      	movs	r2, #0
 8008dae:	2300      	movs	r3, #0
 8008db0:	4620      	mov	r0, r4
 8008db2:	4639      	mov	r1, r7
 8008db4:	f7f7 fdf8 	bl	80009a8 <__aeabi_dcmpeq>
 8008db8:	b108      	cbz	r0, 8008dbe <__cvt+0x9e>
 8008dba:	f8cd 901c 	str.w	r9, [sp, #28]
 8008dbe:	2230      	movs	r2, #48	; 0x30
 8008dc0:	9b07      	ldr	r3, [sp, #28]
 8008dc2:	454b      	cmp	r3, r9
 8008dc4:	d307      	bcc.n	8008dd6 <__cvt+0xb6>
 8008dc6:	4630      	mov	r0, r6
 8008dc8:	9b07      	ldr	r3, [sp, #28]
 8008dca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008dcc:	1b9b      	subs	r3, r3, r6
 8008dce:	6013      	str	r3, [r2, #0]
 8008dd0:	b008      	add	sp, #32
 8008dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dd6:	1c59      	adds	r1, r3, #1
 8008dd8:	9107      	str	r1, [sp, #28]
 8008dda:	701a      	strb	r2, [r3, #0]
 8008ddc:	e7f0      	b.n	8008dc0 <__cvt+0xa0>

08008dde <__exponent>:
 8008dde:	4603      	mov	r3, r0
 8008de0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008de2:	2900      	cmp	r1, #0
 8008de4:	f803 2b02 	strb.w	r2, [r3], #2
 8008de8:	bfb6      	itet	lt
 8008dea:	222d      	movlt	r2, #45	; 0x2d
 8008dec:	222b      	movge	r2, #43	; 0x2b
 8008dee:	4249      	neglt	r1, r1
 8008df0:	2909      	cmp	r1, #9
 8008df2:	7042      	strb	r2, [r0, #1]
 8008df4:	dd2a      	ble.n	8008e4c <__exponent+0x6e>
 8008df6:	f10d 0207 	add.w	r2, sp, #7
 8008dfa:	4617      	mov	r7, r2
 8008dfc:	260a      	movs	r6, #10
 8008dfe:	fb91 f5f6 	sdiv	r5, r1, r6
 8008e02:	4694      	mov	ip, r2
 8008e04:	fb06 1415 	mls	r4, r6, r5, r1
 8008e08:	3430      	adds	r4, #48	; 0x30
 8008e0a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008e0e:	460c      	mov	r4, r1
 8008e10:	2c63      	cmp	r4, #99	; 0x63
 8008e12:	4629      	mov	r1, r5
 8008e14:	f102 32ff 	add.w	r2, r2, #4294967295
 8008e18:	dcf1      	bgt.n	8008dfe <__exponent+0x20>
 8008e1a:	3130      	adds	r1, #48	; 0x30
 8008e1c:	f1ac 0402 	sub.w	r4, ip, #2
 8008e20:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008e24:	4622      	mov	r2, r4
 8008e26:	1c41      	adds	r1, r0, #1
 8008e28:	42ba      	cmp	r2, r7
 8008e2a:	d30a      	bcc.n	8008e42 <__exponent+0x64>
 8008e2c:	f10d 0209 	add.w	r2, sp, #9
 8008e30:	eba2 020c 	sub.w	r2, r2, ip
 8008e34:	42bc      	cmp	r4, r7
 8008e36:	bf88      	it	hi
 8008e38:	2200      	movhi	r2, #0
 8008e3a:	4413      	add	r3, r2
 8008e3c:	1a18      	subs	r0, r3, r0
 8008e3e:	b003      	add	sp, #12
 8008e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e42:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008e46:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008e4a:	e7ed      	b.n	8008e28 <__exponent+0x4a>
 8008e4c:	2330      	movs	r3, #48	; 0x30
 8008e4e:	3130      	adds	r1, #48	; 0x30
 8008e50:	7083      	strb	r3, [r0, #2]
 8008e52:	70c1      	strb	r1, [r0, #3]
 8008e54:	1d03      	adds	r3, r0, #4
 8008e56:	e7f1      	b.n	8008e3c <__exponent+0x5e>

08008e58 <_printf_float>:
 8008e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e5c:	b091      	sub	sp, #68	; 0x44
 8008e5e:	460c      	mov	r4, r1
 8008e60:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008e64:	4616      	mov	r6, r2
 8008e66:	461f      	mov	r7, r3
 8008e68:	4605      	mov	r5, r0
 8008e6a:	f000 fce5 	bl	8009838 <_localeconv_r>
 8008e6e:	6803      	ldr	r3, [r0, #0]
 8008e70:	4618      	mov	r0, r3
 8008e72:	9309      	str	r3, [sp, #36]	; 0x24
 8008e74:	f7f7 f96c 	bl	8000150 <strlen>
 8008e78:	2300      	movs	r3, #0
 8008e7a:	930e      	str	r3, [sp, #56]	; 0x38
 8008e7c:	f8d8 3000 	ldr.w	r3, [r8]
 8008e80:	900a      	str	r0, [sp, #40]	; 0x28
 8008e82:	3307      	adds	r3, #7
 8008e84:	f023 0307 	bic.w	r3, r3, #7
 8008e88:	f103 0208 	add.w	r2, r3, #8
 8008e8c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008e90:	f8d4 b000 	ldr.w	fp, [r4]
 8008e94:	f8c8 2000 	str.w	r2, [r8]
 8008e98:	e9d3 a800 	ldrd	sl, r8, [r3]
 8008e9c:	4652      	mov	r2, sl
 8008e9e:	4643      	mov	r3, r8
 8008ea0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008ea4:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8008ea8:	930b      	str	r3, [sp, #44]	; 0x2c
 8008eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8008eae:	4650      	mov	r0, sl
 8008eb0:	4b9c      	ldr	r3, [pc, #624]	; (8009124 <_printf_float+0x2cc>)
 8008eb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008eb4:	f7f7 fdaa 	bl	8000a0c <__aeabi_dcmpun>
 8008eb8:	bb70      	cbnz	r0, 8008f18 <_printf_float+0xc0>
 8008eba:	f04f 32ff 	mov.w	r2, #4294967295
 8008ebe:	4650      	mov	r0, sl
 8008ec0:	4b98      	ldr	r3, [pc, #608]	; (8009124 <_printf_float+0x2cc>)
 8008ec2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008ec4:	f7f7 fd84 	bl	80009d0 <__aeabi_dcmple>
 8008ec8:	bb30      	cbnz	r0, 8008f18 <_printf_float+0xc0>
 8008eca:	2200      	movs	r2, #0
 8008ecc:	2300      	movs	r3, #0
 8008ece:	4650      	mov	r0, sl
 8008ed0:	4641      	mov	r1, r8
 8008ed2:	f7f7 fd73 	bl	80009bc <__aeabi_dcmplt>
 8008ed6:	b110      	cbz	r0, 8008ede <_printf_float+0x86>
 8008ed8:	232d      	movs	r3, #45	; 0x2d
 8008eda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ede:	4a92      	ldr	r2, [pc, #584]	; (8009128 <_printf_float+0x2d0>)
 8008ee0:	4b92      	ldr	r3, [pc, #584]	; (800912c <_printf_float+0x2d4>)
 8008ee2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008ee6:	bf94      	ite	ls
 8008ee8:	4690      	movls	r8, r2
 8008eea:	4698      	movhi	r8, r3
 8008eec:	2303      	movs	r3, #3
 8008eee:	f04f 0a00 	mov.w	sl, #0
 8008ef2:	6123      	str	r3, [r4, #16]
 8008ef4:	f02b 0304 	bic.w	r3, fp, #4
 8008ef8:	6023      	str	r3, [r4, #0]
 8008efa:	4633      	mov	r3, r6
 8008efc:	4621      	mov	r1, r4
 8008efe:	4628      	mov	r0, r5
 8008f00:	9700      	str	r7, [sp, #0]
 8008f02:	aa0f      	add	r2, sp, #60	; 0x3c
 8008f04:	f000 f9d6 	bl	80092b4 <_printf_common>
 8008f08:	3001      	adds	r0, #1
 8008f0a:	f040 8090 	bne.w	800902e <_printf_float+0x1d6>
 8008f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f12:	b011      	add	sp, #68	; 0x44
 8008f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f18:	4652      	mov	r2, sl
 8008f1a:	4643      	mov	r3, r8
 8008f1c:	4650      	mov	r0, sl
 8008f1e:	4641      	mov	r1, r8
 8008f20:	f7f7 fd74 	bl	8000a0c <__aeabi_dcmpun>
 8008f24:	b148      	cbz	r0, 8008f3a <_printf_float+0xe2>
 8008f26:	f1b8 0f00 	cmp.w	r8, #0
 8008f2a:	bfb8      	it	lt
 8008f2c:	232d      	movlt	r3, #45	; 0x2d
 8008f2e:	4a80      	ldr	r2, [pc, #512]	; (8009130 <_printf_float+0x2d8>)
 8008f30:	bfb8      	it	lt
 8008f32:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008f36:	4b7f      	ldr	r3, [pc, #508]	; (8009134 <_printf_float+0x2dc>)
 8008f38:	e7d3      	b.n	8008ee2 <_printf_float+0x8a>
 8008f3a:	6863      	ldr	r3, [r4, #4]
 8008f3c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008f40:	1c5a      	adds	r2, r3, #1
 8008f42:	d142      	bne.n	8008fca <_printf_float+0x172>
 8008f44:	2306      	movs	r3, #6
 8008f46:	6063      	str	r3, [r4, #4]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	9206      	str	r2, [sp, #24]
 8008f4c:	aa0e      	add	r2, sp, #56	; 0x38
 8008f4e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008f52:	aa0d      	add	r2, sp, #52	; 0x34
 8008f54:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008f58:	9203      	str	r2, [sp, #12]
 8008f5a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008f5e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008f62:	6023      	str	r3, [r4, #0]
 8008f64:	6863      	ldr	r3, [r4, #4]
 8008f66:	4652      	mov	r2, sl
 8008f68:	9300      	str	r3, [sp, #0]
 8008f6a:	4628      	mov	r0, r5
 8008f6c:	4643      	mov	r3, r8
 8008f6e:	910b      	str	r1, [sp, #44]	; 0x2c
 8008f70:	f7ff fed6 	bl	8008d20 <__cvt>
 8008f74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f76:	4680      	mov	r8, r0
 8008f78:	2947      	cmp	r1, #71	; 0x47
 8008f7a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008f7c:	d108      	bne.n	8008f90 <_printf_float+0x138>
 8008f7e:	1cc8      	adds	r0, r1, #3
 8008f80:	db02      	blt.n	8008f88 <_printf_float+0x130>
 8008f82:	6863      	ldr	r3, [r4, #4]
 8008f84:	4299      	cmp	r1, r3
 8008f86:	dd40      	ble.n	800900a <_printf_float+0x1b2>
 8008f88:	f1a9 0902 	sub.w	r9, r9, #2
 8008f8c:	fa5f f989 	uxtb.w	r9, r9
 8008f90:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008f94:	d81f      	bhi.n	8008fd6 <_printf_float+0x17e>
 8008f96:	464a      	mov	r2, r9
 8008f98:	3901      	subs	r1, #1
 8008f9a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008f9e:	910d      	str	r1, [sp, #52]	; 0x34
 8008fa0:	f7ff ff1d 	bl	8008dde <__exponent>
 8008fa4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008fa6:	4682      	mov	sl, r0
 8008fa8:	1813      	adds	r3, r2, r0
 8008faa:	2a01      	cmp	r2, #1
 8008fac:	6123      	str	r3, [r4, #16]
 8008fae:	dc02      	bgt.n	8008fb6 <_printf_float+0x15e>
 8008fb0:	6822      	ldr	r2, [r4, #0]
 8008fb2:	07d2      	lsls	r2, r2, #31
 8008fb4:	d501      	bpl.n	8008fba <_printf_float+0x162>
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	6123      	str	r3, [r4, #16]
 8008fba:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d09b      	beq.n	8008efa <_printf_float+0xa2>
 8008fc2:	232d      	movs	r3, #45	; 0x2d
 8008fc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fc8:	e797      	b.n	8008efa <_printf_float+0xa2>
 8008fca:	2947      	cmp	r1, #71	; 0x47
 8008fcc:	d1bc      	bne.n	8008f48 <_printf_float+0xf0>
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d1ba      	bne.n	8008f48 <_printf_float+0xf0>
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e7b7      	b.n	8008f46 <_printf_float+0xee>
 8008fd6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008fda:	d118      	bne.n	800900e <_printf_float+0x1b6>
 8008fdc:	2900      	cmp	r1, #0
 8008fde:	6863      	ldr	r3, [r4, #4]
 8008fe0:	dd0b      	ble.n	8008ffa <_printf_float+0x1a2>
 8008fe2:	6121      	str	r1, [r4, #16]
 8008fe4:	b913      	cbnz	r3, 8008fec <_printf_float+0x194>
 8008fe6:	6822      	ldr	r2, [r4, #0]
 8008fe8:	07d0      	lsls	r0, r2, #31
 8008fea:	d502      	bpl.n	8008ff2 <_printf_float+0x19a>
 8008fec:	3301      	adds	r3, #1
 8008fee:	440b      	add	r3, r1
 8008ff0:	6123      	str	r3, [r4, #16]
 8008ff2:	f04f 0a00 	mov.w	sl, #0
 8008ff6:	65a1      	str	r1, [r4, #88]	; 0x58
 8008ff8:	e7df      	b.n	8008fba <_printf_float+0x162>
 8008ffa:	b913      	cbnz	r3, 8009002 <_printf_float+0x1aa>
 8008ffc:	6822      	ldr	r2, [r4, #0]
 8008ffe:	07d2      	lsls	r2, r2, #31
 8009000:	d501      	bpl.n	8009006 <_printf_float+0x1ae>
 8009002:	3302      	adds	r3, #2
 8009004:	e7f4      	b.n	8008ff0 <_printf_float+0x198>
 8009006:	2301      	movs	r3, #1
 8009008:	e7f2      	b.n	8008ff0 <_printf_float+0x198>
 800900a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800900e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009010:	4299      	cmp	r1, r3
 8009012:	db05      	blt.n	8009020 <_printf_float+0x1c8>
 8009014:	6823      	ldr	r3, [r4, #0]
 8009016:	6121      	str	r1, [r4, #16]
 8009018:	07d8      	lsls	r0, r3, #31
 800901a:	d5ea      	bpl.n	8008ff2 <_printf_float+0x19a>
 800901c:	1c4b      	adds	r3, r1, #1
 800901e:	e7e7      	b.n	8008ff0 <_printf_float+0x198>
 8009020:	2900      	cmp	r1, #0
 8009022:	bfcc      	ite	gt
 8009024:	2201      	movgt	r2, #1
 8009026:	f1c1 0202 	rsble	r2, r1, #2
 800902a:	4413      	add	r3, r2
 800902c:	e7e0      	b.n	8008ff0 <_printf_float+0x198>
 800902e:	6823      	ldr	r3, [r4, #0]
 8009030:	055a      	lsls	r2, r3, #21
 8009032:	d407      	bmi.n	8009044 <_printf_float+0x1ec>
 8009034:	6923      	ldr	r3, [r4, #16]
 8009036:	4642      	mov	r2, r8
 8009038:	4631      	mov	r1, r6
 800903a:	4628      	mov	r0, r5
 800903c:	47b8      	blx	r7
 800903e:	3001      	adds	r0, #1
 8009040:	d12b      	bne.n	800909a <_printf_float+0x242>
 8009042:	e764      	b.n	8008f0e <_printf_float+0xb6>
 8009044:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009048:	f240 80dd 	bls.w	8009206 <_printf_float+0x3ae>
 800904c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009050:	2200      	movs	r2, #0
 8009052:	2300      	movs	r3, #0
 8009054:	f7f7 fca8 	bl	80009a8 <__aeabi_dcmpeq>
 8009058:	2800      	cmp	r0, #0
 800905a:	d033      	beq.n	80090c4 <_printf_float+0x26c>
 800905c:	2301      	movs	r3, #1
 800905e:	4631      	mov	r1, r6
 8009060:	4628      	mov	r0, r5
 8009062:	4a35      	ldr	r2, [pc, #212]	; (8009138 <_printf_float+0x2e0>)
 8009064:	47b8      	blx	r7
 8009066:	3001      	adds	r0, #1
 8009068:	f43f af51 	beq.w	8008f0e <_printf_float+0xb6>
 800906c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009070:	429a      	cmp	r2, r3
 8009072:	db02      	blt.n	800907a <_printf_float+0x222>
 8009074:	6823      	ldr	r3, [r4, #0]
 8009076:	07d8      	lsls	r0, r3, #31
 8009078:	d50f      	bpl.n	800909a <_printf_float+0x242>
 800907a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800907e:	4631      	mov	r1, r6
 8009080:	4628      	mov	r0, r5
 8009082:	47b8      	blx	r7
 8009084:	3001      	adds	r0, #1
 8009086:	f43f af42 	beq.w	8008f0e <_printf_float+0xb6>
 800908a:	f04f 0800 	mov.w	r8, #0
 800908e:	f104 091a 	add.w	r9, r4, #26
 8009092:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009094:	3b01      	subs	r3, #1
 8009096:	4543      	cmp	r3, r8
 8009098:	dc09      	bgt.n	80090ae <_printf_float+0x256>
 800909a:	6823      	ldr	r3, [r4, #0]
 800909c:	079b      	lsls	r3, r3, #30
 800909e:	f100 8104 	bmi.w	80092aa <_printf_float+0x452>
 80090a2:	68e0      	ldr	r0, [r4, #12]
 80090a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80090a6:	4298      	cmp	r0, r3
 80090a8:	bfb8      	it	lt
 80090aa:	4618      	movlt	r0, r3
 80090ac:	e731      	b.n	8008f12 <_printf_float+0xba>
 80090ae:	2301      	movs	r3, #1
 80090b0:	464a      	mov	r2, r9
 80090b2:	4631      	mov	r1, r6
 80090b4:	4628      	mov	r0, r5
 80090b6:	47b8      	blx	r7
 80090b8:	3001      	adds	r0, #1
 80090ba:	f43f af28 	beq.w	8008f0e <_printf_float+0xb6>
 80090be:	f108 0801 	add.w	r8, r8, #1
 80090c2:	e7e6      	b.n	8009092 <_printf_float+0x23a>
 80090c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	dc38      	bgt.n	800913c <_printf_float+0x2e4>
 80090ca:	2301      	movs	r3, #1
 80090cc:	4631      	mov	r1, r6
 80090ce:	4628      	mov	r0, r5
 80090d0:	4a19      	ldr	r2, [pc, #100]	; (8009138 <_printf_float+0x2e0>)
 80090d2:	47b8      	blx	r7
 80090d4:	3001      	adds	r0, #1
 80090d6:	f43f af1a 	beq.w	8008f0e <_printf_float+0xb6>
 80090da:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80090de:	4313      	orrs	r3, r2
 80090e0:	d102      	bne.n	80090e8 <_printf_float+0x290>
 80090e2:	6823      	ldr	r3, [r4, #0]
 80090e4:	07d9      	lsls	r1, r3, #31
 80090e6:	d5d8      	bpl.n	800909a <_printf_float+0x242>
 80090e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090ec:	4631      	mov	r1, r6
 80090ee:	4628      	mov	r0, r5
 80090f0:	47b8      	blx	r7
 80090f2:	3001      	adds	r0, #1
 80090f4:	f43f af0b 	beq.w	8008f0e <_printf_float+0xb6>
 80090f8:	f04f 0900 	mov.w	r9, #0
 80090fc:	f104 0a1a 	add.w	sl, r4, #26
 8009100:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009102:	425b      	negs	r3, r3
 8009104:	454b      	cmp	r3, r9
 8009106:	dc01      	bgt.n	800910c <_printf_float+0x2b4>
 8009108:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800910a:	e794      	b.n	8009036 <_printf_float+0x1de>
 800910c:	2301      	movs	r3, #1
 800910e:	4652      	mov	r2, sl
 8009110:	4631      	mov	r1, r6
 8009112:	4628      	mov	r0, r5
 8009114:	47b8      	blx	r7
 8009116:	3001      	adds	r0, #1
 8009118:	f43f aef9 	beq.w	8008f0e <_printf_float+0xb6>
 800911c:	f109 0901 	add.w	r9, r9, #1
 8009120:	e7ee      	b.n	8009100 <_printf_float+0x2a8>
 8009122:	bf00      	nop
 8009124:	7fefffff 	.word	0x7fefffff
 8009128:	0800ba8a 	.word	0x0800ba8a
 800912c:	0800ba8e 	.word	0x0800ba8e
 8009130:	0800ba92 	.word	0x0800ba92
 8009134:	0800ba96 	.word	0x0800ba96
 8009138:	0800ba9a 	.word	0x0800ba9a
 800913c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800913e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009140:	429a      	cmp	r2, r3
 8009142:	bfa8      	it	ge
 8009144:	461a      	movge	r2, r3
 8009146:	2a00      	cmp	r2, #0
 8009148:	4691      	mov	r9, r2
 800914a:	dc37      	bgt.n	80091bc <_printf_float+0x364>
 800914c:	f04f 0b00 	mov.w	fp, #0
 8009150:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009154:	f104 021a 	add.w	r2, r4, #26
 8009158:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800915c:	ebaa 0309 	sub.w	r3, sl, r9
 8009160:	455b      	cmp	r3, fp
 8009162:	dc33      	bgt.n	80091cc <_printf_float+0x374>
 8009164:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009168:	429a      	cmp	r2, r3
 800916a:	db3b      	blt.n	80091e4 <_printf_float+0x38c>
 800916c:	6823      	ldr	r3, [r4, #0]
 800916e:	07da      	lsls	r2, r3, #31
 8009170:	d438      	bmi.n	80091e4 <_printf_float+0x38c>
 8009172:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8009176:	eba2 0903 	sub.w	r9, r2, r3
 800917a:	eba2 020a 	sub.w	r2, r2, sl
 800917e:	4591      	cmp	r9, r2
 8009180:	bfa8      	it	ge
 8009182:	4691      	movge	r9, r2
 8009184:	f1b9 0f00 	cmp.w	r9, #0
 8009188:	dc34      	bgt.n	80091f4 <_printf_float+0x39c>
 800918a:	f04f 0800 	mov.w	r8, #0
 800918e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009192:	f104 0a1a 	add.w	sl, r4, #26
 8009196:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800919a:	1a9b      	subs	r3, r3, r2
 800919c:	eba3 0309 	sub.w	r3, r3, r9
 80091a0:	4543      	cmp	r3, r8
 80091a2:	f77f af7a 	ble.w	800909a <_printf_float+0x242>
 80091a6:	2301      	movs	r3, #1
 80091a8:	4652      	mov	r2, sl
 80091aa:	4631      	mov	r1, r6
 80091ac:	4628      	mov	r0, r5
 80091ae:	47b8      	blx	r7
 80091b0:	3001      	adds	r0, #1
 80091b2:	f43f aeac 	beq.w	8008f0e <_printf_float+0xb6>
 80091b6:	f108 0801 	add.w	r8, r8, #1
 80091ba:	e7ec      	b.n	8009196 <_printf_float+0x33e>
 80091bc:	4613      	mov	r3, r2
 80091be:	4631      	mov	r1, r6
 80091c0:	4642      	mov	r2, r8
 80091c2:	4628      	mov	r0, r5
 80091c4:	47b8      	blx	r7
 80091c6:	3001      	adds	r0, #1
 80091c8:	d1c0      	bne.n	800914c <_printf_float+0x2f4>
 80091ca:	e6a0      	b.n	8008f0e <_printf_float+0xb6>
 80091cc:	2301      	movs	r3, #1
 80091ce:	4631      	mov	r1, r6
 80091d0:	4628      	mov	r0, r5
 80091d2:	920b      	str	r2, [sp, #44]	; 0x2c
 80091d4:	47b8      	blx	r7
 80091d6:	3001      	adds	r0, #1
 80091d8:	f43f ae99 	beq.w	8008f0e <_printf_float+0xb6>
 80091dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80091de:	f10b 0b01 	add.w	fp, fp, #1
 80091e2:	e7b9      	b.n	8009158 <_printf_float+0x300>
 80091e4:	4631      	mov	r1, r6
 80091e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80091ea:	4628      	mov	r0, r5
 80091ec:	47b8      	blx	r7
 80091ee:	3001      	adds	r0, #1
 80091f0:	d1bf      	bne.n	8009172 <_printf_float+0x31a>
 80091f2:	e68c      	b.n	8008f0e <_printf_float+0xb6>
 80091f4:	464b      	mov	r3, r9
 80091f6:	4631      	mov	r1, r6
 80091f8:	4628      	mov	r0, r5
 80091fa:	eb08 020a 	add.w	r2, r8, sl
 80091fe:	47b8      	blx	r7
 8009200:	3001      	adds	r0, #1
 8009202:	d1c2      	bne.n	800918a <_printf_float+0x332>
 8009204:	e683      	b.n	8008f0e <_printf_float+0xb6>
 8009206:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009208:	2a01      	cmp	r2, #1
 800920a:	dc01      	bgt.n	8009210 <_printf_float+0x3b8>
 800920c:	07db      	lsls	r3, r3, #31
 800920e:	d539      	bpl.n	8009284 <_printf_float+0x42c>
 8009210:	2301      	movs	r3, #1
 8009212:	4642      	mov	r2, r8
 8009214:	4631      	mov	r1, r6
 8009216:	4628      	mov	r0, r5
 8009218:	47b8      	blx	r7
 800921a:	3001      	adds	r0, #1
 800921c:	f43f ae77 	beq.w	8008f0e <_printf_float+0xb6>
 8009220:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009224:	4631      	mov	r1, r6
 8009226:	4628      	mov	r0, r5
 8009228:	47b8      	blx	r7
 800922a:	3001      	adds	r0, #1
 800922c:	f43f ae6f 	beq.w	8008f0e <_printf_float+0xb6>
 8009230:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009234:	2200      	movs	r2, #0
 8009236:	2300      	movs	r3, #0
 8009238:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800923c:	f7f7 fbb4 	bl	80009a8 <__aeabi_dcmpeq>
 8009240:	b9d8      	cbnz	r0, 800927a <_printf_float+0x422>
 8009242:	f109 33ff 	add.w	r3, r9, #4294967295
 8009246:	f108 0201 	add.w	r2, r8, #1
 800924a:	4631      	mov	r1, r6
 800924c:	4628      	mov	r0, r5
 800924e:	47b8      	blx	r7
 8009250:	3001      	adds	r0, #1
 8009252:	d10e      	bne.n	8009272 <_printf_float+0x41a>
 8009254:	e65b      	b.n	8008f0e <_printf_float+0xb6>
 8009256:	2301      	movs	r3, #1
 8009258:	464a      	mov	r2, r9
 800925a:	4631      	mov	r1, r6
 800925c:	4628      	mov	r0, r5
 800925e:	47b8      	blx	r7
 8009260:	3001      	adds	r0, #1
 8009262:	f43f ae54 	beq.w	8008f0e <_printf_float+0xb6>
 8009266:	f108 0801 	add.w	r8, r8, #1
 800926a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800926c:	3b01      	subs	r3, #1
 800926e:	4543      	cmp	r3, r8
 8009270:	dcf1      	bgt.n	8009256 <_printf_float+0x3fe>
 8009272:	4653      	mov	r3, sl
 8009274:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009278:	e6de      	b.n	8009038 <_printf_float+0x1e0>
 800927a:	f04f 0800 	mov.w	r8, #0
 800927e:	f104 091a 	add.w	r9, r4, #26
 8009282:	e7f2      	b.n	800926a <_printf_float+0x412>
 8009284:	2301      	movs	r3, #1
 8009286:	4642      	mov	r2, r8
 8009288:	e7df      	b.n	800924a <_printf_float+0x3f2>
 800928a:	2301      	movs	r3, #1
 800928c:	464a      	mov	r2, r9
 800928e:	4631      	mov	r1, r6
 8009290:	4628      	mov	r0, r5
 8009292:	47b8      	blx	r7
 8009294:	3001      	adds	r0, #1
 8009296:	f43f ae3a 	beq.w	8008f0e <_printf_float+0xb6>
 800929a:	f108 0801 	add.w	r8, r8, #1
 800929e:	68e3      	ldr	r3, [r4, #12]
 80092a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80092a2:	1a5b      	subs	r3, r3, r1
 80092a4:	4543      	cmp	r3, r8
 80092a6:	dcf0      	bgt.n	800928a <_printf_float+0x432>
 80092a8:	e6fb      	b.n	80090a2 <_printf_float+0x24a>
 80092aa:	f04f 0800 	mov.w	r8, #0
 80092ae:	f104 0919 	add.w	r9, r4, #25
 80092b2:	e7f4      	b.n	800929e <_printf_float+0x446>

080092b4 <_printf_common>:
 80092b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092b8:	4616      	mov	r6, r2
 80092ba:	4699      	mov	r9, r3
 80092bc:	688a      	ldr	r2, [r1, #8]
 80092be:	690b      	ldr	r3, [r1, #16]
 80092c0:	4607      	mov	r7, r0
 80092c2:	4293      	cmp	r3, r2
 80092c4:	bfb8      	it	lt
 80092c6:	4613      	movlt	r3, r2
 80092c8:	6033      	str	r3, [r6, #0]
 80092ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80092ce:	460c      	mov	r4, r1
 80092d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80092d4:	b10a      	cbz	r2, 80092da <_printf_common+0x26>
 80092d6:	3301      	adds	r3, #1
 80092d8:	6033      	str	r3, [r6, #0]
 80092da:	6823      	ldr	r3, [r4, #0]
 80092dc:	0699      	lsls	r1, r3, #26
 80092de:	bf42      	ittt	mi
 80092e0:	6833      	ldrmi	r3, [r6, #0]
 80092e2:	3302      	addmi	r3, #2
 80092e4:	6033      	strmi	r3, [r6, #0]
 80092e6:	6825      	ldr	r5, [r4, #0]
 80092e8:	f015 0506 	ands.w	r5, r5, #6
 80092ec:	d106      	bne.n	80092fc <_printf_common+0x48>
 80092ee:	f104 0a19 	add.w	sl, r4, #25
 80092f2:	68e3      	ldr	r3, [r4, #12]
 80092f4:	6832      	ldr	r2, [r6, #0]
 80092f6:	1a9b      	subs	r3, r3, r2
 80092f8:	42ab      	cmp	r3, r5
 80092fa:	dc2b      	bgt.n	8009354 <_printf_common+0xa0>
 80092fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009300:	1e13      	subs	r3, r2, #0
 8009302:	6822      	ldr	r2, [r4, #0]
 8009304:	bf18      	it	ne
 8009306:	2301      	movne	r3, #1
 8009308:	0692      	lsls	r2, r2, #26
 800930a:	d430      	bmi.n	800936e <_printf_common+0xba>
 800930c:	4649      	mov	r1, r9
 800930e:	4638      	mov	r0, r7
 8009310:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009314:	47c0      	blx	r8
 8009316:	3001      	adds	r0, #1
 8009318:	d023      	beq.n	8009362 <_printf_common+0xae>
 800931a:	6823      	ldr	r3, [r4, #0]
 800931c:	6922      	ldr	r2, [r4, #16]
 800931e:	f003 0306 	and.w	r3, r3, #6
 8009322:	2b04      	cmp	r3, #4
 8009324:	bf14      	ite	ne
 8009326:	2500      	movne	r5, #0
 8009328:	6833      	ldreq	r3, [r6, #0]
 800932a:	f04f 0600 	mov.w	r6, #0
 800932e:	bf08      	it	eq
 8009330:	68e5      	ldreq	r5, [r4, #12]
 8009332:	f104 041a 	add.w	r4, r4, #26
 8009336:	bf08      	it	eq
 8009338:	1aed      	subeq	r5, r5, r3
 800933a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800933e:	bf08      	it	eq
 8009340:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009344:	4293      	cmp	r3, r2
 8009346:	bfc4      	itt	gt
 8009348:	1a9b      	subgt	r3, r3, r2
 800934a:	18ed      	addgt	r5, r5, r3
 800934c:	42b5      	cmp	r5, r6
 800934e:	d11a      	bne.n	8009386 <_printf_common+0xd2>
 8009350:	2000      	movs	r0, #0
 8009352:	e008      	b.n	8009366 <_printf_common+0xb2>
 8009354:	2301      	movs	r3, #1
 8009356:	4652      	mov	r2, sl
 8009358:	4649      	mov	r1, r9
 800935a:	4638      	mov	r0, r7
 800935c:	47c0      	blx	r8
 800935e:	3001      	adds	r0, #1
 8009360:	d103      	bne.n	800936a <_printf_common+0xb6>
 8009362:	f04f 30ff 	mov.w	r0, #4294967295
 8009366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800936a:	3501      	adds	r5, #1
 800936c:	e7c1      	b.n	80092f2 <_printf_common+0x3e>
 800936e:	2030      	movs	r0, #48	; 0x30
 8009370:	18e1      	adds	r1, r4, r3
 8009372:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009376:	1c5a      	adds	r2, r3, #1
 8009378:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800937c:	4422      	add	r2, r4
 800937e:	3302      	adds	r3, #2
 8009380:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009384:	e7c2      	b.n	800930c <_printf_common+0x58>
 8009386:	2301      	movs	r3, #1
 8009388:	4622      	mov	r2, r4
 800938a:	4649      	mov	r1, r9
 800938c:	4638      	mov	r0, r7
 800938e:	47c0      	blx	r8
 8009390:	3001      	adds	r0, #1
 8009392:	d0e6      	beq.n	8009362 <_printf_common+0xae>
 8009394:	3601      	adds	r6, #1
 8009396:	e7d9      	b.n	800934c <_printf_common+0x98>

08009398 <_printf_i>:
 8009398:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800939c:	7e0f      	ldrb	r7, [r1, #24]
 800939e:	4691      	mov	r9, r2
 80093a0:	2f78      	cmp	r7, #120	; 0x78
 80093a2:	4680      	mov	r8, r0
 80093a4:	460c      	mov	r4, r1
 80093a6:	469a      	mov	sl, r3
 80093a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80093aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80093ae:	d807      	bhi.n	80093c0 <_printf_i+0x28>
 80093b0:	2f62      	cmp	r7, #98	; 0x62
 80093b2:	d80a      	bhi.n	80093ca <_printf_i+0x32>
 80093b4:	2f00      	cmp	r7, #0
 80093b6:	f000 80d5 	beq.w	8009564 <_printf_i+0x1cc>
 80093ba:	2f58      	cmp	r7, #88	; 0x58
 80093bc:	f000 80c1 	beq.w	8009542 <_printf_i+0x1aa>
 80093c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80093c8:	e03a      	b.n	8009440 <_printf_i+0xa8>
 80093ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80093ce:	2b15      	cmp	r3, #21
 80093d0:	d8f6      	bhi.n	80093c0 <_printf_i+0x28>
 80093d2:	a101      	add	r1, pc, #4	; (adr r1, 80093d8 <_printf_i+0x40>)
 80093d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80093d8:	08009431 	.word	0x08009431
 80093dc:	08009445 	.word	0x08009445
 80093e0:	080093c1 	.word	0x080093c1
 80093e4:	080093c1 	.word	0x080093c1
 80093e8:	080093c1 	.word	0x080093c1
 80093ec:	080093c1 	.word	0x080093c1
 80093f0:	08009445 	.word	0x08009445
 80093f4:	080093c1 	.word	0x080093c1
 80093f8:	080093c1 	.word	0x080093c1
 80093fc:	080093c1 	.word	0x080093c1
 8009400:	080093c1 	.word	0x080093c1
 8009404:	0800954b 	.word	0x0800954b
 8009408:	08009471 	.word	0x08009471
 800940c:	08009505 	.word	0x08009505
 8009410:	080093c1 	.word	0x080093c1
 8009414:	080093c1 	.word	0x080093c1
 8009418:	0800956d 	.word	0x0800956d
 800941c:	080093c1 	.word	0x080093c1
 8009420:	08009471 	.word	0x08009471
 8009424:	080093c1 	.word	0x080093c1
 8009428:	080093c1 	.word	0x080093c1
 800942c:	0800950d 	.word	0x0800950d
 8009430:	682b      	ldr	r3, [r5, #0]
 8009432:	1d1a      	adds	r2, r3, #4
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	602a      	str	r2, [r5, #0]
 8009438:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800943c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009440:	2301      	movs	r3, #1
 8009442:	e0a0      	b.n	8009586 <_printf_i+0x1ee>
 8009444:	6820      	ldr	r0, [r4, #0]
 8009446:	682b      	ldr	r3, [r5, #0]
 8009448:	0607      	lsls	r7, r0, #24
 800944a:	f103 0104 	add.w	r1, r3, #4
 800944e:	6029      	str	r1, [r5, #0]
 8009450:	d501      	bpl.n	8009456 <_printf_i+0xbe>
 8009452:	681e      	ldr	r6, [r3, #0]
 8009454:	e003      	b.n	800945e <_printf_i+0xc6>
 8009456:	0646      	lsls	r6, r0, #25
 8009458:	d5fb      	bpl.n	8009452 <_printf_i+0xba>
 800945a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800945e:	2e00      	cmp	r6, #0
 8009460:	da03      	bge.n	800946a <_printf_i+0xd2>
 8009462:	232d      	movs	r3, #45	; 0x2d
 8009464:	4276      	negs	r6, r6
 8009466:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800946a:	230a      	movs	r3, #10
 800946c:	4859      	ldr	r0, [pc, #356]	; (80095d4 <_printf_i+0x23c>)
 800946e:	e012      	b.n	8009496 <_printf_i+0xfe>
 8009470:	682b      	ldr	r3, [r5, #0]
 8009472:	6820      	ldr	r0, [r4, #0]
 8009474:	1d19      	adds	r1, r3, #4
 8009476:	6029      	str	r1, [r5, #0]
 8009478:	0605      	lsls	r5, r0, #24
 800947a:	d501      	bpl.n	8009480 <_printf_i+0xe8>
 800947c:	681e      	ldr	r6, [r3, #0]
 800947e:	e002      	b.n	8009486 <_printf_i+0xee>
 8009480:	0641      	lsls	r1, r0, #25
 8009482:	d5fb      	bpl.n	800947c <_printf_i+0xe4>
 8009484:	881e      	ldrh	r6, [r3, #0]
 8009486:	2f6f      	cmp	r7, #111	; 0x6f
 8009488:	bf0c      	ite	eq
 800948a:	2308      	moveq	r3, #8
 800948c:	230a      	movne	r3, #10
 800948e:	4851      	ldr	r0, [pc, #324]	; (80095d4 <_printf_i+0x23c>)
 8009490:	2100      	movs	r1, #0
 8009492:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009496:	6865      	ldr	r5, [r4, #4]
 8009498:	2d00      	cmp	r5, #0
 800949a:	bfa8      	it	ge
 800949c:	6821      	ldrge	r1, [r4, #0]
 800949e:	60a5      	str	r5, [r4, #8]
 80094a0:	bfa4      	itt	ge
 80094a2:	f021 0104 	bicge.w	r1, r1, #4
 80094a6:	6021      	strge	r1, [r4, #0]
 80094a8:	b90e      	cbnz	r6, 80094ae <_printf_i+0x116>
 80094aa:	2d00      	cmp	r5, #0
 80094ac:	d04b      	beq.n	8009546 <_printf_i+0x1ae>
 80094ae:	4615      	mov	r5, r2
 80094b0:	fbb6 f1f3 	udiv	r1, r6, r3
 80094b4:	fb03 6711 	mls	r7, r3, r1, r6
 80094b8:	5dc7      	ldrb	r7, [r0, r7]
 80094ba:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80094be:	4637      	mov	r7, r6
 80094c0:	42bb      	cmp	r3, r7
 80094c2:	460e      	mov	r6, r1
 80094c4:	d9f4      	bls.n	80094b0 <_printf_i+0x118>
 80094c6:	2b08      	cmp	r3, #8
 80094c8:	d10b      	bne.n	80094e2 <_printf_i+0x14a>
 80094ca:	6823      	ldr	r3, [r4, #0]
 80094cc:	07de      	lsls	r6, r3, #31
 80094ce:	d508      	bpl.n	80094e2 <_printf_i+0x14a>
 80094d0:	6923      	ldr	r3, [r4, #16]
 80094d2:	6861      	ldr	r1, [r4, #4]
 80094d4:	4299      	cmp	r1, r3
 80094d6:	bfde      	ittt	le
 80094d8:	2330      	movle	r3, #48	; 0x30
 80094da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80094de:	f105 35ff 	addle.w	r5, r5, #4294967295
 80094e2:	1b52      	subs	r2, r2, r5
 80094e4:	6122      	str	r2, [r4, #16]
 80094e6:	464b      	mov	r3, r9
 80094e8:	4621      	mov	r1, r4
 80094ea:	4640      	mov	r0, r8
 80094ec:	f8cd a000 	str.w	sl, [sp]
 80094f0:	aa03      	add	r2, sp, #12
 80094f2:	f7ff fedf 	bl	80092b4 <_printf_common>
 80094f6:	3001      	adds	r0, #1
 80094f8:	d14a      	bne.n	8009590 <_printf_i+0x1f8>
 80094fa:	f04f 30ff 	mov.w	r0, #4294967295
 80094fe:	b004      	add	sp, #16
 8009500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009504:	6823      	ldr	r3, [r4, #0]
 8009506:	f043 0320 	orr.w	r3, r3, #32
 800950a:	6023      	str	r3, [r4, #0]
 800950c:	2778      	movs	r7, #120	; 0x78
 800950e:	4832      	ldr	r0, [pc, #200]	; (80095d8 <_printf_i+0x240>)
 8009510:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009514:	6823      	ldr	r3, [r4, #0]
 8009516:	6829      	ldr	r1, [r5, #0]
 8009518:	061f      	lsls	r7, r3, #24
 800951a:	f851 6b04 	ldr.w	r6, [r1], #4
 800951e:	d402      	bmi.n	8009526 <_printf_i+0x18e>
 8009520:	065f      	lsls	r7, r3, #25
 8009522:	bf48      	it	mi
 8009524:	b2b6      	uxthmi	r6, r6
 8009526:	07df      	lsls	r7, r3, #31
 8009528:	bf48      	it	mi
 800952a:	f043 0320 	orrmi.w	r3, r3, #32
 800952e:	6029      	str	r1, [r5, #0]
 8009530:	bf48      	it	mi
 8009532:	6023      	strmi	r3, [r4, #0]
 8009534:	b91e      	cbnz	r6, 800953e <_printf_i+0x1a6>
 8009536:	6823      	ldr	r3, [r4, #0]
 8009538:	f023 0320 	bic.w	r3, r3, #32
 800953c:	6023      	str	r3, [r4, #0]
 800953e:	2310      	movs	r3, #16
 8009540:	e7a6      	b.n	8009490 <_printf_i+0xf8>
 8009542:	4824      	ldr	r0, [pc, #144]	; (80095d4 <_printf_i+0x23c>)
 8009544:	e7e4      	b.n	8009510 <_printf_i+0x178>
 8009546:	4615      	mov	r5, r2
 8009548:	e7bd      	b.n	80094c6 <_printf_i+0x12e>
 800954a:	682b      	ldr	r3, [r5, #0]
 800954c:	6826      	ldr	r6, [r4, #0]
 800954e:	1d18      	adds	r0, r3, #4
 8009550:	6961      	ldr	r1, [r4, #20]
 8009552:	6028      	str	r0, [r5, #0]
 8009554:	0635      	lsls	r5, r6, #24
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	d501      	bpl.n	800955e <_printf_i+0x1c6>
 800955a:	6019      	str	r1, [r3, #0]
 800955c:	e002      	b.n	8009564 <_printf_i+0x1cc>
 800955e:	0670      	lsls	r0, r6, #25
 8009560:	d5fb      	bpl.n	800955a <_printf_i+0x1c2>
 8009562:	8019      	strh	r1, [r3, #0]
 8009564:	2300      	movs	r3, #0
 8009566:	4615      	mov	r5, r2
 8009568:	6123      	str	r3, [r4, #16]
 800956a:	e7bc      	b.n	80094e6 <_printf_i+0x14e>
 800956c:	682b      	ldr	r3, [r5, #0]
 800956e:	2100      	movs	r1, #0
 8009570:	1d1a      	adds	r2, r3, #4
 8009572:	602a      	str	r2, [r5, #0]
 8009574:	681d      	ldr	r5, [r3, #0]
 8009576:	6862      	ldr	r2, [r4, #4]
 8009578:	4628      	mov	r0, r5
 800957a:	f000 f9d4 	bl	8009926 <memchr>
 800957e:	b108      	cbz	r0, 8009584 <_printf_i+0x1ec>
 8009580:	1b40      	subs	r0, r0, r5
 8009582:	6060      	str	r0, [r4, #4]
 8009584:	6863      	ldr	r3, [r4, #4]
 8009586:	6123      	str	r3, [r4, #16]
 8009588:	2300      	movs	r3, #0
 800958a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800958e:	e7aa      	b.n	80094e6 <_printf_i+0x14e>
 8009590:	462a      	mov	r2, r5
 8009592:	4649      	mov	r1, r9
 8009594:	4640      	mov	r0, r8
 8009596:	6923      	ldr	r3, [r4, #16]
 8009598:	47d0      	blx	sl
 800959a:	3001      	adds	r0, #1
 800959c:	d0ad      	beq.n	80094fa <_printf_i+0x162>
 800959e:	6823      	ldr	r3, [r4, #0]
 80095a0:	079b      	lsls	r3, r3, #30
 80095a2:	d413      	bmi.n	80095cc <_printf_i+0x234>
 80095a4:	68e0      	ldr	r0, [r4, #12]
 80095a6:	9b03      	ldr	r3, [sp, #12]
 80095a8:	4298      	cmp	r0, r3
 80095aa:	bfb8      	it	lt
 80095ac:	4618      	movlt	r0, r3
 80095ae:	e7a6      	b.n	80094fe <_printf_i+0x166>
 80095b0:	2301      	movs	r3, #1
 80095b2:	4632      	mov	r2, r6
 80095b4:	4649      	mov	r1, r9
 80095b6:	4640      	mov	r0, r8
 80095b8:	47d0      	blx	sl
 80095ba:	3001      	adds	r0, #1
 80095bc:	d09d      	beq.n	80094fa <_printf_i+0x162>
 80095be:	3501      	adds	r5, #1
 80095c0:	68e3      	ldr	r3, [r4, #12]
 80095c2:	9903      	ldr	r1, [sp, #12]
 80095c4:	1a5b      	subs	r3, r3, r1
 80095c6:	42ab      	cmp	r3, r5
 80095c8:	dcf2      	bgt.n	80095b0 <_printf_i+0x218>
 80095ca:	e7eb      	b.n	80095a4 <_printf_i+0x20c>
 80095cc:	2500      	movs	r5, #0
 80095ce:	f104 0619 	add.w	r6, r4, #25
 80095d2:	e7f5      	b.n	80095c0 <_printf_i+0x228>
 80095d4:	0800ba9c 	.word	0x0800ba9c
 80095d8:	0800baad 	.word	0x0800baad

080095dc <std>:
 80095dc:	2300      	movs	r3, #0
 80095de:	b510      	push	{r4, lr}
 80095e0:	4604      	mov	r4, r0
 80095e2:	e9c0 3300 	strd	r3, r3, [r0]
 80095e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80095ea:	6083      	str	r3, [r0, #8]
 80095ec:	8181      	strh	r1, [r0, #12]
 80095ee:	6643      	str	r3, [r0, #100]	; 0x64
 80095f0:	81c2      	strh	r2, [r0, #14]
 80095f2:	6183      	str	r3, [r0, #24]
 80095f4:	4619      	mov	r1, r3
 80095f6:	2208      	movs	r2, #8
 80095f8:	305c      	adds	r0, #92	; 0x5c
 80095fa:	f000 f914 	bl	8009826 <memset>
 80095fe:	4b0d      	ldr	r3, [pc, #52]	; (8009634 <std+0x58>)
 8009600:	6224      	str	r4, [r4, #32]
 8009602:	6263      	str	r3, [r4, #36]	; 0x24
 8009604:	4b0c      	ldr	r3, [pc, #48]	; (8009638 <std+0x5c>)
 8009606:	62a3      	str	r3, [r4, #40]	; 0x28
 8009608:	4b0c      	ldr	r3, [pc, #48]	; (800963c <std+0x60>)
 800960a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800960c:	4b0c      	ldr	r3, [pc, #48]	; (8009640 <std+0x64>)
 800960e:	6323      	str	r3, [r4, #48]	; 0x30
 8009610:	4b0c      	ldr	r3, [pc, #48]	; (8009644 <std+0x68>)
 8009612:	429c      	cmp	r4, r3
 8009614:	d006      	beq.n	8009624 <std+0x48>
 8009616:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800961a:	4294      	cmp	r4, r2
 800961c:	d002      	beq.n	8009624 <std+0x48>
 800961e:	33d0      	adds	r3, #208	; 0xd0
 8009620:	429c      	cmp	r4, r3
 8009622:	d105      	bne.n	8009630 <std+0x54>
 8009624:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800962c:	f000 b978 	b.w	8009920 <__retarget_lock_init_recursive>
 8009630:	bd10      	pop	{r4, pc}
 8009632:	bf00      	nop
 8009634:	080097a1 	.word	0x080097a1
 8009638:	080097c3 	.word	0x080097c3
 800963c:	080097fb 	.word	0x080097fb
 8009640:	0800981f 	.word	0x0800981f
 8009644:	20001928 	.word	0x20001928

08009648 <stdio_exit_handler>:
 8009648:	4a02      	ldr	r2, [pc, #8]	; (8009654 <stdio_exit_handler+0xc>)
 800964a:	4903      	ldr	r1, [pc, #12]	; (8009658 <stdio_exit_handler+0x10>)
 800964c:	4803      	ldr	r0, [pc, #12]	; (800965c <stdio_exit_handler+0x14>)
 800964e:	f000 b869 	b.w	8009724 <_fwalk_sglue>
 8009652:	bf00      	nop
 8009654:	2000017c 	.word	0x2000017c
 8009658:	0800b2bd 	.word	0x0800b2bd
 800965c:	20000188 	.word	0x20000188

08009660 <cleanup_stdio>:
 8009660:	6841      	ldr	r1, [r0, #4]
 8009662:	4b0c      	ldr	r3, [pc, #48]	; (8009694 <cleanup_stdio+0x34>)
 8009664:	b510      	push	{r4, lr}
 8009666:	4299      	cmp	r1, r3
 8009668:	4604      	mov	r4, r0
 800966a:	d001      	beq.n	8009670 <cleanup_stdio+0x10>
 800966c:	f001 fe26 	bl	800b2bc <_fflush_r>
 8009670:	68a1      	ldr	r1, [r4, #8]
 8009672:	4b09      	ldr	r3, [pc, #36]	; (8009698 <cleanup_stdio+0x38>)
 8009674:	4299      	cmp	r1, r3
 8009676:	d002      	beq.n	800967e <cleanup_stdio+0x1e>
 8009678:	4620      	mov	r0, r4
 800967a:	f001 fe1f 	bl	800b2bc <_fflush_r>
 800967e:	68e1      	ldr	r1, [r4, #12]
 8009680:	4b06      	ldr	r3, [pc, #24]	; (800969c <cleanup_stdio+0x3c>)
 8009682:	4299      	cmp	r1, r3
 8009684:	d004      	beq.n	8009690 <cleanup_stdio+0x30>
 8009686:	4620      	mov	r0, r4
 8009688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800968c:	f001 be16 	b.w	800b2bc <_fflush_r>
 8009690:	bd10      	pop	{r4, pc}
 8009692:	bf00      	nop
 8009694:	20001928 	.word	0x20001928
 8009698:	20001990 	.word	0x20001990
 800969c:	200019f8 	.word	0x200019f8

080096a0 <global_stdio_init.part.0>:
 80096a0:	b510      	push	{r4, lr}
 80096a2:	4b0b      	ldr	r3, [pc, #44]	; (80096d0 <global_stdio_init.part.0+0x30>)
 80096a4:	4c0b      	ldr	r4, [pc, #44]	; (80096d4 <global_stdio_init.part.0+0x34>)
 80096a6:	4a0c      	ldr	r2, [pc, #48]	; (80096d8 <global_stdio_init.part.0+0x38>)
 80096a8:	4620      	mov	r0, r4
 80096aa:	601a      	str	r2, [r3, #0]
 80096ac:	2104      	movs	r1, #4
 80096ae:	2200      	movs	r2, #0
 80096b0:	f7ff ff94 	bl	80095dc <std>
 80096b4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80096b8:	2201      	movs	r2, #1
 80096ba:	2109      	movs	r1, #9
 80096bc:	f7ff ff8e 	bl	80095dc <std>
 80096c0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80096c4:	2202      	movs	r2, #2
 80096c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096ca:	2112      	movs	r1, #18
 80096cc:	f7ff bf86 	b.w	80095dc <std>
 80096d0:	20001a60 	.word	0x20001a60
 80096d4:	20001928 	.word	0x20001928
 80096d8:	08009649 	.word	0x08009649

080096dc <__sfp_lock_acquire>:
 80096dc:	4801      	ldr	r0, [pc, #4]	; (80096e4 <__sfp_lock_acquire+0x8>)
 80096de:	f000 b920 	b.w	8009922 <__retarget_lock_acquire_recursive>
 80096e2:	bf00      	nop
 80096e4:	20001a69 	.word	0x20001a69

080096e8 <__sfp_lock_release>:
 80096e8:	4801      	ldr	r0, [pc, #4]	; (80096f0 <__sfp_lock_release+0x8>)
 80096ea:	f000 b91b 	b.w	8009924 <__retarget_lock_release_recursive>
 80096ee:	bf00      	nop
 80096f0:	20001a69 	.word	0x20001a69

080096f4 <__sinit>:
 80096f4:	b510      	push	{r4, lr}
 80096f6:	4604      	mov	r4, r0
 80096f8:	f7ff fff0 	bl	80096dc <__sfp_lock_acquire>
 80096fc:	6a23      	ldr	r3, [r4, #32]
 80096fe:	b11b      	cbz	r3, 8009708 <__sinit+0x14>
 8009700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009704:	f7ff bff0 	b.w	80096e8 <__sfp_lock_release>
 8009708:	4b04      	ldr	r3, [pc, #16]	; (800971c <__sinit+0x28>)
 800970a:	6223      	str	r3, [r4, #32]
 800970c:	4b04      	ldr	r3, [pc, #16]	; (8009720 <__sinit+0x2c>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d1f5      	bne.n	8009700 <__sinit+0xc>
 8009714:	f7ff ffc4 	bl	80096a0 <global_stdio_init.part.0>
 8009718:	e7f2      	b.n	8009700 <__sinit+0xc>
 800971a:	bf00      	nop
 800971c:	08009661 	.word	0x08009661
 8009720:	20001a60 	.word	0x20001a60

08009724 <_fwalk_sglue>:
 8009724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009728:	4607      	mov	r7, r0
 800972a:	4688      	mov	r8, r1
 800972c:	4614      	mov	r4, r2
 800972e:	2600      	movs	r6, #0
 8009730:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009734:	f1b9 0901 	subs.w	r9, r9, #1
 8009738:	d505      	bpl.n	8009746 <_fwalk_sglue+0x22>
 800973a:	6824      	ldr	r4, [r4, #0]
 800973c:	2c00      	cmp	r4, #0
 800973e:	d1f7      	bne.n	8009730 <_fwalk_sglue+0xc>
 8009740:	4630      	mov	r0, r6
 8009742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009746:	89ab      	ldrh	r3, [r5, #12]
 8009748:	2b01      	cmp	r3, #1
 800974a:	d907      	bls.n	800975c <_fwalk_sglue+0x38>
 800974c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009750:	3301      	adds	r3, #1
 8009752:	d003      	beq.n	800975c <_fwalk_sglue+0x38>
 8009754:	4629      	mov	r1, r5
 8009756:	4638      	mov	r0, r7
 8009758:	47c0      	blx	r8
 800975a:	4306      	orrs	r6, r0
 800975c:	3568      	adds	r5, #104	; 0x68
 800975e:	e7e9      	b.n	8009734 <_fwalk_sglue+0x10>

08009760 <siprintf>:
 8009760:	b40e      	push	{r1, r2, r3}
 8009762:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009766:	b500      	push	{lr}
 8009768:	b09c      	sub	sp, #112	; 0x70
 800976a:	ab1d      	add	r3, sp, #116	; 0x74
 800976c:	9002      	str	r0, [sp, #8]
 800976e:	9006      	str	r0, [sp, #24]
 8009770:	9107      	str	r1, [sp, #28]
 8009772:	9104      	str	r1, [sp, #16]
 8009774:	4808      	ldr	r0, [pc, #32]	; (8009798 <siprintf+0x38>)
 8009776:	4909      	ldr	r1, [pc, #36]	; (800979c <siprintf+0x3c>)
 8009778:	f853 2b04 	ldr.w	r2, [r3], #4
 800977c:	9105      	str	r1, [sp, #20]
 800977e:	6800      	ldr	r0, [r0, #0]
 8009780:	a902      	add	r1, sp, #8
 8009782:	9301      	str	r3, [sp, #4]
 8009784:	f001 fc1a 	bl	800afbc <_svfiprintf_r>
 8009788:	2200      	movs	r2, #0
 800978a:	9b02      	ldr	r3, [sp, #8]
 800978c:	701a      	strb	r2, [r3, #0]
 800978e:	b01c      	add	sp, #112	; 0x70
 8009790:	f85d eb04 	ldr.w	lr, [sp], #4
 8009794:	b003      	add	sp, #12
 8009796:	4770      	bx	lr
 8009798:	200001d4 	.word	0x200001d4
 800979c:	ffff0208 	.word	0xffff0208

080097a0 <__sread>:
 80097a0:	b510      	push	{r4, lr}
 80097a2:	460c      	mov	r4, r1
 80097a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097a8:	f000 f86c 	bl	8009884 <_read_r>
 80097ac:	2800      	cmp	r0, #0
 80097ae:	bfab      	itete	ge
 80097b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80097b2:	89a3      	ldrhlt	r3, [r4, #12]
 80097b4:	181b      	addge	r3, r3, r0
 80097b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80097ba:	bfac      	ite	ge
 80097bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80097be:	81a3      	strhlt	r3, [r4, #12]
 80097c0:	bd10      	pop	{r4, pc}

080097c2 <__swrite>:
 80097c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097c6:	461f      	mov	r7, r3
 80097c8:	898b      	ldrh	r3, [r1, #12]
 80097ca:	4605      	mov	r5, r0
 80097cc:	05db      	lsls	r3, r3, #23
 80097ce:	460c      	mov	r4, r1
 80097d0:	4616      	mov	r6, r2
 80097d2:	d505      	bpl.n	80097e0 <__swrite+0x1e>
 80097d4:	2302      	movs	r3, #2
 80097d6:	2200      	movs	r2, #0
 80097d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097dc:	f000 f840 	bl	8009860 <_lseek_r>
 80097e0:	89a3      	ldrh	r3, [r4, #12]
 80097e2:	4632      	mov	r2, r6
 80097e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80097e8:	81a3      	strh	r3, [r4, #12]
 80097ea:	4628      	mov	r0, r5
 80097ec:	463b      	mov	r3, r7
 80097ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097f6:	f000 b857 	b.w	80098a8 <_write_r>

080097fa <__sseek>:
 80097fa:	b510      	push	{r4, lr}
 80097fc:	460c      	mov	r4, r1
 80097fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009802:	f000 f82d 	bl	8009860 <_lseek_r>
 8009806:	1c43      	adds	r3, r0, #1
 8009808:	89a3      	ldrh	r3, [r4, #12]
 800980a:	bf15      	itete	ne
 800980c:	6560      	strne	r0, [r4, #84]	; 0x54
 800980e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009812:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009816:	81a3      	strheq	r3, [r4, #12]
 8009818:	bf18      	it	ne
 800981a:	81a3      	strhne	r3, [r4, #12]
 800981c:	bd10      	pop	{r4, pc}

0800981e <__sclose>:
 800981e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009822:	f000 b80d 	b.w	8009840 <_close_r>

08009826 <memset>:
 8009826:	4603      	mov	r3, r0
 8009828:	4402      	add	r2, r0
 800982a:	4293      	cmp	r3, r2
 800982c:	d100      	bne.n	8009830 <memset+0xa>
 800982e:	4770      	bx	lr
 8009830:	f803 1b01 	strb.w	r1, [r3], #1
 8009834:	e7f9      	b.n	800982a <memset+0x4>
	...

08009838 <_localeconv_r>:
 8009838:	4800      	ldr	r0, [pc, #0]	; (800983c <_localeconv_r+0x4>)
 800983a:	4770      	bx	lr
 800983c:	200002c8 	.word	0x200002c8

08009840 <_close_r>:
 8009840:	b538      	push	{r3, r4, r5, lr}
 8009842:	2300      	movs	r3, #0
 8009844:	4d05      	ldr	r5, [pc, #20]	; (800985c <_close_r+0x1c>)
 8009846:	4604      	mov	r4, r0
 8009848:	4608      	mov	r0, r1
 800984a:	602b      	str	r3, [r5, #0]
 800984c:	f7f7 fc64 	bl	8001118 <_close>
 8009850:	1c43      	adds	r3, r0, #1
 8009852:	d102      	bne.n	800985a <_close_r+0x1a>
 8009854:	682b      	ldr	r3, [r5, #0]
 8009856:	b103      	cbz	r3, 800985a <_close_r+0x1a>
 8009858:	6023      	str	r3, [r4, #0]
 800985a:	bd38      	pop	{r3, r4, r5, pc}
 800985c:	20001a64 	.word	0x20001a64

08009860 <_lseek_r>:
 8009860:	b538      	push	{r3, r4, r5, lr}
 8009862:	4604      	mov	r4, r0
 8009864:	4608      	mov	r0, r1
 8009866:	4611      	mov	r1, r2
 8009868:	2200      	movs	r2, #0
 800986a:	4d05      	ldr	r5, [pc, #20]	; (8009880 <_lseek_r+0x20>)
 800986c:	602a      	str	r2, [r5, #0]
 800986e:	461a      	mov	r2, r3
 8009870:	f7f7 fc76 	bl	8001160 <_lseek>
 8009874:	1c43      	adds	r3, r0, #1
 8009876:	d102      	bne.n	800987e <_lseek_r+0x1e>
 8009878:	682b      	ldr	r3, [r5, #0]
 800987a:	b103      	cbz	r3, 800987e <_lseek_r+0x1e>
 800987c:	6023      	str	r3, [r4, #0]
 800987e:	bd38      	pop	{r3, r4, r5, pc}
 8009880:	20001a64 	.word	0x20001a64

08009884 <_read_r>:
 8009884:	b538      	push	{r3, r4, r5, lr}
 8009886:	4604      	mov	r4, r0
 8009888:	4608      	mov	r0, r1
 800988a:	4611      	mov	r1, r2
 800988c:	2200      	movs	r2, #0
 800988e:	4d05      	ldr	r5, [pc, #20]	; (80098a4 <_read_r+0x20>)
 8009890:	602a      	str	r2, [r5, #0]
 8009892:	461a      	mov	r2, r3
 8009894:	f7f7 fc07 	bl	80010a6 <_read>
 8009898:	1c43      	adds	r3, r0, #1
 800989a:	d102      	bne.n	80098a2 <_read_r+0x1e>
 800989c:	682b      	ldr	r3, [r5, #0]
 800989e:	b103      	cbz	r3, 80098a2 <_read_r+0x1e>
 80098a0:	6023      	str	r3, [r4, #0]
 80098a2:	bd38      	pop	{r3, r4, r5, pc}
 80098a4:	20001a64 	.word	0x20001a64

080098a8 <_write_r>:
 80098a8:	b538      	push	{r3, r4, r5, lr}
 80098aa:	4604      	mov	r4, r0
 80098ac:	4608      	mov	r0, r1
 80098ae:	4611      	mov	r1, r2
 80098b0:	2200      	movs	r2, #0
 80098b2:	4d05      	ldr	r5, [pc, #20]	; (80098c8 <_write_r+0x20>)
 80098b4:	602a      	str	r2, [r5, #0]
 80098b6:	461a      	mov	r2, r3
 80098b8:	f7f7 fc12 	bl	80010e0 <_write>
 80098bc:	1c43      	adds	r3, r0, #1
 80098be:	d102      	bne.n	80098c6 <_write_r+0x1e>
 80098c0:	682b      	ldr	r3, [r5, #0]
 80098c2:	b103      	cbz	r3, 80098c6 <_write_r+0x1e>
 80098c4:	6023      	str	r3, [r4, #0]
 80098c6:	bd38      	pop	{r3, r4, r5, pc}
 80098c8:	20001a64 	.word	0x20001a64

080098cc <__errno>:
 80098cc:	4b01      	ldr	r3, [pc, #4]	; (80098d4 <__errno+0x8>)
 80098ce:	6818      	ldr	r0, [r3, #0]
 80098d0:	4770      	bx	lr
 80098d2:	bf00      	nop
 80098d4:	200001d4 	.word	0x200001d4

080098d8 <__libc_init_array>:
 80098d8:	b570      	push	{r4, r5, r6, lr}
 80098da:	2600      	movs	r6, #0
 80098dc:	4d0c      	ldr	r5, [pc, #48]	; (8009910 <__libc_init_array+0x38>)
 80098de:	4c0d      	ldr	r4, [pc, #52]	; (8009914 <__libc_init_array+0x3c>)
 80098e0:	1b64      	subs	r4, r4, r5
 80098e2:	10a4      	asrs	r4, r4, #2
 80098e4:	42a6      	cmp	r6, r4
 80098e6:	d109      	bne.n	80098fc <__libc_init_array+0x24>
 80098e8:	f002 f888 	bl	800b9fc <_init>
 80098ec:	2600      	movs	r6, #0
 80098ee:	4d0a      	ldr	r5, [pc, #40]	; (8009918 <__libc_init_array+0x40>)
 80098f0:	4c0a      	ldr	r4, [pc, #40]	; (800991c <__libc_init_array+0x44>)
 80098f2:	1b64      	subs	r4, r4, r5
 80098f4:	10a4      	asrs	r4, r4, #2
 80098f6:	42a6      	cmp	r6, r4
 80098f8:	d105      	bne.n	8009906 <__libc_init_array+0x2e>
 80098fa:	bd70      	pop	{r4, r5, r6, pc}
 80098fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009900:	4798      	blx	r3
 8009902:	3601      	adds	r6, #1
 8009904:	e7ee      	b.n	80098e4 <__libc_init_array+0xc>
 8009906:	f855 3b04 	ldr.w	r3, [r5], #4
 800990a:	4798      	blx	r3
 800990c:	3601      	adds	r6, #1
 800990e:	e7f2      	b.n	80098f6 <__libc_init_array+0x1e>
 8009910:	0800bdfc 	.word	0x0800bdfc
 8009914:	0800bdfc 	.word	0x0800bdfc
 8009918:	0800bdfc 	.word	0x0800bdfc
 800991c:	0800be00 	.word	0x0800be00

08009920 <__retarget_lock_init_recursive>:
 8009920:	4770      	bx	lr

08009922 <__retarget_lock_acquire_recursive>:
 8009922:	4770      	bx	lr

08009924 <__retarget_lock_release_recursive>:
 8009924:	4770      	bx	lr

08009926 <memchr>:
 8009926:	4603      	mov	r3, r0
 8009928:	b510      	push	{r4, lr}
 800992a:	b2c9      	uxtb	r1, r1
 800992c:	4402      	add	r2, r0
 800992e:	4293      	cmp	r3, r2
 8009930:	4618      	mov	r0, r3
 8009932:	d101      	bne.n	8009938 <memchr+0x12>
 8009934:	2000      	movs	r0, #0
 8009936:	e003      	b.n	8009940 <memchr+0x1a>
 8009938:	7804      	ldrb	r4, [r0, #0]
 800993a:	3301      	adds	r3, #1
 800993c:	428c      	cmp	r4, r1
 800993e:	d1f6      	bne.n	800992e <memchr+0x8>
 8009940:	bd10      	pop	{r4, pc}

08009942 <quorem>:
 8009942:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009946:	6903      	ldr	r3, [r0, #16]
 8009948:	690c      	ldr	r4, [r1, #16]
 800994a:	4607      	mov	r7, r0
 800994c:	42a3      	cmp	r3, r4
 800994e:	db7f      	blt.n	8009a50 <quorem+0x10e>
 8009950:	3c01      	subs	r4, #1
 8009952:	f100 0514 	add.w	r5, r0, #20
 8009956:	f101 0814 	add.w	r8, r1, #20
 800995a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800995e:	9301      	str	r3, [sp, #4]
 8009960:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009964:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009968:	3301      	adds	r3, #1
 800996a:	429a      	cmp	r2, r3
 800996c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009970:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009974:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009978:	d331      	bcc.n	80099de <quorem+0x9c>
 800997a:	f04f 0e00 	mov.w	lr, #0
 800997e:	4640      	mov	r0, r8
 8009980:	46ac      	mov	ip, r5
 8009982:	46f2      	mov	sl, lr
 8009984:	f850 2b04 	ldr.w	r2, [r0], #4
 8009988:	b293      	uxth	r3, r2
 800998a:	fb06 e303 	mla	r3, r6, r3, lr
 800998e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009992:	0c1a      	lsrs	r2, r3, #16
 8009994:	b29b      	uxth	r3, r3
 8009996:	fb06 220e 	mla	r2, r6, lr, r2
 800999a:	ebaa 0303 	sub.w	r3, sl, r3
 800999e:	f8dc a000 	ldr.w	sl, [ip]
 80099a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80099a6:	fa1f fa8a 	uxth.w	sl, sl
 80099aa:	4453      	add	r3, sl
 80099ac:	f8dc a000 	ldr.w	sl, [ip]
 80099b0:	b292      	uxth	r2, r2
 80099b2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80099b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80099c0:	4581      	cmp	r9, r0
 80099c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80099c6:	f84c 3b04 	str.w	r3, [ip], #4
 80099ca:	d2db      	bcs.n	8009984 <quorem+0x42>
 80099cc:	f855 300b 	ldr.w	r3, [r5, fp]
 80099d0:	b92b      	cbnz	r3, 80099de <quorem+0x9c>
 80099d2:	9b01      	ldr	r3, [sp, #4]
 80099d4:	3b04      	subs	r3, #4
 80099d6:	429d      	cmp	r5, r3
 80099d8:	461a      	mov	r2, r3
 80099da:	d32d      	bcc.n	8009a38 <quorem+0xf6>
 80099dc:	613c      	str	r4, [r7, #16]
 80099de:	4638      	mov	r0, r7
 80099e0:	f001 f994 	bl	800ad0c <__mcmp>
 80099e4:	2800      	cmp	r0, #0
 80099e6:	db23      	blt.n	8009a30 <quorem+0xee>
 80099e8:	4629      	mov	r1, r5
 80099ea:	2000      	movs	r0, #0
 80099ec:	3601      	adds	r6, #1
 80099ee:	f858 2b04 	ldr.w	r2, [r8], #4
 80099f2:	f8d1 c000 	ldr.w	ip, [r1]
 80099f6:	b293      	uxth	r3, r2
 80099f8:	1ac3      	subs	r3, r0, r3
 80099fa:	0c12      	lsrs	r2, r2, #16
 80099fc:	fa1f f08c 	uxth.w	r0, ip
 8009a00:	4403      	add	r3, r0
 8009a02:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009a06:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a10:	45c1      	cmp	r9, r8
 8009a12:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009a16:	f841 3b04 	str.w	r3, [r1], #4
 8009a1a:	d2e8      	bcs.n	80099ee <quorem+0xac>
 8009a1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009a20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009a24:	b922      	cbnz	r2, 8009a30 <quorem+0xee>
 8009a26:	3b04      	subs	r3, #4
 8009a28:	429d      	cmp	r5, r3
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	d30a      	bcc.n	8009a44 <quorem+0x102>
 8009a2e:	613c      	str	r4, [r7, #16]
 8009a30:	4630      	mov	r0, r6
 8009a32:	b003      	add	sp, #12
 8009a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a38:	6812      	ldr	r2, [r2, #0]
 8009a3a:	3b04      	subs	r3, #4
 8009a3c:	2a00      	cmp	r2, #0
 8009a3e:	d1cd      	bne.n	80099dc <quorem+0x9a>
 8009a40:	3c01      	subs	r4, #1
 8009a42:	e7c8      	b.n	80099d6 <quorem+0x94>
 8009a44:	6812      	ldr	r2, [r2, #0]
 8009a46:	3b04      	subs	r3, #4
 8009a48:	2a00      	cmp	r2, #0
 8009a4a:	d1f0      	bne.n	8009a2e <quorem+0xec>
 8009a4c:	3c01      	subs	r4, #1
 8009a4e:	e7eb      	b.n	8009a28 <quorem+0xe6>
 8009a50:	2000      	movs	r0, #0
 8009a52:	e7ee      	b.n	8009a32 <quorem+0xf0>
 8009a54:	0000      	movs	r0, r0
	...

08009a58 <_dtoa_r>:
 8009a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a5c:	4616      	mov	r6, r2
 8009a5e:	461f      	mov	r7, r3
 8009a60:	69c4      	ldr	r4, [r0, #28]
 8009a62:	b099      	sub	sp, #100	; 0x64
 8009a64:	4605      	mov	r5, r0
 8009a66:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009a6a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009a6e:	b974      	cbnz	r4, 8009a8e <_dtoa_r+0x36>
 8009a70:	2010      	movs	r0, #16
 8009a72:	f000 fe1d 	bl	800a6b0 <malloc>
 8009a76:	4602      	mov	r2, r0
 8009a78:	61e8      	str	r0, [r5, #28]
 8009a7a:	b920      	cbnz	r0, 8009a86 <_dtoa_r+0x2e>
 8009a7c:	21ef      	movs	r1, #239	; 0xef
 8009a7e:	4bac      	ldr	r3, [pc, #688]	; (8009d30 <_dtoa_r+0x2d8>)
 8009a80:	48ac      	ldr	r0, [pc, #688]	; (8009d34 <_dtoa_r+0x2dc>)
 8009a82:	f001 fc7b 	bl	800b37c <__assert_func>
 8009a86:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a8a:	6004      	str	r4, [r0, #0]
 8009a8c:	60c4      	str	r4, [r0, #12]
 8009a8e:	69eb      	ldr	r3, [r5, #28]
 8009a90:	6819      	ldr	r1, [r3, #0]
 8009a92:	b151      	cbz	r1, 8009aaa <_dtoa_r+0x52>
 8009a94:	685a      	ldr	r2, [r3, #4]
 8009a96:	2301      	movs	r3, #1
 8009a98:	4093      	lsls	r3, r2
 8009a9a:	604a      	str	r2, [r1, #4]
 8009a9c:	608b      	str	r3, [r1, #8]
 8009a9e:	4628      	mov	r0, r5
 8009aa0:	f000 fefa 	bl	800a898 <_Bfree>
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	69eb      	ldr	r3, [r5, #28]
 8009aa8:	601a      	str	r2, [r3, #0]
 8009aaa:	1e3b      	subs	r3, r7, #0
 8009aac:	bfaf      	iteee	ge
 8009aae:	2300      	movge	r3, #0
 8009ab0:	2201      	movlt	r2, #1
 8009ab2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009ab6:	9305      	strlt	r3, [sp, #20]
 8009ab8:	bfa8      	it	ge
 8009aba:	f8c8 3000 	strge.w	r3, [r8]
 8009abe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009ac2:	4b9d      	ldr	r3, [pc, #628]	; (8009d38 <_dtoa_r+0x2e0>)
 8009ac4:	bfb8      	it	lt
 8009ac6:	f8c8 2000 	strlt.w	r2, [r8]
 8009aca:	ea33 0309 	bics.w	r3, r3, r9
 8009ace:	d119      	bne.n	8009b04 <_dtoa_r+0xac>
 8009ad0:	f242 730f 	movw	r3, #9999	; 0x270f
 8009ad4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009ad6:	6013      	str	r3, [r2, #0]
 8009ad8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009adc:	4333      	orrs	r3, r6
 8009ade:	f000 8589 	beq.w	800a5f4 <_dtoa_r+0xb9c>
 8009ae2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009ae4:	b953      	cbnz	r3, 8009afc <_dtoa_r+0xa4>
 8009ae6:	4b95      	ldr	r3, [pc, #596]	; (8009d3c <_dtoa_r+0x2e4>)
 8009ae8:	e023      	b.n	8009b32 <_dtoa_r+0xda>
 8009aea:	4b95      	ldr	r3, [pc, #596]	; (8009d40 <_dtoa_r+0x2e8>)
 8009aec:	9303      	str	r3, [sp, #12]
 8009aee:	3308      	adds	r3, #8
 8009af0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009af2:	6013      	str	r3, [r2, #0]
 8009af4:	9803      	ldr	r0, [sp, #12]
 8009af6:	b019      	add	sp, #100	; 0x64
 8009af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009afc:	4b8f      	ldr	r3, [pc, #572]	; (8009d3c <_dtoa_r+0x2e4>)
 8009afe:	9303      	str	r3, [sp, #12]
 8009b00:	3303      	adds	r3, #3
 8009b02:	e7f5      	b.n	8009af0 <_dtoa_r+0x98>
 8009b04:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009b08:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8009b0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009b10:	2200      	movs	r2, #0
 8009b12:	2300      	movs	r3, #0
 8009b14:	f7f6 ff48 	bl	80009a8 <__aeabi_dcmpeq>
 8009b18:	4680      	mov	r8, r0
 8009b1a:	b160      	cbz	r0, 8009b36 <_dtoa_r+0xde>
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009b20:	6013      	str	r3, [r2, #0]
 8009b22:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	f000 8562 	beq.w	800a5ee <_dtoa_r+0xb96>
 8009b2a:	4b86      	ldr	r3, [pc, #536]	; (8009d44 <_dtoa_r+0x2ec>)
 8009b2c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009b2e:	6013      	str	r3, [r2, #0]
 8009b30:	3b01      	subs	r3, #1
 8009b32:	9303      	str	r3, [sp, #12]
 8009b34:	e7de      	b.n	8009af4 <_dtoa_r+0x9c>
 8009b36:	ab16      	add	r3, sp, #88	; 0x58
 8009b38:	9301      	str	r3, [sp, #4]
 8009b3a:	ab17      	add	r3, sp, #92	; 0x5c
 8009b3c:	9300      	str	r3, [sp, #0]
 8009b3e:	4628      	mov	r0, r5
 8009b40:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009b44:	f001 f98a 	bl	800ae5c <__d2b>
 8009b48:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009b4c:	4682      	mov	sl, r0
 8009b4e:	2c00      	cmp	r4, #0
 8009b50:	d07e      	beq.n	8009c50 <_dtoa_r+0x1f8>
 8009b52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009b56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b58:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009b5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b60:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009b64:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009b68:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	2200      	movs	r2, #0
 8009b70:	4b75      	ldr	r3, [pc, #468]	; (8009d48 <_dtoa_r+0x2f0>)
 8009b72:	f7f6 faf9 	bl	8000168 <__aeabi_dsub>
 8009b76:	a368      	add	r3, pc, #416	; (adr r3, 8009d18 <_dtoa_r+0x2c0>)
 8009b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7c:	f7f6 fcac 	bl	80004d8 <__aeabi_dmul>
 8009b80:	a367      	add	r3, pc, #412	; (adr r3, 8009d20 <_dtoa_r+0x2c8>)
 8009b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b86:	f7f6 faf1 	bl	800016c <__adddf3>
 8009b8a:	4606      	mov	r6, r0
 8009b8c:	4620      	mov	r0, r4
 8009b8e:	460f      	mov	r7, r1
 8009b90:	f7f6 fc38 	bl	8000404 <__aeabi_i2d>
 8009b94:	a364      	add	r3, pc, #400	; (adr r3, 8009d28 <_dtoa_r+0x2d0>)
 8009b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9a:	f7f6 fc9d 	bl	80004d8 <__aeabi_dmul>
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	460b      	mov	r3, r1
 8009ba2:	4630      	mov	r0, r6
 8009ba4:	4639      	mov	r1, r7
 8009ba6:	f7f6 fae1 	bl	800016c <__adddf3>
 8009baa:	4606      	mov	r6, r0
 8009bac:	460f      	mov	r7, r1
 8009bae:	f7f6 ff43 	bl	8000a38 <__aeabi_d2iz>
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	4683      	mov	fp, r0
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	4630      	mov	r0, r6
 8009bba:	4639      	mov	r1, r7
 8009bbc:	f7f6 fefe 	bl	80009bc <__aeabi_dcmplt>
 8009bc0:	b148      	cbz	r0, 8009bd6 <_dtoa_r+0x17e>
 8009bc2:	4658      	mov	r0, fp
 8009bc4:	f7f6 fc1e 	bl	8000404 <__aeabi_i2d>
 8009bc8:	4632      	mov	r2, r6
 8009bca:	463b      	mov	r3, r7
 8009bcc:	f7f6 feec 	bl	80009a8 <__aeabi_dcmpeq>
 8009bd0:	b908      	cbnz	r0, 8009bd6 <_dtoa_r+0x17e>
 8009bd2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009bd6:	f1bb 0f16 	cmp.w	fp, #22
 8009bda:	d857      	bhi.n	8009c8c <_dtoa_r+0x234>
 8009bdc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009be0:	4b5a      	ldr	r3, [pc, #360]	; (8009d4c <_dtoa_r+0x2f4>)
 8009be2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bea:	f7f6 fee7 	bl	80009bc <__aeabi_dcmplt>
 8009bee:	2800      	cmp	r0, #0
 8009bf0:	d04e      	beq.n	8009c90 <_dtoa_r+0x238>
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009bf8:	930f      	str	r3, [sp, #60]	; 0x3c
 8009bfa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009bfc:	1b1b      	subs	r3, r3, r4
 8009bfe:	1e5a      	subs	r2, r3, #1
 8009c00:	bf46      	itte	mi
 8009c02:	f1c3 0901 	rsbmi	r9, r3, #1
 8009c06:	2300      	movmi	r3, #0
 8009c08:	f04f 0900 	movpl.w	r9, #0
 8009c0c:	9209      	str	r2, [sp, #36]	; 0x24
 8009c0e:	bf48      	it	mi
 8009c10:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009c12:	f1bb 0f00 	cmp.w	fp, #0
 8009c16:	db3d      	blt.n	8009c94 <_dtoa_r+0x23c>
 8009c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c1a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8009c1e:	445b      	add	r3, fp
 8009c20:	9309      	str	r3, [sp, #36]	; 0x24
 8009c22:	2300      	movs	r3, #0
 8009c24:	930a      	str	r3, [sp, #40]	; 0x28
 8009c26:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009c28:	2b09      	cmp	r3, #9
 8009c2a:	d867      	bhi.n	8009cfc <_dtoa_r+0x2a4>
 8009c2c:	2b05      	cmp	r3, #5
 8009c2e:	bfc4      	itt	gt
 8009c30:	3b04      	subgt	r3, #4
 8009c32:	9322      	strgt	r3, [sp, #136]	; 0x88
 8009c34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009c36:	bfc8      	it	gt
 8009c38:	2400      	movgt	r4, #0
 8009c3a:	f1a3 0302 	sub.w	r3, r3, #2
 8009c3e:	bfd8      	it	le
 8009c40:	2401      	movle	r4, #1
 8009c42:	2b03      	cmp	r3, #3
 8009c44:	f200 8086 	bhi.w	8009d54 <_dtoa_r+0x2fc>
 8009c48:	e8df f003 	tbb	[pc, r3]
 8009c4c:	5637392c 	.word	0x5637392c
 8009c50:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8009c54:	441c      	add	r4, r3
 8009c56:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009c5a:	2b20      	cmp	r3, #32
 8009c5c:	bfc1      	itttt	gt
 8009c5e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009c62:	fa09 f903 	lslgt.w	r9, r9, r3
 8009c66:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8009c6a:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009c6e:	bfd6      	itet	le
 8009c70:	f1c3 0320 	rsble	r3, r3, #32
 8009c74:	ea49 0003 	orrgt.w	r0, r9, r3
 8009c78:	fa06 f003 	lslle.w	r0, r6, r3
 8009c7c:	f7f6 fbb2 	bl	80003e4 <__aeabi_ui2d>
 8009c80:	2201      	movs	r2, #1
 8009c82:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009c86:	3c01      	subs	r4, #1
 8009c88:	9213      	str	r2, [sp, #76]	; 0x4c
 8009c8a:	e76f      	b.n	8009b6c <_dtoa_r+0x114>
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	e7b3      	b.n	8009bf8 <_dtoa_r+0x1a0>
 8009c90:	900f      	str	r0, [sp, #60]	; 0x3c
 8009c92:	e7b2      	b.n	8009bfa <_dtoa_r+0x1a2>
 8009c94:	f1cb 0300 	rsb	r3, fp, #0
 8009c98:	930a      	str	r3, [sp, #40]	; 0x28
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	eba9 090b 	sub.w	r9, r9, fp
 8009ca0:	930e      	str	r3, [sp, #56]	; 0x38
 8009ca2:	e7c0      	b.n	8009c26 <_dtoa_r+0x1ce>
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ca8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	dc55      	bgt.n	8009d5a <_dtoa_r+0x302>
 8009cae:	2301      	movs	r3, #1
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	9306      	str	r3, [sp, #24]
 8009cb4:	9308      	str	r3, [sp, #32]
 8009cb6:	9223      	str	r2, [sp, #140]	; 0x8c
 8009cb8:	e00b      	b.n	8009cd2 <_dtoa_r+0x27a>
 8009cba:	2301      	movs	r3, #1
 8009cbc:	e7f3      	b.n	8009ca6 <_dtoa_r+0x24e>
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	930b      	str	r3, [sp, #44]	; 0x2c
 8009cc2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009cc4:	445b      	add	r3, fp
 8009cc6:	9306      	str	r3, [sp, #24]
 8009cc8:	3301      	adds	r3, #1
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	9308      	str	r3, [sp, #32]
 8009cce:	bfb8      	it	lt
 8009cd0:	2301      	movlt	r3, #1
 8009cd2:	2100      	movs	r1, #0
 8009cd4:	2204      	movs	r2, #4
 8009cd6:	69e8      	ldr	r0, [r5, #28]
 8009cd8:	f102 0614 	add.w	r6, r2, #20
 8009cdc:	429e      	cmp	r6, r3
 8009cde:	d940      	bls.n	8009d62 <_dtoa_r+0x30a>
 8009ce0:	6041      	str	r1, [r0, #4]
 8009ce2:	4628      	mov	r0, r5
 8009ce4:	f000 fd98 	bl	800a818 <_Balloc>
 8009ce8:	9003      	str	r0, [sp, #12]
 8009cea:	2800      	cmp	r0, #0
 8009cec:	d13c      	bne.n	8009d68 <_dtoa_r+0x310>
 8009cee:	4602      	mov	r2, r0
 8009cf0:	f240 11af 	movw	r1, #431	; 0x1af
 8009cf4:	4b16      	ldr	r3, [pc, #88]	; (8009d50 <_dtoa_r+0x2f8>)
 8009cf6:	e6c3      	b.n	8009a80 <_dtoa_r+0x28>
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	e7e1      	b.n	8009cc0 <_dtoa_r+0x268>
 8009cfc:	2401      	movs	r4, #1
 8009cfe:	2300      	movs	r3, #0
 8009d00:	940b      	str	r4, [sp, #44]	; 0x2c
 8009d02:	9322      	str	r3, [sp, #136]	; 0x88
 8009d04:	f04f 33ff 	mov.w	r3, #4294967295
 8009d08:	2200      	movs	r2, #0
 8009d0a:	9306      	str	r3, [sp, #24]
 8009d0c:	9308      	str	r3, [sp, #32]
 8009d0e:	2312      	movs	r3, #18
 8009d10:	e7d1      	b.n	8009cb6 <_dtoa_r+0x25e>
 8009d12:	bf00      	nop
 8009d14:	f3af 8000 	nop.w
 8009d18:	636f4361 	.word	0x636f4361
 8009d1c:	3fd287a7 	.word	0x3fd287a7
 8009d20:	8b60c8b3 	.word	0x8b60c8b3
 8009d24:	3fc68a28 	.word	0x3fc68a28
 8009d28:	509f79fb 	.word	0x509f79fb
 8009d2c:	3fd34413 	.word	0x3fd34413
 8009d30:	0800bacb 	.word	0x0800bacb
 8009d34:	0800bae2 	.word	0x0800bae2
 8009d38:	7ff00000 	.word	0x7ff00000
 8009d3c:	0800bac7 	.word	0x0800bac7
 8009d40:	0800babe 	.word	0x0800babe
 8009d44:	0800ba9b 	.word	0x0800ba9b
 8009d48:	3ff80000 	.word	0x3ff80000
 8009d4c:	0800bbd0 	.word	0x0800bbd0
 8009d50:	0800bb3a 	.word	0x0800bb3a
 8009d54:	2301      	movs	r3, #1
 8009d56:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d58:	e7d4      	b.n	8009d04 <_dtoa_r+0x2ac>
 8009d5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009d5c:	9306      	str	r3, [sp, #24]
 8009d5e:	9308      	str	r3, [sp, #32]
 8009d60:	e7b7      	b.n	8009cd2 <_dtoa_r+0x27a>
 8009d62:	3101      	adds	r1, #1
 8009d64:	0052      	lsls	r2, r2, #1
 8009d66:	e7b7      	b.n	8009cd8 <_dtoa_r+0x280>
 8009d68:	69eb      	ldr	r3, [r5, #28]
 8009d6a:	9a03      	ldr	r2, [sp, #12]
 8009d6c:	601a      	str	r2, [r3, #0]
 8009d6e:	9b08      	ldr	r3, [sp, #32]
 8009d70:	2b0e      	cmp	r3, #14
 8009d72:	f200 80a8 	bhi.w	8009ec6 <_dtoa_r+0x46e>
 8009d76:	2c00      	cmp	r4, #0
 8009d78:	f000 80a5 	beq.w	8009ec6 <_dtoa_r+0x46e>
 8009d7c:	f1bb 0f00 	cmp.w	fp, #0
 8009d80:	dd34      	ble.n	8009dec <_dtoa_r+0x394>
 8009d82:	4b9a      	ldr	r3, [pc, #616]	; (8009fec <_dtoa_r+0x594>)
 8009d84:	f00b 020f 	and.w	r2, fp, #15
 8009d88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d8c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009d90:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009d94:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009d98:	ea4f 142b 	mov.w	r4, fp, asr #4
 8009d9c:	d016      	beq.n	8009dcc <_dtoa_r+0x374>
 8009d9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009da2:	4b93      	ldr	r3, [pc, #588]	; (8009ff0 <_dtoa_r+0x598>)
 8009da4:	2703      	movs	r7, #3
 8009da6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009daa:	f7f6 fcbf 	bl	800072c <__aeabi_ddiv>
 8009dae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009db2:	f004 040f 	and.w	r4, r4, #15
 8009db6:	4e8e      	ldr	r6, [pc, #568]	; (8009ff0 <_dtoa_r+0x598>)
 8009db8:	b954      	cbnz	r4, 8009dd0 <_dtoa_r+0x378>
 8009dba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009dbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009dc2:	f7f6 fcb3 	bl	800072c <__aeabi_ddiv>
 8009dc6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009dca:	e029      	b.n	8009e20 <_dtoa_r+0x3c8>
 8009dcc:	2702      	movs	r7, #2
 8009dce:	e7f2      	b.n	8009db6 <_dtoa_r+0x35e>
 8009dd0:	07e1      	lsls	r1, r4, #31
 8009dd2:	d508      	bpl.n	8009de6 <_dtoa_r+0x38e>
 8009dd4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009dd8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009ddc:	f7f6 fb7c 	bl	80004d8 <__aeabi_dmul>
 8009de0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009de4:	3701      	adds	r7, #1
 8009de6:	1064      	asrs	r4, r4, #1
 8009de8:	3608      	adds	r6, #8
 8009dea:	e7e5      	b.n	8009db8 <_dtoa_r+0x360>
 8009dec:	f000 80a5 	beq.w	8009f3a <_dtoa_r+0x4e2>
 8009df0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009df4:	f1cb 0400 	rsb	r4, fp, #0
 8009df8:	4b7c      	ldr	r3, [pc, #496]	; (8009fec <_dtoa_r+0x594>)
 8009dfa:	f004 020f 	and.w	r2, r4, #15
 8009dfe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e06:	f7f6 fb67 	bl	80004d8 <__aeabi_dmul>
 8009e0a:	2702      	movs	r7, #2
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e12:	4e77      	ldr	r6, [pc, #476]	; (8009ff0 <_dtoa_r+0x598>)
 8009e14:	1124      	asrs	r4, r4, #4
 8009e16:	2c00      	cmp	r4, #0
 8009e18:	f040 8084 	bne.w	8009f24 <_dtoa_r+0x4cc>
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d1d2      	bne.n	8009dc6 <_dtoa_r+0x36e>
 8009e20:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009e24:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009e28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	f000 8087 	beq.w	8009f3e <_dtoa_r+0x4e6>
 8009e30:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009e34:	2200      	movs	r2, #0
 8009e36:	4b6f      	ldr	r3, [pc, #444]	; (8009ff4 <_dtoa_r+0x59c>)
 8009e38:	f7f6 fdc0 	bl	80009bc <__aeabi_dcmplt>
 8009e3c:	2800      	cmp	r0, #0
 8009e3e:	d07e      	beq.n	8009f3e <_dtoa_r+0x4e6>
 8009e40:	9b08      	ldr	r3, [sp, #32]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d07b      	beq.n	8009f3e <_dtoa_r+0x4e6>
 8009e46:	9b06      	ldr	r3, [sp, #24]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	dd38      	ble.n	8009ebe <_dtoa_r+0x466>
 8009e4c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009e50:	2200      	movs	r2, #0
 8009e52:	4b69      	ldr	r3, [pc, #420]	; (8009ff8 <_dtoa_r+0x5a0>)
 8009e54:	f7f6 fb40 	bl	80004d8 <__aeabi_dmul>
 8009e58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e5c:	9c06      	ldr	r4, [sp, #24]
 8009e5e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8009e62:	3701      	adds	r7, #1
 8009e64:	4638      	mov	r0, r7
 8009e66:	f7f6 facd 	bl	8000404 <__aeabi_i2d>
 8009e6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e6e:	f7f6 fb33 	bl	80004d8 <__aeabi_dmul>
 8009e72:	2200      	movs	r2, #0
 8009e74:	4b61      	ldr	r3, [pc, #388]	; (8009ffc <_dtoa_r+0x5a4>)
 8009e76:	f7f6 f979 	bl	800016c <__adddf3>
 8009e7a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009e7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009e82:	9611      	str	r6, [sp, #68]	; 0x44
 8009e84:	2c00      	cmp	r4, #0
 8009e86:	d15d      	bne.n	8009f44 <_dtoa_r+0x4ec>
 8009e88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	4b5c      	ldr	r3, [pc, #368]	; (800a000 <_dtoa_r+0x5a8>)
 8009e90:	f7f6 f96a 	bl	8000168 <__aeabi_dsub>
 8009e94:	4602      	mov	r2, r0
 8009e96:	460b      	mov	r3, r1
 8009e98:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009e9c:	4633      	mov	r3, r6
 8009e9e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009ea0:	f7f6 fdaa 	bl	80009f8 <__aeabi_dcmpgt>
 8009ea4:	2800      	cmp	r0, #0
 8009ea6:	f040 8295 	bne.w	800a3d4 <_dtoa_r+0x97c>
 8009eaa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009eae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009eb0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009eb4:	f7f6 fd82 	bl	80009bc <__aeabi_dcmplt>
 8009eb8:	2800      	cmp	r0, #0
 8009eba:	f040 8289 	bne.w	800a3d0 <_dtoa_r+0x978>
 8009ebe:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009ec2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009ec6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	f2c0 8151 	blt.w	800a170 <_dtoa_r+0x718>
 8009ece:	f1bb 0f0e 	cmp.w	fp, #14
 8009ed2:	f300 814d 	bgt.w	800a170 <_dtoa_r+0x718>
 8009ed6:	4b45      	ldr	r3, [pc, #276]	; (8009fec <_dtoa_r+0x594>)
 8009ed8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009edc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009ee0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009ee4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	f280 80da 	bge.w	800a0a0 <_dtoa_r+0x648>
 8009eec:	9b08      	ldr	r3, [sp, #32]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	f300 80d6 	bgt.w	800a0a0 <_dtoa_r+0x648>
 8009ef4:	f040 826b 	bne.w	800a3ce <_dtoa_r+0x976>
 8009ef8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009efc:	2200      	movs	r2, #0
 8009efe:	4b40      	ldr	r3, [pc, #256]	; (800a000 <_dtoa_r+0x5a8>)
 8009f00:	f7f6 faea 	bl	80004d8 <__aeabi_dmul>
 8009f04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f08:	f7f6 fd6c 	bl	80009e4 <__aeabi_dcmpge>
 8009f0c:	9c08      	ldr	r4, [sp, #32]
 8009f0e:	4626      	mov	r6, r4
 8009f10:	2800      	cmp	r0, #0
 8009f12:	f040 8241 	bne.w	800a398 <_dtoa_r+0x940>
 8009f16:	2331      	movs	r3, #49	; 0x31
 8009f18:	9f03      	ldr	r7, [sp, #12]
 8009f1a:	f10b 0b01 	add.w	fp, fp, #1
 8009f1e:	f807 3b01 	strb.w	r3, [r7], #1
 8009f22:	e23d      	b.n	800a3a0 <_dtoa_r+0x948>
 8009f24:	07e2      	lsls	r2, r4, #31
 8009f26:	d505      	bpl.n	8009f34 <_dtoa_r+0x4dc>
 8009f28:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009f2c:	f7f6 fad4 	bl	80004d8 <__aeabi_dmul>
 8009f30:	2301      	movs	r3, #1
 8009f32:	3701      	adds	r7, #1
 8009f34:	1064      	asrs	r4, r4, #1
 8009f36:	3608      	adds	r6, #8
 8009f38:	e76d      	b.n	8009e16 <_dtoa_r+0x3be>
 8009f3a:	2702      	movs	r7, #2
 8009f3c:	e770      	b.n	8009e20 <_dtoa_r+0x3c8>
 8009f3e:	46d8      	mov	r8, fp
 8009f40:	9c08      	ldr	r4, [sp, #32]
 8009f42:	e78f      	b.n	8009e64 <_dtoa_r+0x40c>
 8009f44:	9903      	ldr	r1, [sp, #12]
 8009f46:	4b29      	ldr	r3, [pc, #164]	; (8009fec <_dtoa_r+0x594>)
 8009f48:	4421      	add	r1, r4
 8009f4a:	9112      	str	r1, [sp, #72]	; 0x48
 8009f4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f4e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009f52:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009f56:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009f5a:	2900      	cmp	r1, #0
 8009f5c:	d054      	beq.n	800a008 <_dtoa_r+0x5b0>
 8009f5e:	2000      	movs	r0, #0
 8009f60:	4928      	ldr	r1, [pc, #160]	; (800a004 <_dtoa_r+0x5ac>)
 8009f62:	f7f6 fbe3 	bl	800072c <__aeabi_ddiv>
 8009f66:	463b      	mov	r3, r7
 8009f68:	4632      	mov	r2, r6
 8009f6a:	f7f6 f8fd 	bl	8000168 <__aeabi_dsub>
 8009f6e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009f72:	9f03      	ldr	r7, [sp, #12]
 8009f74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f78:	f7f6 fd5e 	bl	8000a38 <__aeabi_d2iz>
 8009f7c:	4604      	mov	r4, r0
 8009f7e:	f7f6 fa41 	bl	8000404 <__aeabi_i2d>
 8009f82:	4602      	mov	r2, r0
 8009f84:	460b      	mov	r3, r1
 8009f86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f8a:	f7f6 f8ed 	bl	8000168 <__aeabi_dsub>
 8009f8e:	4602      	mov	r2, r0
 8009f90:	460b      	mov	r3, r1
 8009f92:	3430      	adds	r4, #48	; 0x30
 8009f94:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009f98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009f9c:	f807 4b01 	strb.w	r4, [r7], #1
 8009fa0:	f7f6 fd0c 	bl	80009bc <__aeabi_dcmplt>
 8009fa4:	2800      	cmp	r0, #0
 8009fa6:	d173      	bne.n	800a090 <_dtoa_r+0x638>
 8009fa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009fac:	2000      	movs	r0, #0
 8009fae:	4911      	ldr	r1, [pc, #68]	; (8009ff4 <_dtoa_r+0x59c>)
 8009fb0:	f7f6 f8da 	bl	8000168 <__aeabi_dsub>
 8009fb4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009fb8:	f7f6 fd00 	bl	80009bc <__aeabi_dcmplt>
 8009fbc:	2800      	cmp	r0, #0
 8009fbe:	f040 80b6 	bne.w	800a12e <_dtoa_r+0x6d6>
 8009fc2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009fc4:	429f      	cmp	r7, r3
 8009fc6:	f43f af7a 	beq.w	8009ebe <_dtoa_r+0x466>
 8009fca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009fce:	2200      	movs	r2, #0
 8009fd0:	4b09      	ldr	r3, [pc, #36]	; (8009ff8 <_dtoa_r+0x5a0>)
 8009fd2:	f7f6 fa81 	bl	80004d8 <__aeabi_dmul>
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009fdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009fe0:	4b05      	ldr	r3, [pc, #20]	; (8009ff8 <_dtoa_r+0x5a0>)
 8009fe2:	f7f6 fa79 	bl	80004d8 <__aeabi_dmul>
 8009fe6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009fea:	e7c3      	b.n	8009f74 <_dtoa_r+0x51c>
 8009fec:	0800bbd0 	.word	0x0800bbd0
 8009ff0:	0800bba8 	.word	0x0800bba8
 8009ff4:	3ff00000 	.word	0x3ff00000
 8009ff8:	40240000 	.word	0x40240000
 8009ffc:	401c0000 	.word	0x401c0000
 800a000:	40140000 	.word	0x40140000
 800a004:	3fe00000 	.word	0x3fe00000
 800a008:	4630      	mov	r0, r6
 800a00a:	4639      	mov	r1, r7
 800a00c:	f7f6 fa64 	bl	80004d8 <__aeabi_dmul>
 800a010:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a012:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a016:	9c03      	ldr	r4, [sp, #12]
 800a018:	9314      	str	r3, [sp, #80]	; 0x50
 800a01a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a01e:	f7f6 fd0b 	bl	8000a38 <__aeabi_d2iz>
 800a022:	9015      	str	r0, [sp, #84]	; 0x54
 800a024:	f7f6 f9ee 	bl	8000404 <__aeabi_i2d>
 800a028:	4602      	mov	r2, r0
 800a02a:	460b      	mov	r3, r1
 800a02c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a030:	f7f6 f89a 	bl	8000168 <__aeabi_dsub>
 800a034:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a036:	4606      	mov	r6, r0
 800a038:	3330      	adds	r3, #48	; 0x30
 800a03a:	f804 3b01 	strb.w	r3, [r4], #1
 800a03e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a040:	460f      	mov	r7, r1
 800a042:	429c      	cmp	r4, r3
 800a044:	f04f 0200 	mov.w	r2, #0
 800a048:	d124      	bne.n	800a094 <_dtoa_r+0x63c>
 800a04a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a04e:	4baf      	ldr	r3, [pc, #700]	; (800a30c <_dtoa_r+0x8b4>)
 800a050:	f7f6 f88c 	bl	800016c <__adddf3>
 800a054:	4602      	mov	r2, r0
 800a056:	460b      	mov	r3, r1
 800a058:	4630      	mov	r0, r6
 800a05a:	4639      	mov	r1, r7
 800a05c:	f7f6 fccc 	bl	80009f8 <__aeabi_dcmpgt>
 800a060:	2800      	cmp	r0, #0
 800a062:	d163      	bne.n	800a12c <_dtoa_r+0x6d4>
 800a064:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a068:	2000      	movs	r0, #0
 800a06a:	49a8      	ldr	r1, [pc, #672]	; (800a30c <_dtoa_r+0x8b4>)
 800a06c:	f7f6 f87c 	bl	8000168 <__aeabi_dsub>
 800a070:	4602      	mov	r2, r0
 800a072:	460b      	mov	r3, r1
 800a074:	4630      	mov	r0, r6
 800a076:	4639      	mov	r1, r7
 800a078:	f7f6 fca0 	bl	80009bc <__aeabi_dcmplt>
 800a07c:	2800      	cmp	r0, #0
 800a07e:	f43f af1e 	beq.w	8009ebe <_dtoa_r+0x466>
 800a082:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a084:	1e7b      	subs	r3, r7, #1
 800a086:	9314      	str	r3, [sp, #80]	; 0x50
 800a088:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a08c:	2b30      	cmp	r3, #48	; 0x30
 800a08e:	d0f8      	beq.n	800a082 <_dtoa_r+0x62a>
 800a090:	46c3      	mov	fp, r8
 800a092:	e03b      	b.n	800a10c <_dtoa_r+0x6b4>
 800a094:	4b9e      	ldr	r3, [pc, #632]	; (800a310 <_dtoa_r+0x8b8>)
 800a096:	f7f6 fa1f 	bl	80004d8 <__aeabi_dmul>
 800a09a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a09e:	e7bc      	b.n	800a01a <_dtoa_r+0x5c2>
 800a0a0:	9f03      	ldr	r7, [sp, #12]
 800a0a2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a0a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a0aa:	4640      	mov	r0, r8
 800a0ac:	4649      	mov	r1, r9
 800a0ae:	f7f6 fb3d 	bl	800072c <__aeabi_ddiv>
 800a0b2:	f7f6 fcc1 	bl	8000a38 <__aeabi_d2iz>
 800a0b6:	4604      	mov	r4, r0
 800a0b8:	f7f6 f9a4 	bl	8000404 <__aeabi_i2d>
 800a0bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a0c0:	f7f6 fa0a 	bl	80004d8 <__aeabi_dmul>
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	460b      	mov	r3, r1
 800a0c8:	4640      	mov	r0, r8
 800a0ca:	4649      	mov	r1, r9
 800a0cc:	f7f6 f84c 	bl	8000168 <__aeabi_dsub>
 800a0d0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a0d4:	f807 6b01 	strb.w	r6, [r7], #1
 800a0d8:	9e03      	ldr	r6, [sp, #12]
 800a0da:	f8dd c020 	ldr.w	ip, [sp, #32]
 800a0de:	1bbe      	subs	r6, r7, r6
 800a0e0:	45b4      	cmp	ip, r6
 800a0e2:	4602      	mov	r2, r0
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	d136      	bne.n	800a156 <_dtoa_r+0x6fe>
 800a0e8:	f7f6 f840 	bl	800016c <__adddf3>
 800a0ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a0f0:	4680      	mov	r8, r0
 800a0f2:	4689      	mov	r9, r1
 800a0f4:	f7f6 fc80 	bl	80009f8 <__aeabi_dcmpgt>
 800a0f8:	bb58      	cbnz	r0, 800a152 <_dtoa_r+0x6fa>
 800a0fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a0fe:	4640      	mov	r0, r8
 800a100:	4649      	mov	r1, r9
 800a102:	f7f6 fc51 	bl	80009a8 <__aeabi_dcmpeq>
 800a106:	b108      	cbz	r0, 800a10c <_dtoa_r+0x6b4>
 800a108:	07e3      	lsls	r3, r4, #31
 800a10a:	d422      	bmi.n	800a152 <_dtoa_r+0x6fa>
 800a10c:	4651      	mov	r1, sl
 800a10e:	4628      	mov	r0, r5
 800a110:	f000 fbc2 	bl	800a898 <_Bfree>
 800a114:	2300      	movs	r3, #0
 800a116:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a118:	703b      	strb	r3, [r7, #0]
 800a11a:	f10b 0301 	add.w	r3, fp, #1
 800a11e:	6013      	str	r3, [r2, #0]
 800a120:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a122:	2b00      	cmp	r3, #0
 800a124:	f43f ace6 	beq.w	8009af4 <_dtoa_r+0x9c>
 800a128:	601f      	str	r7, [r3, #0]
 800a12a:	e4e3      	b.n	8009af4 <_dtoa_r+0x9c>
 800a12c:	4627      	mov	r7, r4
 800a12e:	463b      	mov	r3, r7
 800a130:	461f      	mov	r7, r3
 800a132:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a136:	2a39      	cmp	r2, #57	; 0x39
 800a138:	d107      	bne.n	800a14a <_dtoa_r+0x6f2>
 800a13a:	9a03      	ldr	r2, [sp, #12]
 800a13c:	429a      	cmp	r2, r3
 800a13e:	d1f7      	bne.n	800a130 <_dtoa_r+0x6d8>
 800a140:	2230      	movs	r2, #48	; 0x30
 800a142:	9903      	ldr	r1, [sp, #12]
 800a144:	f108 0801 	add.w	r8, r8, #1
 800a148:	700a      	strb	r2, [r1, #0]
 800a14a:	781a      	ldrb	r2, [r3, #0]
 800a14c:	3201      	adds	r2, #1
 800a14e:	701a      	strb	r2, [r3, #0]
 800a150:	e79e      	b.n	800a090 <_dtoa_r+0x638>
 800a152:	46d8      	mov	r8, fp
 800a154:	e7eb      	b.n	800a12e <_dtoa_r+0x6d6>
 800a156:	2200      	movs	r2, #0
 800a158:	4b6d      	ldr	r3, [pc, #436]	; (800a310 <_dtoa_r+0x8b8>)
 800a15a:	f7f6 f9bd 	bl	80004d8 <__aeabi_dmul>
 800a15e:	2200      	movs	r2, #0
 800a160:	2300      	movs	r3, #0
 800a162:	4680      	mov	r8, r0
 800a164:	4689      	mov	r9, r1
 800a166:	f7f6 fc1f 	bl	80009a8 <__aeabi_dcmpeq>
 800a16a:	2800      	cmp	r0, #0
 800a16c:	d09b      	beq.n	800a0a6 <_dtoa_r+0x64e>
 800a16e:	e7cd      	b.n	800a10c <_dtoa_r+0x6b4>
 800a170:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a172:	2a00      	cmp	r2, #0
 800a174:	f000 80c4 	beq.w	800a300 <_dtoa_r+0x8a8>
 800a178:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a17a:	2a01      	cmp	r2, #1
 800a17c:	f300 80a8 	bgt.w	800a2d0 <_dtoa_r+0x878>
 800a180:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a182:	2a00      	cmp	r2, #0
 800a184:	f000 80a0 	beq.w	800a2c8 <_dtoa_r+0x870>
 800a188:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a18c:	464f      	mov	r7, r9
 800a18e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a190:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a192:	2101      	movs	r1, #1
 800a194:	441a      	add	r2, r3
 800a196:	4628      	mov	r0, r5
 800a198:	4499      	add	r9, r3
 800a19a:	9209      	str	r2, [sp, #36]	; 0x24
 800a19c:	f000 fc32 	bl	800aa04 <__i2b>
 800a1a0:	4606      	mov	r6, r0
 800a1a2:	b15f      	cbz	r7, 800a1bc <_dtoa_r+0x764>
 800a1a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	dd08      	ble.n	800a1bc <_dtoa_r+0x764>
 800a1aa:	42bb      	cmp	r3, r7
 800a1ac:	bfa8      	it	ge
 800a1ae:	463b      	movge	r3, r7
 800a1b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1b2:	eba9 0903 	sub.w	r9, r9, r3
 800a1b6:	1aff      	subs	r7, r7, r3
 800a1b8:	1ad3      	subs	r3, r2, r3
 800a1ba:	9309      	str	r3, [sp, #36]	; 0x24
 800a1bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1be:	b1f3      	cbz	r3, 800a1fe <_dtoa_r+0x7a6>
 800a1c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	f000 80a0 	beq.w	800a308 <_dtoa_r+0x8b0>
 800a1c8:	2c00      	cmp	r4, #0
 800a1ca:	dd10      	ble.n	800a1ee <_dtoa_r+0x796>
 800a1cc:	4631      	mov	r1, r6
 800a1ce:	4622      	mov	r2, r4
 800a1d0:	4628      	mov	r0, r5
 800a1d2:	f000 fcd5 	bl	800ab80 <__pow5mult>
 800a1d6:	4652      	mov	r2, sl
 800a1d8:	4601      	mov	r1, r0
 800a1da:	4606      	mov	r6, r0
 800a1dc:	4628      	mov	r0, r5
 800a1de:	f000 fc27 	bl	800aa30 <__multiply>
 800a1e2:	4680      	mov	r8, r0
 800a1e4:	4651      	mov	r1, sl
 800a1e6:	4628      	mov	r0, r5
 800a1e8:	f000 fb56 	bl	800a898 <_Bfree>
 800a1ec:	46c2      	mov	sl, r8
 800a1ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1f0:	1b1a      	subs	r2, r3, r4
 800a1f2:	d004      	beq.n	800a1fe <_dtoa_r+0x7a6>
 800a1f4:	4651      	mov	r1, sl
 800a1f6:	4628      	mov	r0, r5
 800a1f8:	f000 fcc2 	bl	800ab80 <__pow5mult>
 800a1fc:	4682      	mov	sl, r0
 800a1fe:	2101      	movs	r1, #1
 800a200:	4628      	mov	r0, r5
 800a202:	f000 fbff 	bl	800aa04 <__i2b>
 800a206:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a208:	4604      	mov	r4, r0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	f340 8082 	ble.w	800a314 <_dtoa_r+0x8bc>
 800a210:	461a      	mov	r2, r3
 800a212:	4601      	mov	r1, r0
 800a214:	4628      	mov	r0, r5
 800a216:	f000 fcb3 	bl	800ab80 <__pow5mult>
 800a21a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a21c:	4604      	mov	r4, r0
 800a21e:	2b01      	cmp	r3, #1
 800a220:	dd7b      	ble.n	800a31a <_dtoa_r+0x8c2>
 800a222:	f04f 0800 	mov.w	r8, #0
 800a226:	6923      	ldr	r3, [r4, #16]
 800a228:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a22c:	6918      	ldr	r0, [r3, #16]
 800a22e:	f000 fb9b 	bl	800a968 <__hi0bits>
 800a232:	f1c0 0020 	rsb	r0, r0, #32
 800a236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a238:	4418      	add	r0, r3
 800a23a:	f010 001f 	ands.w	r0, r0, #31
 800a23e:	f000 8092 	beq.w	800a366 <_dtoa_r+0x90e>
 800a242:	f1c0 0320 	rsb	r3, r0, #32
 800a246:	2b04      	cmp	r3, #4
 800a248:	f340 8085 	ble.w	800a356 <_dtoa_r+0x8fe>
 800a24c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a24e:	f1c0 001c 	rsb	r0, r0, #28
 800a252:	4403      	add	r3, r0
 800a254:	4481      	add	r9, r0
 800a256:	4407      	add	r7, r0
 800a258:	9309      	str	r3, [sp, #36]	; 0x24
 800a25a:	f1b9 0f00 	cmp.w	r9, #0
 800a25e:	dd05      	ble.n	800a26c <_dtoa_r+0x814>
 800a260:	4651      	mov	r1, sl
 800a262:	464a      	mov	r2, r9
 800a264:	4628      	mov	r0, r5
 800a266:	f000 fce5 	bl	800ac34 <__lshift>
 800a26a:	4682      	mov	sl, r0
 800a26c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a26e:	2b00      	cmp	r3, #0
 800a270:	dd05      	ble.n	800a27e <_dtoa_r+0x826>
 800a272:	4621      	mov	r1, r4
 800a274:	461a      	mov	r2, r3
 800a276:	4628      	mov	r0, r5
 800a278:	f000 fcdc 	bl	800ac34 <__lshift>
 800a27c:	4604      	mov	r4, r0
 800a27e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a280:	2b00      	cmp	r3, #0
 800a282:	d072      	beq.n	800a36a <_dtoa_r+0x912>
 800a284:	4621      	mov	r1, r4
 800a286:	4650      	mov	r0, sl
 800a288:	f000 fd40 	bl	800ad0c <__mcmp>
 800a28c:	2800      	cmp	r0, #0
 800a28e:	da6c      	bge.n	800a36a <_dtoa_r+0x912>
 800a290:	2300      	movs	r3, #0
 800a292:	4651      	mov	r1, sl
 800a294:	220a      	movs	r2, #10
 800a296:	4628      	mov	r0, r5
 800a298:	f000 fb20 	bl	800a8dc <__multadd>
 800a29c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a29e:	4682      	mov	sl, r0
 800a2a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	f000 81ac 	beq.w	800a602 <_dtoa_r+0xbaa>
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	4631      	mov	r1, r6
 800a2ae:	220a      	movs	r2, #10
 800a2b0:	4628      	mov	r0, r5
 800a2b2:	f000 fb13 	bl	800a8dc <__multadd>
 800a2b6:	9b06      	ldr	r3, [sp, #24]
 800a2b8:	4606      	mov	r6, r0
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	f300 8093 	bgt.w	800a3e6 <_dtoa_r+0x98e>
 800a2c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a2c2:	2b02      	cmp	r3, #2
 800a2c4:	dc59      	bgt.n	800a37a <_dtoa_r+0x922>
 800a2c6:	e08e      	b.n	800a3e6 <_dtoa_r+0x98e>
 800a2c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a2ca:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a2ce:	e75d      	b.n	800a18c <_dtoa_r+0x734>
 800a2d0:	9b08      	ldr	r3, [sp, #32]
 800a2d2:	1e5c      	subs	r4, r3, #1
 800a2d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2d6:	42a3      	cmp	r3, r4
 800a2d8:	bfbf      	itttt	lt
 800a2da:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a2dc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800a2de:	1ae3      	sublt	r3, r4, r3
 800a2e0:	18d2      	addlt	r2, r2, r3
 800a2e2:	bfa8      	it	ge
 800a2e4:	1b1c      	subge	r4, r3, r4
 800a2e6:	9b08      	ldr	r3, [sp, #32]
 800a2e8:	bfbe      	ittt	lt
 800a2ea:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a2ec:	920e      	strlt	r2, [sp, #56]	; 0x38
 800a2ee:	2400      	movlt	r4, #0
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	bfb5      	itete	lt
 800a2f4:	eba9 0703 	sublt.w	r7, r9, r3
 800a2f8:	464f      	movge	r7, r9
 800a2fa:	2300      	movlt	r3, #0
 800a2fc:	9b08      	ldrge	r3, [sp, #32]
 800a2fe:	e747      	b.n	800a190 <_dtoa_r+0x738>
 800a300:	464f      	mov	r7, r9
 800a302:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a304:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a306:	e74c      	b.n	800a1a2 <_dtoa_r+0x74a>
 800a308:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a30a:	e773      	b.n	800a1f4 <_dtoa_r+0x79c>
 800a30c:	3fe00000 	.word	0x3fe00000
 800a310:	40240000 	.word	0x40240000
 800a314:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a316:	2b01      	cmp	r3, #1
 800a318:	dc18      	bgt.n	800a34c <_dtoa_r+0x8f4>
 800a31a:	9b04      	ldr	r3, [sp, #16]
 800a31c:	b9b3      	cbnz	r3, 800a34c <_dtoa_r+0x8f4>
 800a31e:	9b05      	ldr	r3, [sp, #20]
 800a320:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a324:	b993      	cbnz	r3, 800a34c <_dtoa_r+0x8f4>
 800a326:	9b05      	ldr	r3, [sp, #20]
 800a328:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a32c:	0d1b      	lsrs	r3, r3, #20
 800a32e:	051b      	lsls	r3, r3, #20
 800a330:	b17b      	cbz	r3, 800a352 <_dtoa_r+0x8fa>
 800a332:	f04f 0801 	mov.w	r8, #1
 800a336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a338:	f109 0901 	add.w	r9, r9, #1
 800a33c:	3301      	adds	r3, #1
 800a33e:	9309      	str	r3, [sp, #36]	; 0x24
 800a340:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a342:	2b00      	cmp	r3, #0
 800a344:	f47f af6f 	bne.w	800a226 <_dtoa_r+0x7ce>
 800a348:	2001      	movs	r0, #1
 800a34a:	e774      	b.n	800a236 <_dtoa_r+0x7de>
 800a34c:	f04f 0800 	mov.w	r8, #0
 800a350:	e7f6      	b.n	800a340 <_dtoa_r+0x8e8>
 800a352:	4698      	mov	r8, r3
 800a354:	e7f4      	b.n	800a340 <_dtoa_r+0x8e8>
 800a356:	d080      	beq.n	800a25a <_dtoa_r+0x802>
 800a358:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a35a:	331c      	adds	r3, #28
 800a35c:	441a      	add	r2, r3
 800a35e:	4499      	add	r9, r3
 800a360:	441f      	add	r7, r3
 800a362:	9209      	str	r2, [sp, #36]	; 0x24
 800a364:	e779      	b.n	800a25a <_dtoa_r+0x802>
 800a366:	4603      	mov	r3, r0
 800a368:	e7f6      	b.n	800a358 <_dtoa_r+0x900>
 800a36a:	9b08      	ldr	r3, [sp, #32]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	dc34      	bgt.n	800a3da <_dtoa_r+0x982>
 800a370:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a372:	2b02      	cmp	r3, #2
 800a374:	dd31      	ble.n	800a3da <_dtoa_r+0x982>
 800a376:	9b08      	ldr	r3, [sp, #32]
 800a378:	9306      	str	r3, [sp, #24]
 800a37a:	9b06      	ldr	r3, [sp, #24]
 800a37c:	b963      	cbnz	r3, 800a398 <_dtoa_r+0x940>
 800a37e:	4621      	mov	r1, r4
 800a380:	2205      	movs	r2, #5
 800a382:	4628      	mov	r0, r5
 800a384:	f000 faaa 	bl	800a8dc <__multadd>
 800a388:	4601      	mov	r1, r0
 800a38a:	4604      	mov	r4, r0
 800a38c:	4650      	mov	r0, sl
 800a38e:	f000 fcbd 	bl	800ad0c <__mcmp>
 800a392:	2800      	cmp	r0, #0
 800a394:	f73f adbf 	bgt.w	8009f16 <_dtoa_r+0x4be>
 800a398:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a39a:	9f03      	ldr	r7, [sp, #12]
 800a39c:	ea6f 0b03 	mvn.w	fp, r3
 800a3a0:	f04f 0800 	mov.w	r8, #0
 800a3a4:	4621      	mov	r1, r4
 800a3a6:	4628      	mov	r0, r5
 800a3a8:	f000 fa76 	bl	800a898 <_Bfree>
 800a3ac:	2e00      	cmp	r6, #0
 800a3ae:	f43f aead 	beq.w	800a10c <_dtoa_r+0x6b4>
 800a3b2:	f1b8 0f00 	cmp.w	r8, #0
 800a3b6:	d005      	beq.n	800a3c4 <_dtoa_r+0x96c>
 800a3b8:	45b0      	cmp	r8, r6
 800a3ba:	d003      	beq.n	800a3c4 <_dtoa_r+0x96c>
 800a3bc:	4641      	mov	r1, r8
 800a3be:	4628      	mov	r0, r5
 800a3c0:	f000 fa6a 	bl	800a898 <_Bfree>
 800a3c4:	4631      	mov	r1, r6
 800a3c6:	4628      	mov	r0, r5
 800a3c8:	f000 fa66 	bl	800a898 <_Bfree>
 800a3cc:	e69e      	b.n	800a10c <_dtoa_r+0x6b4>
 800a3ce:	2400      	movs	r4, #0
 800a3d0:	4626      	mov	r6, r4
 800a3d2:	e7e1      	b.n	800a398 <_dtoa_r+0x940>
 800a3d4:	46c3      	mov	fp, r8
 800a3d6:	4626      	mov	r6, r4
 800a3d8:	e59d      	b.n	8009f16 <_dtoa_r+0x4be>
 800a3da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	f000 80c8 	beq.w	800a572 <_dtoa_r+0xb1a>
 800a3e2:	9b08      	ldr	r3, [sp, #32]
 800a3e4:	9306      	str	r3, [sp, #24]
 800a3e6:	2f00      	cmp	r7, #0
 800a3e8:	dd05      	ble.n	800a3f6 <_dtoa_r+0x99e>
 800a3ea:	4631      	mov	r1, r6
 800a3ec:	463a      	mov	r2, r7
 800a3ee:	4628      	mov	r0, r5
 800a3f0:	f000 fc20 	bl	800ac34 <__lshift>
 800a3f4:	4606      	mov	r6, r0
 800a3f6:	f1b8 0f00 	cmp.w	r8, #0
 800a3fa:	d05b      	beq.n	800a4b4 <_dtoa_r+0xa5c>
 800a3fc:	4628      	mov	r0, r5
 800a3fe:	6871      	ldr	r1, [r6, #4]
 800a400:	f000 fa0a 	bl	800a818 <_Balloc>
 800a404:	4607      	mov	r7, r0
 800a406:	b928      	cbnz	r0, 800a414 <_dtoa_r+0x9bc>
 800a408:	4602      	mov	r2, r0
 800a40a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a40e:	4b81      	ldr	r3, [pc, #516]	; (800a614 <_dtoa_r+0xbbc>)
 800a410:	f7ff bb36 	b.w	8009a80 <_dtoa_r+0x28>
 800a414:	6932      	ldr	r2, [r6, #16]
 800a416:	f106 010c 	add.w	r1, r6, #12
 800a41a:	3202      	adds	r2, #2
 800a41c:	0092      	lsls	r2, r2, #2
 800a41e:	300c      	adds	r0, #12
 800a420:	f000 ff9e 	bl	800b360 <memcpy>
 800a424:	2201      	movs	r2, #1
 800a426:	4639      	mov	r1, r7
 800a428:	4628      	mov	r0, r5
 800a42a:	f000 fc03 	bl	800ac34 <__lshift>
 800a42e:	46b0      	mov	r8, r6
 800a430:	4606      	mov	r6, r0
 800a432:	9b03      	ldr	r3, [sp, #12]
 800a434:	9a03      	ldr	r2, [sp, #12]
 800a436:	3301      	adds	r3, #1
 800a438:	9308      	str	r3, [sp, #32]
 800a43a:	9b06      	ldr	r3, [sp, #24]
 800a43c:	4413      	add	r3, r2
 800a43e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a440:	9b04      	ldr	r3, [sp, #16]
 800a442:	f003 0301 	and.w	r3, r3, #1
 800a446:	930a      	str	r3, [sp, #40]	; 0x28
 800a448:	9b08      	ldr	r3, [sp, #32]
 800a44a:	4621      	mov	r1, r4
 800a44c:	3b01      	subs	r3, #1
 800a44e:	4650      	mov	r0, sl
 800a450:	9304      	str	r3, [sp, #16]
 800a452:	f7ff fa76 	bl	8009942 <quorem>
 800a456:	4641      	mov	r1, r8
 800a458:	9006      	str	r0, [sp, #24]
 800a45a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a45e:	4650      	mov	r0, sl
 800a460:	f000 fc54 	bl	800ad0c <__mcmp>
 800a464:	4632      	mov	r2, r6
 800a466:	9009      	str	r0, [sp, #36]	; 0x24
 800a468:	4621      	mov	r1, r4
 800a46a:	4628      	mov	r0, r5
 800a46c:	f000 fc6a 	bl	800ad44 <__mdiff>
 800a470:	68c2      	ldr	r2, [r0, #12]
 800a472:	4607      	mov	r7, r0
 800a474:	bb02      	cbnz	r2, 800a4b8 <_dtoa_r+0xa60>
 800a476:	4601      	mov	r1, r0
 800a478:	4650      	mov	r0, sl
 800a47a:	f000 fc47 	bl	800ad0c <__mcmp>
 800a47e:	4602      	mov	r2, r0
 800a480:	4639      	mov	r1, r7
 800a482:	4628      	mov	r0, r5
 800a484:	920c      	str	r2, [sp, #48]	; 0x30
 800a486:	f000 fa07 	bl	800a898 <_Bfree>
 800a48a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a48c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a48e:	9f08      	ldr	r7, [sp, #32]
 800a490:	ea43 0102 	orr.w	r1, r3, r2
 800a494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a496:	4319      	orrs	r1, r3
 800a498:	d110      	bne.n	800a4bc <_dtoa_r+0xa64>
 800a49a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a49e:	d029      	beq.n	800a4f4 <_dtoa_r+0xa9c>
 800a4a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	dd02      	ble.n	800a4ac <_dtoa_r+0xa54>
 800a4a6:	9b06      	ldr	r3, [sp, #24]
 800a4a8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a4ac:	9b04      	ldr	r3, [sp, #16]
 800a4ae:	f883 9000 	strb.w	r9, [r3]
 800a4b2:	e777      	b.n	800a3a4 <_dtoa_r+0x94c>
 800a4b4:	4630      	mov	r0, r6
 800a4b6:	e7ba      	b.n	800a42e <_dtoa_r+0x9d6>
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	e7e1      	b.n	800a480 <_dtoa_r+0xa28>
 800a4bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	db04      	blt.n	800a4cc <_dtoa_r+0xa74>
 800a4c2:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a4c4:	430b      	orrs	r3, r1
 800a4c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a4c8:	430b      	orrs	r3, r1
 800a4ca:	d120      	bne.n	800a50e <_dtoa_r+0xab6>
 800a4cc:	2a00      	cmp	r2, #0
 800a4ce:	dded      	ble.n	800a4ac <_dtoa_r+0xa54>
 800a4d0:	4651      	mov	r1, sl
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	4628      	mov	r0, r5
 800a4d6:	f000 fbad 	bl	800ac34 <__lshift>
 800a4da:	4621      	mov	r1, r4
 800a4dc:	4682      	mov	sl, r0
 800a4de:	f000 fc15 	bl	800ad0c <__mcmp>
 800a4e2:	2800      	cmp	r0, #0
 800a4e4:	dc03      	bgt.n	800a4ee <_dtoa_r+0xa96>
 800a4e6:	d1e1      	bne.n	800a4ac <_dtoa_r+0xa54>
 800a4e8:	f019 0f01 	tst.w	r9, #1
 800a4ec:	d0de      	beq.n	800a4ac <_dtoa_r+0xa54>
 800a4ee:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a4f2:	d1d8      	bne.n	800a4a6 <_dtoa_r+0xa4e>
 800a4f4:	2339      	movs	r3, #57	; 0x39
 800a4f6:	9a04      	ldr	r2, [sp, #16]
 800a4f8:	7013      	strb	r3, [r2, #0]
 800a4fa:	463b      	mov	r3, r7
 800a4fc:	461f      	mov	r7, r3
 800a4fe:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a502:	3b01      	subs	r3, #1
 800a504:	2a39      	cmp	r2, #57	; 0x39
 800a506:	d06b      	beq.n	800a5e0 <_dtoa_r+0xb88>
 800a508:	3201      	adds	r2, #1
 800a50a:	701a      	strb	r2, [r3, #0]
 800a50c:	e74a      	b.n	800a3a4 <_dtoa_r+0x94c>
 800a50e:	2a00      	cmp	r2, #0
 800a510:	dd07      	ble.n	800a522 <_dtoa_r+0xaca>
 800a512:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a516:	d0ed      	beq.n	800a4f4 <_dtoa_r+0xa9c>
 800a518:	9a04      	ldr	r2, [sp, #16]
 800a51a:	f109 0301 	add.w	r3, r9, #1
 800a51e:	7013      	strb	r3, [r2, #0]
 800a520:	e740      	b.n	800a3a4 <_dtoa_r+0x94c>
 800a522:	9b08      	ldr	r3, [sp, #32]
 800a524:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a526:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a52a:	4293      	cmp	r3, r2
 800a52c:	d042      	beq.n	800a5b4 <_dtoa_r+0xb5c>
 800a52e:	4651      	mov	r1, sl
 800a530:	2300      	movs	r3, #0
 800a532:	220a      	movs	r2, #10
 800a534:	4628      	mov	r0, r5
 800a536:	f000 f9d1 	bl	800a8dc <__multadd>
 800a53a:	45b0      	cmp	r8, r6
 800a53c:	4682      	mov	sl, r0
 800a53e:	f04f 0300 	mov.w	r3, #0
 800a542:	f04f 020a 	mov.w	r2, #10
 800a546:	4641      	mov	r1, r8
 800a548:	4628      	mov	r0, r5
 800a54a:	d107      	bne.n	800a55c <_dtoa_r+0xb04>
 800a54c:	f000 f9c6 	bl	800a8dc <__multadd>
 800a550:	4680      	mov	r8, r0
 800a552:	4606      	mov	r6, r0
 800a554:	9b08      	ldr	r3, [sp, #32]
 800a556:	3301      	adds	r3, #1
 800a558:	9308      	str	r3, [sp, #32]
 800a55a:	e775      	b.n	800a448 <_dtoa_r+0x9f0>
 800a55c:	f000 f9be 	bl	800a8dc <__multadd>
 800a560:	4631      	mov	r1, r6
 800a562:	4680      	mov	r8, r0
 800a564:	2300      	movs	r3, #0
 800a566:	220a      	movs	r2, #10
 800a568:	4628      	mov	r0, r5
 800a56a:	f000 f9b7 	bl	800a8dc <__multadd>
 800a56e:	4606      	mov	r6, r0
 800a570:	e7f0      	b.n	800a554 <_dtoa_r+0xafc>
 800a572:	9b08      	ldr	r3, [sp, #32]
 800a574:	9306      	str	r3, [sp, #24]
 800a576:	9f03      	ldr	r7, [sp, #12]
 800a578:	4621      	mov	r1, r4
 800a57a:	4650      	mov	r0, sl
 800a57c:	f7ff f9e1 	bl	8009942 <quorem>
 800a580:	9b03      	ldr	r3, [sp, #12]
 800a582:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a586:	f807 9b01 	strb.w	r9, [r7], #1
 800a58a:	1afa      	subs	r2, r7, r3
 800a58c:	9b06      	ldr	r3, [sp, #24]
 800a58e:	4293      	cmp	r3, r2
 800a590:	dd07      	ble.n	800a5a2 <_dtoa_r+0xb4a>
 800a592:	4651      	mov	r1, sl
 800a594:	2300      	movs	r3, #0
 800a596:	220a      	movs	r2, #10
 800a598:	4628      	mov	r0, r5
 800a59a:	f000 f99f 	bl	800a8dc <__multadd>
 800a59e:	4682      	mov	sl, r0
 800a5a0:	e7ea      	b.n	800a578 <_dtoa_r+0xb20>
 800a5a2:	9b06      	ldr	r3, [sp, #24]
 800a5a4:	f04f 0800 	mov.w	r8, #0
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	bfcc      	ite	gt
 800a5ac:	461f      	movgt	r7, r3
 800a5ae:	2701      	movle	r7, #1
 800a5b0:	9b03      	ldr	r3, [sp, #12]
 800a5b2:	441f      	add	r7, r3
 800a5b4:	4651      	mov	r1, sl
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	4628      	mov	r0, r5
 800a5ba:	f000 fb3b 	bl	800ac34 <__lshift>
 800a5be:	4621      	mov	r1, r4
 800a5c0:	4682      	mov	sl, r0
 800a5c2:	f000 fba3 	bl	800ad0c <__mcmp>
 800a5c6:	2800      	cmp	r0, #0
 800a5c8:	dc97      	bgt.n	800a4fa <_dtoa_r+0xaa2>
 800a5ca:	d102      	bne.n	800a5d2 <_dtoa_r+0xb7a>
 800a5cc:	f019 0f01 	tst.w	r9, #1
 800a5d0:	d193      	bne.n	800a4fa <_dtoa_r+0xaa2>
 800a5d2:	463b      	mov	r3, r7
 800a5d4:	461f      	mov	r7, r3
 800a5d6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a5da:	2a30      	cmp	r2, #48	; 0x30
 800a5dc:	d0fa      	beq.n	800a5d4 <_dtoa_r+0xb7c>
 800a5de:	e6e1      	b.n	800a3a4 <_dtoa_r+0x94c>
 800a5e0:	9a03      	ldr	r2, [sp, #12]
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	d18a      	bne.n	800a4fc <_dtoa_r+0xaa4>
 800a5e6:	2331      	movs	r3, #49	; 0x31
 800a5e8:	f10b 0b01 	add.w	fp, fp, #1
 800a5ec:	e797      	b.n	800a51e <_dtoa_r+0xac6>
 800a5ee:	4b0a      	ldr	r3, [pc, #40]	; (800a618 <_dtoa_r+0xbc0>)
 800a5f0:	f7ff ba9f 	b.w	8009b32 <_dtoa_r+0xda>
 800a5f4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	f47f aa77 	bne.w	8009aea <_dtoa_r+0x92>
 800a5fc:	4b07      	ldr	r3, [pc, #28]	; (800a61c <_dtoa_r+0xbc4>)
 800a5fe:	f7ff ba98 	b.w	8009b32 <_dtoa_r+0xda>
 800a602:	9b06      	ldr	r3, [sp, #24]
 800a604:	2b00      	cmp	r3, #0
 800a606:	dcb6      	bgt.n	800a576 <_dtoa_r+0xb1e>
 800a608:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a60a:	2b02      	cmp	r3, #2
 800a60c:	f73f aeb5 	bgt.w	800a37a <_dtoa_r+0x922>
 800a610:	e7b1      	b.n	800a576 <_dtoa_r+0xb1e>
 800a612:	bf00      	nop
 800a614:	0800bb3a 	.word	0x0800bb3a
 800a618:	0800ba9a 	.word	0x0800ba9a
 800a61c:	0800babe 	.word	0x0800babe

0800a620 <_free_r>:
 800a620:	b538      	push	{r3, r4, r5, lr}
 800a622:	4605      	mov	r5, r0
 800a624:	2900      	cmp	r1, #0
 800a626:	d040      	beq.n	800a6aa <_free_r+0x8a>
 800a628:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a62c:	1f0c      	subs	r4, r1, #4
 800a62e:	2b00      	cmp	r3, #0
 800a630:	bfb8      	it	lt
 800a632:	18e4      	addlt	r4, r4, r3
 800a634:	f000 f8e4 	bl	800a800 <__malloc_lock>
 800a638:	4a1c      	ldr	r2, [pc, #112]	; (800a6ac <_free_r+0x8c>)
 800a63a:	6813      	ldr	r3, [r2, #0]
 800a63c:	b933      	cbnz	r3, 800a64c <_free_r+0x2c>
 800a63e:	6063      	str	r3, [r4, #4]
 800a640:	6014      	str	r4, [r2, #0]
 800a642:	4628      	mov	r0, r5
 800a644:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a648:	f000 b8e0 	b.w	800a80c <__malloc_unlock>
 800a64c:	42a3      	cmp	r3, r4
 800a64e:	d908      	bls.n	800a662 <_free_r+0x42>
 800a650:	6820      	ldr	r0, [r4, #0]
 800a652:	1821      	adds	r1, r4, r0
 800a654:	428b      	cmp	r3, r1
 800a656:	bf01      	itttt	eq
 800a658:	6819      	ldreq	r1, [r3, #0]
 800a65a:	685b      	ldreq	r3, [r3, #4]
 800a65c:	1809      	addeq	r1, r1, r0
 800a65e:	6021      	streq	r1, [r4, #0]
 800a660:	e7ed      	b.n	800a63e <_free_r+0x1e>
 800a662:	461a      	mov	r2, r3
 800a664:	685b      	ldr	r3, [r3, #4]
 800a666:	b10b      	cbz	r3, 800a66c <_free_r+0x4c>
 800a668:	42a3      	cmp	r3, r4
 800a66a:	d9fa      	bls.n	800a662 <_free_r+0x42>
 800a66c:	6811      	ldr	r1, [r2, #0]
 800a66e:	1850      	adds	r0, r2, r1
 800a670:	42a0      	cmp	r0, r4
 800a672:	d10b      	bne.n	800a68c <_free_r+0x6c>
 800a674:	6820      	ldr	r0, [r4, #0]
 800a676:	4401      	add	r1, r0
 800a678:	1850      	adds	r0, r2, r1
 800a67a:	4283      	cmp	r3, r0
 800a67c:	6011      	str	r1, [r2, #0]
 800a67e:	d1e0      	bne.n	800a642 <_free_r+0x22>
 800a680:	6818      	ldr	r0, [r3, #0]
 800a682:	685b      	ldr	r3, [r3, #4]
 800a684:	4408      	add	r0, r1
 800a686:	6010      	str	r0, [r2, #0]
 800a688:	6053      	str	r3, [r2, #4]
 800a68a:	e7da      	b.n	800a642 <_free_r+0x22>
 800a68c:	d902      	bls.n	800a694 <_free_r+0x74>
 800a68e:	230c      	movs	r3, #12
 800a690:	602b      	str	r3, [r5, #0]
 800a692:	e7d6      	b.n	800a642 <_free_r+0x22>
 800a694:	6820      	ldr	r0, [r4, #0]
 800a696:	1821      	adds	r1, r4, r0
 800a698:	428b      	cmp	r3, r1
 800a69a:	bf01      	itttt	eq
 800a69c:	6819      	ldreq	r1, [r3, #0]
 800a69e:	685b      	ldreq	r3, [r3, #4]
 800a6a0:	1809      	addeq	r1, r1, r0
 800a6a2:	6021      	streq	r1, [r4, #0]
 800a6a4:	6063      	str	r3, [r4, #4]
 800a6a6:	6054      	str	r4, [r2, #4]
 800a6a8:	e7cb      	b.n	800a642 <_free_r+0x22>
 800a6aa:	bd38      	pop	{r3, r4, r5, pc}
 800a6ac:	20001a6c 	.word	0x20001a6c

0800a6b0 <malloc>:
 800a6b0:	4b02      	ldr	r3, [pc, #8]	; (800a6bc <malloc+0xc>)
 800a6b2:	4601      	mov	r1, r0
 800a6b4:	6818      	ldr	r0, [r3, #0]
 800a6b6:	f000 b823 	b.w	800a700 <_malloc_r>
 800a6ba:	bf00      	nop
 800a6bc:	200001d4 	.word	0x200001d4

0800a6c0 <sbrk_aligned>:
 800a6c0:	b570      	push	{r4, r5, r6, lr}
 800a6c2:	4e0e      	ldr	r6, [pc, #56]	; (800a6fc <sbrk_aligned+0x3c>)
 800a6c4:	460c      	mov	r4, r1
 800a6c6:	6831      	ldr	r1, [r6, #0]
 800a6c8:	4605      	mov	r5, r0
 800a6ca:	b911      	cbnz	r1, 800a6d2 <sbrk_aligned+0x12>
 800a6cc:	f000 fe38 	bl	800b340 <_sbrk_r>
 800a6d0:	6030      	str	r0, [r6, #0]
 800a6d2:	4621      	mov	r1, r4
 800a6d4:	4628      	mov	r0, r5
 800a6d6:	f000 fe33 	bl	800b340 <_sbrk_r>
 800a6da:	1c43      	adds	r3, r0, #1
 800a6dc:	d00a      	beq.n	800a6f4 <sbrk_aligned+0x34>
 800a6de:	1cc4      	adds	r4, r0, #3
 800a6e0:	f024 0403 	bic.w	r4, r4, #3
 800a6e4:	42a0      	cmp	r0, r4
 800a6e6:	d007      	beq.n	800a6f8 <sbrk_aligned+0x38>
 800a6e8:	1a21      	subs	r1, r4, r0
 800a6ea:	4628      	mov	r0, r5
 800a6ec:	f000 fe28 	bl	800b340 <_sbrk_r>
 800a6f0:	3001      	adds	r0, #1
 800a6f2:	d101      	bne.n	800a6f8 <sbrk_aligned+0x38>
 800a6f4:	f04f 34ff 	mov.w	r4, #4294967295
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	bd70      	pop	{r4, r5, r6, pc}
 800a6fc:	20001a70 	.word	0x20001a70

0800a700 <_malloc_r>:
 800a700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a704:	1ccd      	adds	r5, r1, #3
 800a706:	f025 0503 	bic.w	r5, r5, #3
 800a70a:	3508      	adds	r5, #8
 800a70c:	2d0c      	cmp	r5, #12
 800a70e:	bf38      	it	cc
 800a710:	250c      	movcc	r5, #12
 800a712:	2d00      	cmp	r5, #0
 800a714:	4607      	mov	r7, r0
 800a716:	db01      	blt.n	800a71c <_malloc_r+0x1c>
 800a718:	42a9      	cmp	r1, r5
 800a71a:	d905      	bls.n	800a728 <_malloc_r+0x28>
 800a71c:	230c      	movs	r3, #12
 800a71e:	2600      	movs	r6, #0
 800a720:	603b      	str	r3, [r7, #0]
 800a722:	4630      	mov	r0, r6
 800a724:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a728:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a7fc <_malloc_r+0xfc>
 800a72c:	f000 f868 	bl	800a800 <__malloc_lock>
 800a730:	f8d8 3000 	ldr.w	r3, [r8]
 800a734:	461c      	mov	r4, r3
 800a736:	bb5c      	cbnz	r4, 800a790 <_malloc_r+0x90>
 800a738:	4629      	mov	r1, r5
 800a73a:	4638      	mov	r0, r7
 800a73c:	f7ff ffc0 	bl	800a6c0 <sbrk_aligned>
 800a740:	1c43      	adds	r3, r0, #1
 800a742:	4604      	mov	r4, r0
 800a744:	d155      	bne.n	800a7f2 <_malloc_r+0xf2>
 800a746:	f8d8 4000 	ldr.w	r4, [r8]
 800a74a:	4626      	mov	r6, r4
 800a74c:	2e00      	cmp	r6, #0
 800a74e:	d145      	bne.n	800a7dc <_malloc_r+0xdc>
 800a750:	2c00      	cmp	r4, #0
 800a752:	d048      	beq.n	800a7e6 <_malloc_r+0xe6>
 800a754:	6823      	ldr	r3, [r4, #0]
 800a756:	4631      	mov	r1, r6
 800a758:	4638      	mov	r0, r7
 800a75a:	eb04 0903 	add.w	r9, r4, r3
 800a75e:	f000 fdef 	bl	800b340 <_sbrk_r>
 800a762:	4581      	cmp	r9, r0
 800a764:	d13f      	bne.n	800a7e6 <_malloc_r+0xe6>
 800a766:	6821      	ldr	r1, [r4, #0]
 800a768:	4638      	mov	r0, r7
 800a76a:	1a6d      	subs	r5, r5, r1
 800a76c:	4629      	mov	r1, r5
 800a76e:	f7ff ffa7 	bl	800a6c0 <sbrk_aligned>
 800a772:	3001      	adds	r0, #1
 800a774:	d037      	beq.n	800a7e6 <_malloc_r+0xe6>
 800a776:	6823      	ldr	r3, [r4, #0]
 800a778:	442b      	add	r3, r5
 800a77a:	6023      	str	r3, [r4, #0]
 800a77c:	f8d8 3000 	ldr.w	r3, [r8]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d038      	beq.n	800a7f6 <_malloc_r+0xf6>
 800a784:	685a      	ldr	r2, [r3, #4]
 800a786:	42a2      	cmp	r2, r4
 800a788:	d12b      	bne.n	800a7e2 <_malloc_r+0xe2>
 800a78a:	2200      	movs	r2, #0
 800a78c:	605a      	str	r2, [r3, #4]
 800a78e:	e00f      	b.n	800a7b0 <_malloc_r+0xb0>
 800a790:	6822      	ldr	r2, [r4, #0]
 800a792:	1b52      	subs	r2, r2, r5
 800a794:	d41f      	bmi.n	800a7d6 <_malloc_r+0xd6>
 800a796:	2a0b      	cmp	r2, #11
 800a798:	d917      	bls.n	800a7ca <_malloc_r+0xca>
 800a79a:	1961      	adds	r1, r4, r5
 800a79c:	42a3      	cmp	r3, r4
 800a79e:	6025      	str	r5, [r4, #0]
 800a7a0:	bf18      	it	ne
 800a7a2:	6059      	strne	r1, [r3, #4]
 800a7a4:	6863      	ldr	r3, [r4, #4]
 800a7a6:	bf08      	it	eq
 800a7a8:	f8c8 1000 	streq.w	r1, [r8]
 800a7ac:	5162      	str	r2, [r4, r5]
 800a7ae:	604b      	str	r3, [r1, #4]
 800a7b0:	4638      	mov	r0, r7
 800a7b2:	f104 060b 	add.w	r6, r4, #11
 800a7b6:	f000 f829 	bl	800a80c <__malloc_unlock>
 800a7ba:	f026 0607 	bic.w	r6, r6, #7
 800a7be:	1d23      	adds	r3, r4, #4
 800a7c0:	1af2      	subs	r2, r6, r3
 800a7c2:	d0ae      	beq.n	800a722 <_malloc_r+0x22>
 800a7c4:	1b9b      	subs	r3, r3, r6
 800a7c6:	50a3      	str	r3, [r4, r2]
 800a7c8:	e7ab      	b.n	800a722 <_malloc_r+0x22>
 800a7ca:	42a3      	cmp	r3, r4
 800a7cc:	6862      	ldr	r2, [r4, #4]
 800a7ce:	d1dd      	bne.n	800a78c <_malloc_r+0x8c>
 800a7d0:	f8c8 2000 	str.w	r2, [r8]
 800a7d4:	e7ec      	b.n	800a7b0 <_malloc_r+0xb0>
 800a7d6:	4623      	mov	r3, r4
 800a7d8:	6864      	ldr	r4, [r4, #4]
 800a7da:	e7ac      	b.n	800a736 <_malloc_r+0x36>
 800a7dc:	4634      	mov	r4, r6
 800a7de:	6876      	ldr	r6, [r6, #4]
 800a7e0:	e7b4      	b.n	800a74c <_malloc_r+0x4c>
 800a7e2:	4613      	mov	r3, r2
 800a7e4:	e7cc      	b.n	800a780 <_malloc_r+0x80>
 800a7e6:	230c      	movs	r3, #12
 800a7e8:	4638      	mov	r0, r7
 800a7ea:	603b      	str	r3, [r7, #0]
 800a7ec:	f000 f80e 	bl	800a80c <__malloc_unlock>
 800a7f0:	e797      	b.n	800a722 <_malloc_r+0x22>
 800a7f2:	6025      	str	r5, [r4, #0]
 800a7f4:	e7dc      	b.n	800a7b0 <_malloc_r+0xb0>
 800a7f6:	605b      	str	r3, [r3, #4]
 800a7f8:	deff      	udf	#255	; 0xff
 800a7fa:	bf00      	nop
 800a7fc:	20001a6c 	.word	0x20001a6c

0800a800 <__malloc_lock>:
 800a800:	4801      	ldr	r0, [pc, #4]	; (800a808 <__malloc_lock+0x8>)
 800a802:	f7ff b88e 	b.w	8009922 <__retarget_lock_acquire_recursive>
 800a806:	bf00      	nop
 800a808:	20001a68 	.word	0x20001a68

0800a80c <__malloc_unlock>:
 800a80c:	4801      	ldr	r0, [pc, #4]	; (800a814 <__malloc_unlock+0x8>)
 800a80e:	f7ff b889 	b.w	8009924 <__retarget_lock_release_recursive>
 800a812:	bf00      	nop
 800a814:	20001a68 	.word	0x20001a68

0800a818 <_Balloc>:
 800a818:	b570      	push	{r4, r5, r6, lr}
 800a81a:	69c6      	ldr	r6, [r0, #28]
 800a81c:	4604      	mov	r4, r0
 800a81e:	460d      	mov	r5, r1
 800a820:	b976      	cbnz	r6, 800a840 <_Balloc+0x28>
 800a822:	2010      	movs	r0, #16
 800a824:	f7ff ff44 	bl	800a6b0 <malloc>
 800a828:	4602      	mov	r2, r0
 800a82a:	61e0      	str	r0, [r4, #28]
 800a82c:	b920      	cbnz	r0, 800a838 <_Balloc+0x20>
 800a82e:	216b      	movs	r1, #107	; 0x6b
 800a830:	4b17      	ldr	r3, [pc, #92]	; (800a890 <_Balloc+0x78>)
 800a832:	4818      	ldr	r0, [pc, #96]	; (800a894 <_Balloc+0x7c>)
 800a834:	f000 fda2 	bl	800b37c <__assert_func>
 800a838:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a83c:	6006      	str	r6, [r0, #0]
 800a83e:	60c6      	str	r6, [r0, #12]
 800a840:	69e6      	ldr	r6, [r4, #28]
 800a842:	68f3      	ldr	r3, [r6, #12]
 800a844:	b183      	cbz	r3, 800a868 <_Balloc+0x50>
 800a846:	69e3      	ldr	r3, [r4, #28]
 800a848:	68db      	ldr	r3, [r3, #12]
 800a84a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a84e:	b9b8      	cbnz	r0, 800a880 <_Balloc+0x68>
 800a850:	2101      	movs	r1, #1
 800a852:	fa01 f605 	lsl.w	r6, r1, r5
 800a856:	1d72      	adds	r2, r6, #5
 800a858:	4620      	mov	r0, r4
 800a85a:	0092      	lsls	r2, r2, #2
 800a85c:	f000 fdac 	bl	800b3b8 <_calloc_r>
 800a860:	b160      	cbz	r0, 800a87c <_Balloc+0x64>
 800a862:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a866:	e00e      	b.n	800a886 <_Balloc+0x6e>
 800a868:	2221      	movs	r2, #33	; 0x21
 800a86a:	2104      	movs	r1, #4
 800a86c:	4620      	mov	r0, r4
 800a86e:	f000 fda3 	bl	800b3b8 <_calloc_r>
 800a872:	69e3      	ldr	r3, [r4, #28]
 800a874:	60f0      	str	r0, [r6, #12]
 800a876:	68db      	ldr	r3, [r3, #12]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d1e4      	bne.n	800a846 <_Balloc+0x2e>
 800a87c:	2000      	movs	r0, #0
 800a87e:	bd70      	pop	{r4, r5, r6, pc}
 800a880:	6802      	ldr	r2, [r0, #0]
 800a882:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a886:	2300      	movs	r3, #0
 800a888:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a88c:	e7f7      	b.n	800a87e <_Balloc+0x66>
 800a88e:	bf00      	nop
 800a890:	0800bacb 	.word	0x0800bacb
 800a894:	0800bb4b 	.word	0x0800bb4b

0800a898 <_Bfree>:
 800a898:	b570      	push	{r4, r5, r6, lr}
 800a89a:	69c6      	ldr	r6, [r0, #28]
 800a89c:	4605      	mov	r5, r0
 800a89e:	460c      	mov	r4, r1
 800a8a0:	b976      	cbnz	r6, 800a8c0 <_Bfree+0x28>
 800a8a2:	2010      	movs	r0, #16
 800a8a4:	f7ff ff04 	bl	800a6b0 <malloc>
 800a8a8:	4602      	mov	r2, r0
 800a8aa:	61e8      	str	r0, [r5, #28]
 800a8ac:	b920      	cbnz	r0, 800a8b8 <_Bfree+0x20>
 800a8ae:	218f      	movs	r1, #143	; 0x8f
 800a8b0:	4b08      	ldr	r3, [pc, #32]	; (800a8d4 <_Bfree+0x3c>)
 800a8b2:	4809      	ldr	r0, [pc, #36]	; (800a8d8 <_Bfree+0x40>)
 800a8b4:	f000 fd62 	bl	800b37c <__assert_func>
 800a8b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a8bc:	6006      	str	r6, [r0, #0]
 800a8be:	60c6      	str	r6, [r0, #12]
 800a8c0:	b13c      	cbz	r4, 800a8d2 <_Bfree+0x3a>
 800a8c2:	69eb      	ldr	r3, [r5, #28]
 800a8c4:	6862      	ldr	r2, [r4, #4]
 800a8c6:	68db      	ldr	r3, [r3, #12]
 800a8c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a8cc:	6021      	str	r1, [r4, #0]
 800a8ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a8d2:	bd70      	pop	{r4, r5, r6, pc}
 800a8d4:	0800bacb 	.word	0x0800bacb
 800a8d8:	0800bb4b 	.word	0x0800bb4b

0800a8dc <__multadd>:
 800a8dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8e0:	4607      	mov	r7, r0
 800a8e2:	460c      	mov	r4, r1
 800a8e4:	461e      	mov	r6, r3
 800a8e6:	2000      	movs	r0, #0
 800a8e8:	690d      	ldr	r5, [r1, #16]
 800a8ea:	f101 0c14 	add.w	ip, r1, #20
 800a8ee:	f8dc 3000 	ldr.w	r3, [ip]
 800a8f2:	3001      	adds	r0, #1
 800a8f4:	b299      	uxth	r1, r3
 800a8f6:	fb02 6101 	mla	r1, r2, r1, r6
 800a8fa:	0c1e      	lsrs	r6, r3, #16
 800a8fc:	0c0b      	lsrs	r3, r1, #16
 800a8fe:	fb02 3306 	mla	r3, r2, r6, r3
 800a902:	b289      	uxth	r1, r1
 800a904:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a908:	4285      	cmp	r5, r0
 800a90a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a90e:	f84c 1b04 	str.w	r1, [ip], #4
 800a912:	dcec      	bgt.n	800a8ee <__multadd+0x12>
 800a914:	b30e      	cbz	r6, 800a95a <__multadd+0x7e>
 800a916:	68a3      	ldr	r3, [r4, #8]
 800a918:	42ab      	cmp	r3, r5
 800a91a:	dc19      	bgt.n	800a950 <__multadd+0x74>
 800a91c:	6861      	ldr	r1, [r4, #4]
 800a91e:	4638      	mov	r0, r7
 800a920:	3101      	adds	r1, #1
 800a922:	f7ff ff79 	bl	800a818 <_Balloc>
 800a926:	4680      	mov	r8, r0
 800a928:	b928      	cbnz	r0, 800a936 <__multadd+0x5a>
 800a92a:	4602      	mov	r2, r0
 800a92c:	21ba      	movs	r1, #186	; 0xba
 800a92e:	4b0c      	ldr	r3, [pc, #48]	; (800a960 <__multadd+0x84>)
 800a930:	480c      	ldr	r0, [pc, #48]	; (800a964 <__multadd+0x88>)
 800a932:	f000 fd23 	bl	800b37c <__assert_func>
 800a936:	6922      	ldr	r2, [r4, #16]
 800a938:	f104 010c 	add.w	r1, r4, #12
 800a93c:	3202      	adds	r2, #2
 800a93e:	0092      	lsls	r2, r2, #2
 800a940:	300c      	adds	r0, #12
 800a942:	f000 fd0d 	bl	800b360 <memcpy>
 800a946:	4621      	mov	r1, r4
 800a948:	4638      	mov	r0, r7
 800a94a:	f7ff ffa5 	bl	800a898 <_Bfree>
 800a94e:	4644      	mov	r4, r8
 800a950:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a954:	3501      	adds	r5, #1
 800a956:	615e      	str	r6, [r3, #20]
 800a958:	6125      	str	r5, [r4, #16]
 800a95a:	4620      	mov	r0, r4
 800a95c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a960:	0800bb3a 	.word	0x0800bb3a
 800a964:	0800bb4b 	.word	0x0800bb4b

0800a968 <__hi0bits>:
 800a968:	0c02      	lsrs	r2, r0, #16
 800a96a:	0412      	lsls	r2, r2, #16
 800a96c:	4603      	mov	r3, r0
 800a96e:	b9ca      	cbnz	r2, 800a9a4 <__hi0bits+0x3c>
 800a970:	0403      	lsls	r3, r0, #16
 800a972:	2010      	movs	r0, #16
 800a974:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a978:	bf04      	itt	eq
 800a97a:	021b      	lsleq	r3, r3, #8
 800a97c:	3008      	addeq	r0, #8
 800a97e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a982:	bf04      	itt	eq
 800a984:	011b      	lsleq	r3, r3, #4
 800a986:	3004      	addeq	r0, #4
 800a988:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a98c:	bf04      	itt	eq
 800a98e:	009b      	lsleq	r3, r3, #2
 800a990:	3002      	addeq	r0, #2
 800a992:	2b00      	cmp	r3, #0
 800a994:	db05      	blt.n	800a9a2 <__hi0bits+0x3a>
 800a996:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a99a:	f100 0001 	add.w	r0, r0, #1
 800a99e:	bf08      	it	eq
 800a9a0:	2020      	moveq	r0, #32
 800a9a2:	4770      	bx	lr
 800a9a4:	2000      	movs	r0, #0
 800a9a6:	e7e5      	b.n	800a974 <__hi0bits+0xc>

0800a9a8 <__lo0bits>:
 800a9a8:	6803      	ldr	r3, [r0, #0]
 800a9aa:	4602      	mov	r2, r0
 800a9ac:	f013 0007 	ands.w	r0, r3, #7
 800a9b0:	d00b      	beq.n	800a9ca <__lo0bits+0x22>
 800a9b2:	07d9      	lsls	r1, r3, #31
 800a9b4:	d421      	bmi.n	800a9fa <__lo0bits+0x52>
 800a9b6:	0798      	lsls	r0, r3, #30
 800a9b8:	bf49      	itett	mi
 800a9ba:	085b      	lsrmi	r3, r3, #1
 800a9bc:	089b      	lsrpl	r3, r3, #2
 800a9be:	2001      	movmi	r0, #1
 800a9c0:	6013      	strmi	r3, [r2, #0]
 800a9c2:	bf5c      	itt	pl
 800a9c4:	2002      	movpl	r0, #2
 800a9c6:	6013      	strpl	r3, [r2, #0]
 800a9c8:	4770      	bx	lr
 800a9ca:	b299      	uxth	r1, r3
 800a9cc:	b909      	cbnz	r1, 800a9d2 <__lo0bits+0x2a>
 800a9ce:	2010      	movs	r0, #16
 800a9d0:	0c1b      	lsrs	r3, r3, #16
 800a9d2:	b2d9      	uxtb	r1, r3
 800a9d4:	b909      	cbnz	r1, 800a9da <__lo0bits+0x32>
 800a9d6:	3008      	adds	r0, #8
 800a9d8:	0a1b      	lsrs	r3, r3, #8
 800a9da:	0719      	lsls	r1, r3, #28
 800a9dc:	bf04      	itt	eq
 800a9de:	091b      	lsreq	r3, r3, #4
 800a9e0:	3004      	addeq	r0, #4
 800a9e2:	0799      	lsls	r1, r3, #30
 800a9e4:	bf04      	itt	eq
 800a9e6:	089b      	lsreq	r3, r3, #2
 800a9e8:	3002      	addeq	r0, #2
 800a9ea:	07d9      	lsls	r1, r3, #31
 800a9ec:	d403      	bmi.n	800a9f6 <__lo0bits+0x4e>
 800a9ee:	085b      	lsrs	r3, r3, #1
 800a9f0:	f100 0001 	add.w	r0, r0, #1
 800a9f4:	d003      	beq.n	800a9fe <__lo0bits+0x56>
 800a9f6:	6013      	str	r3, [r2, #0]
 800a9f8:	4770      	bx	lr
 800a9fa:	2000      	movs	r0, #0
 800a9fc:	4770      	bx	lr
 800a9fe:	2020      	movs	r0, #32
 800aa00:	4770      	bx	lr
	...

0800aa04 <__i2b>:
 800aa04:	b510      	push	{r4, lr}
 800aa06:	460c      	mov	r4, r1
 800aa08:	2101      	movs	r1, #1
 800aa0a:	f7ff ff05 	bl	800a818 <_Balloc>
 800aa0e:	4602      	mov	r2, r0
 800aa10:	b928      	cbnz	r0, 800aa1e <__i2b+0x1a>
 800aa12:	f240 1145 	movw	r1, #325	; 0x145
 800aa16:	4b04      	ldr	r3, [pc, #16]	; (800aa28 <__i2b+0x24>)
 800aa18:	4804      	ldr	r0, [pc, #16]	; (800aa2c <__i2b+0x28>)
 800aa1a:	f000 fcaf 	bl	800b37c <__assert_func>
 800aa1e:	2301      	movs	r3, #1
 800aa20:	6144      	str	r4, [r0, #20]
 800aa22:	6103      	str	r3, [r0, #16]
 800aa24:	bd10      	pop	{r4, pc}
 800aa26:	bf00      	nop
 800aa28:	0800bb3a 	.word	0x0800bb3a
 800aa2c:	0800bb4b 	.word	0x0800bb4b

0800aa30 <__multiply>:
 800aa30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa34:	4691      	mov	r9, r2
 800aa36:	690a      	ldr	r2, [r1, #16]
 800aa38:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa3c:	460c      	mov	r4, r1
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	bfbe      	ittt	lt
 800aa42:	460b      	movlt	r3, r1
 800aa44:	464c      	movlt	r4, r9
 800aa46:	4699      	movlt	r9, r3
 800aa48:	6927      	ldr	r7, [r4, #16]
 800aa4a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aa4e:	68a3      	ldr	r3, [r4, #8]
 800aa50:	6861      	ldr	r1, [r4, #4]
 800aa52:	eb07 060a 	add.w	r6, r7, sl
 800aa56:	42b3      	cmp	r3, r6
 800aa58:	b085      	sub	sp, #20
 800aa5a:	bfb8      	it	lt
 800aa5c:	3101      	addlt	r1, #1
 800aa5e:	f7ff fedb 	bl	800a818 <_Balloc>
 800aa62:	b930      	cbnz	r0, 800aa72 <__multiply+0x42>
 800aa64:	4602      	mov	r2, r0
 800aa66:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800aa6a:	4b43      	ldr	r3, [pc, #268]	; (800ab78 <__multiply+0x148>)
 800aa6c:	4843      	ldr	r0, [pc, #268]	; (800ab7c <__multiply+0x14c>)
 800aa6e:	f000 fc85 	bl	800b37c <__assert_func>
 800aa72:	f100 0514 	add.w	r5, r0, #20
 800aa76:	462b      	mov	r3, r5
 800aa78:	2200      	movs	r2, #0
 800aa7a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aa7e:	4543      	cmp	r3, r8
 800aa80:	d321      	bcc.n	800aac6 <__multiply+0x96>
 800aa82:	f104 0314 	add.w	r3, r4, #20
 800aa86:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aa8a:	f109 0314 	add.w	r3, r9, #20
 800aa8e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800aa92:	9202      	str	r2, [sp, #8]
 800aa94:	1b3a      	subs	r2, r7, r4
 800aa96:	3a15      	subs	r2, #21
 800aa98:	f022 0203 	bic.w	r2, r2, #3
 800aa9c:	3204      	adds	r2, #4
 800aa9e:	f104 0115 	add.w	r1, r4, #21
 800aaa2:	428f      	cmp	r7, r1
 800aaa4:	bf38      	it	cc
 800aaa6:	2204      	movcc	r2, #4
 800aaa8:	9201      	str	r2, [sp, #4]
 800aaaa:	9a02      	ldr	r2, [sp, #8]
 800aaac:	9303      	str	r3, [sp, #12]
 800aaae:	429a      	cmp	r2, r3
 800aab0:	d80c      	bhi.n	800aacc <__multiply+0x9c>
 800aab2:	2e00      	cmp	r6, #0
 800aab4:	dd03      	ble.n	800aabe <__multiply+0x8e>
 800aab6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d05a      	beq.n	800ab74 <__multiply+0x144>
 800aabe:	6106      	str	r6, [r0, #16]
 800aac0:	b005      	add	sp, #20
 800aac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aac6:	f843 2b04 	str.w	r2, [r3], #4
 800aaca:	e7d8      	b.n	800aa7e <__multiply+0x4e>
 800aacc:	f8b3 a000 	ldrh.w	sl, [r3]
 800aad0:	f1ba 0f00 	cmp.w	sl, #0
 800aad4:	d023      	beq.n	800ab1e <__multiply+0xee>
 800aad6:	46a9      	mov	r9, r5
 800aad8:	f04f 0c00 	mov.w	ip, #0
 800aadc:	f104 0e14 	add.w	lr, r4, #20
 800aae0:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aae4:	f8d9 1000 	ldr.w	r1, [r9]
 800aae8:	fa1f fb82 	uxth.w	fp, r2
 800aaec:	b289      	uxth	r1, r1
 800aaee:	fb0a 110b 	mla	r1, sl, fp, r1
 800aaf2:	4461      	add	r1, ip
 800aaf4:	f8d9 c000 	ldr.w	ip, [r9]
 800aaf8:	0c12      	lsrs	r2, r2, #16
 800aafa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800aafe:	fb0a c202 	mla	r2, sl, r2, ip
 800ab02:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ab06:	b289      	uxth	r1, r1
 800ab08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ab0c:	4577      	cmp	r7, lr
 800ab0e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ab12:	f849 1b04 	str.w	r1, [r9], #4
 800ab16:	d8e3      	bhi.n	800aae0 <__multiply+0xb0>
 800ab18:	9a01      	ldr	r2, [sp, #4]
 800ab1a:	f845 c002 	str.w	ip, [r5, r2]
 800ab1e:	9a03      	ldr	r2, [sp, #12]
 800ab20:	3304      	adds	r3, #4
 800ab22:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ab26:	f1b9 0f00 	cmp.w	r9, #0
 800ab2a:	d021      	beq.n	800ab70 <__multiply+0x140>
 800ab2c:	46ae      	mov	lr, r5
 800ab2e:	f04f 0a00 	mov.w	sl, #0
 800ab32:	6829      	ldr	r1, [r5, #0]
 800ab34:	f104 0c14 	add.w	ip, r4, #20
 800ab38:	f8bc b000 	ldrh.w	fp, [ip]
 800ab3c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ab40:	b289      	uxth	r1, r1
 800ab42:	fb09 220b 	mla	r2, r9, fp, r2
 800ab46:	4452      	add	r2, sl
 800ab48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ab4c:	f84e 1b04 	str.w	r1, [lr], #4
 800ab50:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ab54:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ab58:	f8be 1000 	ldrh.w	r1, [lr]
 800ab5c:	4567      	cmp	r7, ip
 800ab5e:	fb09 110a 	mla	r1, r9, sl, r1
 800ab62:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ab66:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ab6a:	d8e5      	bhi.n	800ab38 <__multiply+0x108>
 800ab6c:	9a01      	ldr	r2, [sp, #4]
 800ab6e:	50a9      	str	r1, [r5, r2]
 800ab70:	3504      	adds	r5, #4
 800ab72:	e79a      	b.n	800aaaa <__multiply+0x7a>
 800ab74:	3e01      	subs	r6, #1
 800ab76:	e79c      	b.n	800aab2 <__multiply+0x82>
 800ab78:	0800bb3a 	.word	0x0800bb3a
 800ab7c:	0800bb4b 	.word	0x0800bb4b

0800ab80 <__pow5mult>:
 800ab80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab84:	4615      	mov	r5, r2
 800ab86:	f012 0203 	ands.w	r2, r2, #3
 800ab8a:	4606      	mov	r6, r0
 800ab8c:	460f      	mov	r7, r1
 800ab8e:	d007      	beq.n	800aba0 <__pow5mult+0x20>
 800ab90:	4c25      	ldr	r4, [pc, #148]	; (800ac28 <__pow5mult+0xa8>)
 800ab92:	3a01      	subs	r2, #1
 800ab94:	2300      	movs	r3, #0
 800ab96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ab9a:	f7ff fe9f 	bl	800a8dc <__multadd>
 800ab9e:	4607      	mov	r7, r0
 800aba0:	10ad      	asrs	r5, r5, #2
 800aba2:	d03d      	beq.n	800ac20 <__pow5mult+0xa0>
 800aba4:	69f4      	ldr	r4, [r6, #28]
 800aba6:	b97c      	cbnz	r4, 800abc8 <__pow5mult+0x48>
 800aba8:	2010      	movs	r0, #16
 800abaa:	f7ff fd81 	bl	800a6b0 <malloc>
 800abae:	4602      	mov	r2, r0
 800abb0:	61f0      	str	r0, [r6, #28]
 800abb2:	b928      	cbnz	r0, 800abc0 <__pow5mult+0x40>
 800abb4:	f240 11b3 	movw	r1, #435	; 0x1b3
 800abb8:	4b1c      	ldr	r3, [pc, #112]	; (800ac2c <__pow5mult+0xac>)
 800abba:	481d      	ldr	r0, [pc, #116]	; (800ac30 <__pow5mult+0xb0>)
 800abbc:	f000 fbde 	bl	800b37c <__assert_func>
 800abc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800abc4:	6004      	str	r4, [r0, #0]
 800abc6:	60c4      	str	r4, [r0, #12]
 800abc8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800abcc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800abd0:	b94c      	cbnz	r4, 800abe6 <__pow5mult+0x66>
 800abd2:	f240 2171 	movw	r1, #625	; 0x271
 800abd6:	4630      	mov	r0, r6
 800abd8:	f7ff ff14 	bl	800aa04 <__i2b>
 800abdc:	2300      	movs	r3, #0
 800abde:	4604      	mov	r4, r0
 800abe0:	f8c8 0008 	str.w	r0, [r8, #8]
 800abe4:	6003      	str	r3, [r0, #0]
 800abe6:	f04f 0900 	mov.w	r9, #0
 800abea:	07eb      	lsls	r3, r5, #31
 800abec:	d50a      	bpl.n	800ac04 <__pow5mult+0x84>
 800abee:	4639      	mov	r1, r7
 800abf0:	4622      	mov	r2, r4
 800abf2:	4630      	mov	r0, r6
 800abf4:	f7ff ff1c 	bl	800aa30 <__multiply>
 800abf8:	4680      	mov	r8, r0
 800abfa:	4639      	mov	r1, r7
 800abfc:	4630      	mov	r0, r6
 800abfe:	f7ff fe4b 	bl	800a898 <_Bfree>
 800ac02:	4647      	mov	r7, r8
 800ac04:	106d      	asrs	r5, r5, #1
 800ac06:	d00b      	beq.n	800ac20 <__pow5mult+0xa0>
 800ac08:	6820      	ldr	r0, [r4, #0]
 800ac0a:	b938      	cbnz	r0, 800ac1c <__pow5mult+0x9c>
 800ac0c:	4622      	mov	r2, r4
 800ac0e:	4621      	mov	r1, r4
 800ac10:	4630      	mov	r0, r6
 800ac12:	f7ff ff0d 	bl	800aa30 <__multiply>
 800ac16:	6020      	str	r0, [r4, #0]
 800ac18:	f8c0 9000 	str.w	r9, [r0]
 800ac1c:	4604      	mov	r4, r0
 800ac1e:	e7e4      	b.n	800abea <__pow5mult+0x6a>
 800ac20:	4638      	mov	r0, r7
 800ac22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac26:	bf00      	nop
 800ac28:	0800bc98 	.word	0x0800bc98
 800ac2c:	0800bacb 	.word	0x0800bacb
 800ac30:	0800bb4b 	.word	0x0800bb4b

0800ac34 <__lshift>:
 800ac34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac38:	460c      	mov	r4, r1
 800ac3a:	4607      	mov	r7, r0
 800ac3c:	4691      	mov	r9, r2
 800ac3e:	6923      	ldr	r3, [r4, #16]
 800ac40:	6849      	ldr	r1, [r1, #4]
 800ac42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ac46:	68a3      	ldr	r3, [r4, #8]
 800ac48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ac4c:	f108 0601 	add.w	r6, r8, #1
 800ac50:	42b3      	cmp	r3, r6
 800ac52:	db0b      	blt.n	800ac6c <__lshift+0x38>
 800ac54:	4638      	mov	r0, r7
 800ac56:	f7ff fddf 	bl	800a818 <_Balloc>
 800ac5a:	4605      	mov	r5, r0
 800ac5c:	b948      	cbnz	r0, 800ac72 <__lshift+0x3e>
 800ac5e:	4602      	mov	r2, r0
 800ac60:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ac64:	4b27      	ldr	r3, [pc, #156]	; (800ad04 <__lshift+0xd0>)
 800ac66:	4828      	ldr	r0, [pc, #160]	; (800ad08 <__lshift+0xd4>)
 800ac68:	f000 fb88 	bl	800b37c <__assert_func>
 800ac6c:	3101      	adds	r1, #1
 800ac6e:	005b      	lsls	r3, r3, #1
 800ac70:	e7ee      	b.n	800ac50 <__lshift+0x1c>
 800ac72:	2300      	movs	r3, #0
 800ac74:	f100 0114 	add.w	r1, r0, #20
 800ac78:	f100 0210 	add.w	r2, r0, #16
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	4553      	cmp	r3, sl
 800ac80:	db33      	blt.n	800acea <__lshift+0xb6>
 800ac82:	6920      	ldr	r0, [r4, #16]
 800ac84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ac88:	f104 0314 	add.w	r3, r4, #20
 800ac8c:	f019 091f 	ands.w	r9, r9, #31
 800ac90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ac94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ac98:	d02b      	beq.n	800acf2 <__lshift+0xbe>
 800ac9a:	468a      	mov	sl, r1
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	f1c9 0e20 	rsb	lr, r9, #32
 800aca2:	6818      	ldr	r0, [r3, #0]
 800aca4:	fa00 f009 	lsl.w	r0, r0, r9
 800aca8:	4310      	orrs	r0, r2
 800acaa:	f84a 0b04 	str.w	r0, [sl], #4
 800acae:	f853 2b04 	ldr.w	r2, [r3], #4
 800acb2:	459c      	cmp	ip, r3
 800acb4:	fa22 f20e 	lsr.w	r2, r2, lr
 800acb8:	d8f3      	bhi.n	800aca2 <__lshift+0x6e>
 800acba:	ebac 0304 	sub.w	r3, ip, r4
 800acbe:	3b15      	subs	r3, #21
 800acc0:	f023 0303 	bic.w	r3, r3, #3
 800acc4:	3304      	adds	r3, #4
 800acc6:	f104 0015 	add.w	r0, r4, #21
 800acca:	4584      	cmp	ip, r0
 800accc:	bf38      	it	cc
 800acce:	2304      	movcc	r3, #4
 800acd0:	50ca      	str	r2, [r1, r3]
 800acd2:	b10a      	cbz	r2, 800acd8 <__lshift+0xa4>
 800acd4:	f108 0602 	add.w	r6, r8, #2
 800acd8:	3e01      	subs	r6, #1
 800acda:	4638      	mov	r0, r7
 800acdc:	4621      	mov	r1, r4
 800acde:	612e      	str	r6, [r5, #16]
 800ace0:	f7ff fdda 	bl	800a898 <_Bfree>
 800ace4:	4628      	mov	r0, r5
 800ace6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acea:	f842 0f04 	str.w	r0, [r2, #4]!
 800acee:	3301      	adds	r3, #1
 800acf0:	e7c5      	b.n	800ac7e <__lshift+0x4a>
 800acf2:	3904      	subs	r1, #4
 800acf4:	f853 2b04 	ldr.w	r2, [r3], #4
 800acf8:	459c      	cmp	ip, r3
 800acfa:	f841 2f04 	str.w	r2, [r1, #4]!
 800acfe:	d8f9      	bhi.n	800acf4 <__lshift+0xc0>
 800ad00:	e7ea      	b.n	800acd8 <__lshift+0xa4>
 800ad02:	bf00      	nop
 800ad04:	0800bb3a 	.word	0x0800bb3a
 800ad08:	0800bb4b 	.word	0x0800bb4b

0800ad0c <__mcmp>:
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	690a      	ldr	r2, [r1, #16]
 800ad10:	6900      	ldr	r0, [r0, #16]
 800ad12:	b530      	push	{r4, r5, lr}
 800ad14:	1a80      	subs	r0, r0, r2
 800ad16:	d10d      	bne.n	800ad34 <__mcmp+0x28>
 800ad18:	3314      	adds	r3, #20
 800ad1a:	3114      	adds	r1, #20
 800ad1c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ad20:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ad24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ad28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ad2c:	4295      	cmp	r5, r2
 800ad2e:	d002      	beq.n	800ad36 <__mcmp+0x2a>
 800ad30:	d304      	bcc.n	800ad3c <__mcmp+0x30>
 800ad32:	2001      	movs	r0, #1
 800ad34:	bd30      	pop	{r4, r5, pc}
 800ad36:	42a3      	cmp	r3, r4
 800ad38:	d3f4      	bcc.n	800ad24 <__mcmp+0x18>
 800ad3a:	e7fb      	b.n	800ad34 <__mcmp+0x28>
 800ad3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad40:	e7f8      	b.n	800ad34 <__mcmp+0x28>
	...

0800ad44 <__mdiff>:
 800ad44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad48:	460d      	mov	r5, r1
 800ad4a:	4607      	mov	r7, r0
 800ad4c:	4611      	mov	r1, r2
 800ad4e:	4628      	mov	r0, r5
 800ad50:	4614      	mov	r4, r2
 800ad52:	f7ff ffdb 	bl	800ad0c <__mcmp>
 800ad56:	1e06      	subs	r6, r0, #0
 800ad58:	d111      	bne.n	800ad7e <__mdiff+0x3a>
 800ad5a:	4631      	mov	r1, r6
 800ad5c:	4638      	mov	r0, r7
 800ad5e:	f7ff fd5b 	bl	800a818 <_Balloc>
 800ad62:	4602      	mov	r2, r0
 800ad64:	b928      	cbnz	r0, 800ad72 <__mdiff+0x2e>
 800ad66:	f240 2137 	movw	r1, #567	; 0x237
 800ad6a:	4b3a      	ldr	r3, [pc, #232]	; (800ae54 <__mdiff+0x110>)
 800ad6c:	483a      	ldr	r0, [pc, #232]	; (800ae58 <__mdiff+0x114>)
 800ad6e:	f000 fb05 	bl	800b37c <__assert_func>
 800ad72:	2301      	movs	r3, #1
 800ad74:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ad78:	4610      	mov	r0, r2
 800ad7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad7e:	bfa4      	itt	ge
 800ad80:	4623      	movge	r3, r4
 800ad82:	462c      	movge	r4, r5
 800ad84:	4638      	mov	r0, r7
 800ad86:	6861      	ldr	r1, [r4, #4]
 800ad88:	bfa6      	itte	ge
 800ad8a:	461d      	movge	r5, r3
 800ad8c:	2600      	movge	r6, #0
 800ad8e:	2601      	movlt	r6, #1
 800ad90:	f7ff fd42 	bl	800a818 <_Balloc>
 800ad94:	4602      	mov	r2, r0
 800ad96:	b918      	cbnz	r0, 800ada0 <__mdiff+0x5c>
 800ad98:	f240 2145 	movw	r1, #581	; 0x245
 800ad9c:	4b2d      	ldr	r3, [pc, #180]	; (800ae54 <__mdiff+0x110>)
 800ad9e:	e7e5      	b.n	800ad6c <__mdiff+0x28>
 800ada0:	f102 0814 	add.w	r8, r2, #20
 800ada4:	46c2      	mov	sl, r8
 800ada6:	f04f 0c00 	mov.w	ip, #0
 800adaa:	6927      	ldr	r7, [r4, #16]
 800adac:	60c6      	str	r6, [r0, #12]
 800adae:	692e      	ldr	r6, [r5, #16]
 800adb0:	f104 0014 	add.w	r0, r4, #20
 800adb4:	f105 0914 	add.w	r9, r5, #20
 800adb8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800adbc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800adc0:	3410      	adds	r4, #16
 800adc2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800adc6:	f859 3b04 	ldr.w	r3, [r9], #4
 800adca:	fa1f f18b 	uxth.w	r1, fp
 800adce:	4461      	add	r1, ip
 800add0:	fa1f fc83 	uxth.w	ip, r3
 800add4:	0c1b      	lsrs	r3, r3, #16
 800add6:	eba1 010c 	sub.w	r1, r1, ip
 800adda:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800adde:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ade2:	b289      	uxth	r1, r1
 800ade4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800ade8:	454e      	cmp	r6, r9
 800adea:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800adee:	f84a 1b04 	str.w	r1, [sl], #4
 800adf2:	d8e6      	bhi.n	800adc2 <__mdiff+0x7e>
 800adf4:	1b73      	subs	r3, r6, r5
 800adf6:	3b15      	subs	r3, #21
 800adf8:	f023 0303 	bic.w	r3, r3, #3
 800adfc:	3515      	adds	r5, #21
 800adfe:	3304      	adds	r3, #4
 800ae00:	42ae      	cmp	r6, r5
 800ae02:	bf38      	it	cc
 800ae04:	2304      	movcc	r3, #4
 800ae06:	4418      	add	r0, r3
 800ae08:	4443      	add	r3, r8
 800ae0a:	461e      	mov	r6, r3
 800ae0c:	4605      	mov	r5, r0
 800ae0e:	4575      	cmp	r5, lr
 800ae10:	d30e      	bcc.n	800ae30 <__mdiff+0xec>
 800ae12:	f10e 0103 	add.w	r1, lr, #3
 800ae16:	1a09      	subs	r1, r1, r0
 800ae18:	f021 0103 	bic.w	r1, r1, #3
 800ae1c:	3803      	subs	r0, #3
 800ae1e:	4586      	cmp	lr, r0
 800ae20:	bf38      	it	cc
 800ae22:	2100      	movcc	r1, #0
 800ae24:	440b      	add	r3, r1
 800ae26:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ae2a:	b189      	cbz	r1, 800ae50 <__mdiff+0x10c>
 800ae2c:	6117      	str	r7, [r2, #16]
 800ae2e:	e7a3      	b.n	800ad78 <__mdiff+0x34>
 800ae30:	f855 8b04 	ldr.w	r8, [r5], #4
 800ae34:	fa1f f188 	uxth.w	r1, r8
 800ae38:	4461      	add	r1, ip
 800ae3a:	140c      	asrs	r4, r1, #16
 800ae3c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ae40:	b289      	uxth	r1, r1
 800ae42:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ae46:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800ae4a:	f846 1b04 	str.w	r1, [r6], #4
 800ae4e:	e7de      	b.n	800ae0e <__mdiff+0xca>
 800ae50:	3f01      	subs	r7, #1
 800ae52:	e7e8      	b.n	800ae26 <__mdiff+0xe2>
 800ae54:	0800bb3a 	.word	0x0800bb3a
 800ae58:	0800bb4b 	.word	0x0800bb4b

0800ae5c <__d2b>:
 800ae5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae5e:	2101      	movs	r1, #1
 800ae60:	4617      	mov	r7, r2
 800ae62:	461c      	mov	r4, r3
 800ae64:	9e08      	ldr	r6, [sp, #32]
 800ae66:	f7ff fcd7 	bl	800a818 <_Balloc>
 800ae6a:	4605      	mov	r5, r0
 800ae6c:	b930      	cbnz	r0, 800ae7c <__d2b+0x20>
 800ae6e:	4602      	mov	r2, r0
 800ae70:	f240 310f 	movw	r1, #783	; 0x30f
 800ae74:	4b22      	ldr	r3, [pc, #136]	; (800af00 <__d2b+0xa4>)
 800ae76:	4823      	ldr	r0, [pc, #140]	; (800af04 <__d2b+0xa8>)
 800ae78:	f000 fa80 	bl	800b37c <__assert_func>
 800ae7c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800ae80:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800ae84:	bb24      	cbnz	r4, 800aed0 <__d2b+0x74>
 800ae86:	2f00      	cmp	r7, #0
 800ae88:	9301      	str	r3, [sp, #4]
 800ae8a:	d026      	beq.n	800aeda <__d2b+0x7e>
 800ae8c:	4668      	mov	r0, sp
 800ae8e:	9700      	str	r7, [sp, #0]
 800ae90:	f7ff fd8a 	bl	800a9a8 <__lo0bits>
 800ae94:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ae98:	b1e8      	cbz	r0, 800aed6 <__d2b+0x7a>
 800ae9a:	f1c0 0320 	rsb	r3, r0, #32
 800ae9e:	fa02 f303 	lsl.w	r3, r2, r3
 800aea2:	430b      	orrs	r3, r1
 800aea4:	40c2      	lsrs	r2, r0
 800aea6:	616b      	str	r3, [r5, #20]
 800aea8:	9201      	str	r2, [sp, #4]
 800aeaa:	9b01      	ldr	r3, [sp, #4]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	bf14      	ite	ne
 800aeb0:	2102      	movne	r1, #2
 800aeb2:	2101      	moveq	r1, #1
 800aeb4:	61ab      	str	r3, [r5, #24]
 800aeb6:	6129      	str	r1, [r5, #16]
 800aeb8:	b1bc      	cbz	r4, 800aeea <__d2b+0x8e>
 800aeba:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800aebe:	4404      	add	r4, r0
 800aec0:	6034      	str	r4, [r6, #0]
 800aec2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aec8:	6018      	str	r0, [r3, #0]
 800aeca:	4628      	mov	r0, r5
 800aecc:	b003      	add	sp, #12
 800aece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aed0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aed4:	e7d7      	b.n	800ae86 <__d2b+0x2a>
 800aed6:	6169      	str	r1, [r5, #20]
 800aed8:	e7e7      	b.n	800aeaa <__d2b+0x4e>
 800aeda:	a801      	add	r0, sp, #4
 800aedc:	f7ff fd64 	bl	800a9a8 <__lo0bits>
 800aee0:	9b01      	ldr	r3, [sp, #4]
 800aee2:	2101      	movs	r1, #1
 800aee4:	616b      	str	r3, [r5, #20]
 800aee6:	3020      	adds	r0, #32
 800aee8:	e7e5      	b.n	800aeb6 <__d2b+0x5a>
 800aeea:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aeee:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800aef2:	6030      	str	r0, [r6, #0]
 800aef4:	6918      	ldr	r0, [r3, #16]
 800aef6:	f7ff fd37 	bl	800a968 <__hi0bits>
 800aefa:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800aefe:	e7e2      	b.n	800aec6 <__d2b+0x6a>
 800af00:	0800bb3a 	.word	0x0800bb3a
 800af04:	0800bb4b 	.word	0x0800bb4b

0800af08 <__ssputs_r>:
 800af08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af0c:	461f      	mov	r7, r3
 800af0e:	688e      	ldr	r6, [r1, #8]
 800af10:	4682      	mov	sl, r0
 800af12:	42be      	cmp	r6, r7
 800af14:	460c      	mov	r4, r1
 800af16:	4690      	mov	r8, r2
 800af18:	680b      	ldr	r3, [r1, #0]
 800af1a:	d82c      	bhi.n	800af76 <__ssputs_r+0x6e>
 800af1c:	898a      	ldrh	r2, [r1, #12]
 800af1e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800af22:	d026      	beq.n	800af72 <__ssputs_r+0x6a>
 800af24:	6965      	ldr	r5, [r4, #20]
 800af26:	6909      	ldr	r1, [r1, #16]
 800af28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af2c:	eba3 0901 	sub.w	r9, r3, r1
 800af30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800af34:	1c7b      	adds	r3, r7, #1
 800af36:	444b      	add	r3, r9
 800af38:	106d      	asrs	r5, r5, #1
 800af3a:	429d      	cmp	r5, r3
 800af3c:	bf38      	it	cc
 800af3e:	461d      	movcc	r5, r3
 800af40:	0553      	lsls	r3, r2, #21
 800af42:	d527      	bpl.n	800af94 <__ssputs_r+0x8c>
 800af44:	4629      	mov	r1, r5
 800af46:	f7ff fbdb 	bl	800a700 <_malloc_r>
 800af4a:	4606      	mov	r6, r0
 800af4c:	b360      	cbz	r0, 800afa8 <__ssputs_r+0xa0>
 800af4e:	464a      	mov	r2, r9
 800af50:	6921      	ldr	r1, [r4, #16]
 800af52:	f000 fa05 	bl	800b360 <memcpy>
 800af56:	89a3      	ldrh	r3, [r4, #12]
 800af58:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800af5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af60:	81a3      	strh	r3, [r4, #12]
 800af62:	6126      	str	r6, [r4, #16]
 800af64:	444e      	add	r6, r9
 800af66:	6026      	str	r6, [r4, #0]
 800af68:	463e      	mov	r6, r7
 800af6a:	6165      	str	r5, [r4, #20]
 800af6c:	eba5 0509 	sub.w	r5, r5, r9
 800af70:	60a5      	str	r5, [r4, #8]
 800af72:	42be      	cmp	r6, r7
 800af74:	d900      	bls.n	800af78 <__ssputs_r+0x70>
 800af76:	463e      	mov	r6, r7
 800af78:	4632      	mov	r2, r6
 800af7a:	4641      	mov	r1, r8
 800af7c:	6820      	ldr	r0, [r4, #0]
 800af7e:	f000 f9c5 	bl	800b30c <memmove>
 800af82:	2000      	movs	r0, #0
 800af84:	68a3      	ldr	r3, [r4, #8]
 800af86:	1b9b      	subs	r3, r3, r6
 800af88:	60a3      	str	r3, [r4, #8]
 800af8a:	6823      	ldr	r3, [r4, #0]
 800af8c:	4433      	add	r3, r6
 800af8e:	6023      	str	r3, [r4, #0]
 800af90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af94:	462a      	mov	r2, r5
 800af96:	f000 fa35 	bl	800b404 <_realloc_r>
 800af9a:	4606      	mov	r6, r0
 800af9c:	2800      	cmp	r0, #0
 800af9e:	d1e0      	bne.n	800af62 <__ssputs_r+0x5a>
 800afa0:	4650      	mov	r0, sl
 800afa2:	6921      	ldr	r1, [r4, #16]
 800afa4:	f7ff fb3c 	bl	800a620 <_free_r>
 800afa8:	230c      	movs	r3, #12
 800afaa:	f8ca 3000 	str.w	r3, [sl]
 800afae:	89a3      	ldrh	r3, [r4, #12]
 800afb0:	f04f 30ff 	mov.w	r0, #4294967295
 800afb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afb8:	81a3      	strh	r3, [r4, #12]
 800afba:	e7e9      	b.n	800af90 <__ssputs_r+0x88>

0800afbc <_svfiprintf_r>:
 800afbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afc0:	4698      	mov	r8, r3
 800afc2:	898b      	ldrh	r3, [r1, #12]
 800afc4:	4607      	mov	r7, r0
 800afc6:	061b      	lsls	r3, r3, #24
 800afc8:	460d      	mov	r5, r1
 800afca:	4614      	mov	r4, r2
 800afcc:	b09d      	sub	sp, #116	; 0x74
 800afce:	d50e      	bpl.n	800afee <_svfiprintf_r+0x32>
 800afd0:	690b      	ldr	r3, [r1, #16]
 800afd2:	b963      	cbnz	r3, 800afee <_svfiprintf_r+0x32>
 800afd4:	2140      	movs	r1, #64	; 0x40
 800afd6:	f7ff fb93 	bl	800a700 <_malloc_r>
 800afda:	6028      	str	r0, [r5, #0]
 800afdc:	6128      	str	r0, [r5, #16]
 800afde:	b920      	cbnz	r0, 800afea <_svfiprintf_r+0x2e>
 800afe0:	230c      	movs	r3, #12
 800afe2:	603b      	str	r3, [r7, #0]
 800afe4:	f04f 30ff 	mov.w	r0, #4294967295
 800afe8:	e0d0      	b.n	800b18c <_svfiprintf_r+0x1d0>
 800afea:	2340      	movs	r3, #64	; 0x40
 800afec:	616b      	str	r3, [r5, #20]
 800afee:	2300      	movs	r3, #0
 800aff0:	9309      	str	r3, [sp, #36]	; 0x24
 800aff2:	2320      	movs	r3, #32
 800aff4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aff8:	2330      	movs	r3, #48	; 0x30
 800affa:	f04f 0901 	mov.w	r9, #1
 800affe:	f8cd 800c 	str.w	r8, [sp, #12]
 800b002:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800b1a4 <_svfiprintf_r+0x1e8>
 800b006:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b00a:	4623      	mov	r3, r4
 800b00c:	469a      	mov	sl, r3
 800b00e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b012:	b10a      	cbz	r2, 800b018 <_svfiprintf_r+0x5c>
 800b014:	2a25      	cmp	r2, #37	; 0x25
 800b016:	d1f9      	bne.n	800b00c <_svfiprintf_r+0x50>
 800b018:	ebba 0b04 	subs.w	fp, sl, r4
 800b01c:	d00b      	beq.n	800b036 <_svfiprintf_r+0x7a>
 800b01e:	465b      	mov	r3, fp
 800b020:	4622      	mov	r2, r4
 800b022:	4629      	mov	r1, r5
 800b024:	4638      	mov	r0, r7
 800b026:	f7ff ff6f 	bl	800af08 <__ssputs_r>
 800b02a:	3001      	adds	r0, #1
 800b02c:	f000 80a9 	beq.w	800b182 <_svfiprintf_r+0x1c6>
 800b030:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b032:	445a      	add	r2, fp
 800b034:	9209      	str	r2, [sp, #36]	; 0x24
 800b036:	f89a 3000 	ldrb.w	r3, [sl]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	f000 80a1 	beq.w	800b182 <_svfiprintf_r+0x1c6>
 800b040:	2300      	movs	r3, #0
 800b042:	f04f 32ff 	mov.w	r2, #4294967295
 800b046:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b04a:	f10a 0a01 	add.w	sl, sl, #1
 800b04e:	9304      	str	r3, [sp, #16]
 800b050:	9307      	str	r3, [sp, #28]
 800b052:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b056:	931a      	str	r3, [sp, #104]	; 0x68
 800b058:	4654      	mov	r4, sl
 800b05a:	2205      	movs	r2, #5
 800b05c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b060:	4850      	ldr	r0, [pc, #320]	; (800b1a4 <_svfiprintf_r+0x1e8>)
 800b062:	f7fe fc60 	bl	8009926 <memchr>
 800b066:	9a04      	ldr	r2, [sp, #16]
 800b068:	b9d8      	cbnz	r0, 800b0a2 <_svfiprintf_r+0xe6>
 800b06a:	06d0      	lsls	r0, r2, #27
 800b06c:	bf44      	itt	mi
 800b06e:	2320      	movmi	r3, #32
 800b070:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b074:	0711      	lsls	r1, r2, #28
 800b076:	bf44      	itt	mi
 800b078:	232b      	movmi	r3, #43	; 0x2b
 800b07a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b07e:	f89a 3000 	ldrb.w	r3, [sl]
 800b082:	2b2a      	cmp	r3, #42	; 0x2a
 800b084:	d015      	beq.n	800b0b2 <_svfiprintf_r+0xf6>
 800b086:	4654      	mov	r4, sl
 800b088:	2000      	movs	r0, #0
 800b08a:	f04f 0c0a 	mov.w	ip, #10
 800b08e:	9a07      	ldr	r2, [sp, #28]
 800b090:	4621      	mov	r1, r4
 800b092:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b096:	3b30      	subs	r3, #48	; 0x30
 800b098:	2b09      	cmp	r3, #9
 800b09a:	d94d      	bls.n	800b138 <_svfiprintf_r+0x17c>
 800b09c:	b1b0      	cbz	r0, 800b0cc <_svfiprintf_r+0x110>
 800b09e:	9207      	str	r2, [sp, #28]
 800b0a0:	e014      	b.n	800b0cc <_svfiprintf_r+0x110>
 800b0a2:	eba0 0308 	sub.w	r3, r0, r8
 800b0a6:	fa09 f303 	lsl.w	r3, r9, r3
 800b0aa:	4313      	orrs	r3, r2
 800b0ac:	46a2      	mov	sl, r4
 800b0ae:	9304      	str	r3, [sp, #16]
 800b0b0:	e7d2      	b.n	800b058 <_svfiprintf_r+0x9c>
 800b0b2:	9b03      	ldr	r3, [sp, #12]
 800b0b4:	1d19      	adds	r1, r3, #4
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	9103      	str	r1, [sp, #12]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	bfbb      	ittet	lt
 800b0be:	425b      	neglt	r3, r3
 800b0c0:	f042 0202 	orrlt.w	r2, r2, #2
 800b0c4:	9307      	strge	r3, [sp, #28]
 800b0c6:	9307      	strlt	r3, [sp, #28]
 800b0c8:	bfb8      	it	lt
 800b0ca:	9204      	strlt	r2, [sp, #16]
 800b0cc:	7823      	ldrb	r3, [r4, #0]
 800b0ce:	2b2e      	cmp	r3, #46	; 0x2e
 800b0d0:	d10c      	bne.n	800b0ec <_svfiprintf_r+0x130>
 800b0d2:	7863      	ldrb	r3, [r4, #1]
 800b0d4:	2b2a      	cmp	r3, #42	; 0x2a
 800b0d6:	d134      	bne.n	800b142 <_svfiprintf_r+0x186>
 800b0d8:	9b03      	ldr	r3, [sp, #12]
 800b0da:	3402      	adds	r4, #2
 800b0dc:	1d1a      	adds	r2, r3, #4
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	9203      	str	r2, [sp, #12]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	bfb8      	it	lt
 800b0e6:	f04f 33ff 	movlt.w	r3, #4294967295
 800b0ea:	9305      	str	r3, [sp, #20]
 800b0ec:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800b1a8 <_svfiprintf_r+0x1ec>
 800b0f0:	2203      	movs	r2, #3
 800b0f2:	4650      	mov	r0, sl
 800b0f4:	7821      	ldrb	r1, [r4, #0]
 800b0f6:	f7fe fc16 	bl	8009926 <memchr>
 800b0fa:	b138      	cbz	r0, 800b10c <_svfiprintf_r+0x150>
 800b0fc:	2240      	movs	r2, #64	; 0x40
 800b0fe:	9b04      	ldr	r3, [sp, #16]
 800b100:	eba0 000a 	sub.w	r0, r0, sl
 800b104:	4082      	lsls	r2, r0
 800b106:	4313      	orrs	r3, r2
 800b108:	3401      	adds	r4, #1
 800b10a:	9304      	str	r3, [sp, #16]
 800b10c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b110:	2206      	movs	r2, #6
 800b112:	4826      	ldr	r0, [pc, #152]	; (800b1ac <_svfiprintf_r+0x1f0>)
 800b114:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b118:	f7fe fc05 	bl	8009926 <memchr>
 800b11c:	2800      	cmp	r0, #0
 800b11e:	d038      	beq.n	800b192 <_svfiprintf_r+0x1d6>
 800b120:	4b23      	ldr	r3, [pc, #140]	; (800b1b0 <_svfiprintf_r+0x1f4>)
 800b122:	bb1b      	cbnz	r3, 800b16c <_svfiprintf_r+0x1b0>
 800b124:	9b03      	ldr	r3, [sp, #12]
 800b126:	3307      	adds	r3, #7
 800b128:	f023 0307 	bic.w	r3, r3, #7
 800b12c:	3308      	adds	r3, #8
 800b12e:	9303      	str	r3, [sp, #12]
 800b130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b132:	4433      	add	r3, r6
 800b134:	9309      	str	r3, [sp, #36]	; 0x24
 800b136:	e768      	b.n	800b00a <_svfiprintf_r+0x4e>
 800b138:	460c      	mov	r4, r1
 800b13a:	2001      	movs	r0, #1
 800b13c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b140:	e7a6      	b.n	800b090 <_svfiprintf_r+0xd4>
 800b142:	2300      	movs	r3, #0
 800b144:	f04f 0c0a 	mov.w	ip, #10
 800b148:	4619      	mov	r1, r3
 800b14a:	3401      	adds	r4, #1
 800b14c:	9305      	str	r3, [sp, #20]
 800b14e:	4620      	mov	r0, r4
 800b150:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b154:	3a30      	subs	r2, #48	; 0x30
 800b156:	2a09      	cmp	r2, #9
 800b158:	d903      	bls.n	800b162 <_svfiprintf_r+0x1a6>
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d0c6      	beq.n	800b0ec <_svfiprintf_r+0x130>
 800b15e:	9105      	str	r1, [sp, #20]
 800b160:	e7c4      	b.n	800b0ec <_svfiprintf_r+0x130>
 800b162:	4604      	mov	r4, r0
 800b164:	2301      	movs	r3, #1
 800b166:	fb0c 2101 	mla	r1, ip, r1, r2
 800b16a:	e7f0      	b.n	800b14e <_svfiprintf_r+0x192>
 800b16c:	ab03      	add	r3, sp, #12
 800b16e:	9300      	str	r3, [sp, #0]
 800b170:	462a      	mov	r2, r5
 800b172:	4638      	mov	r0, r7
 800b174:	4b0f      	ldr	r3, [pc, #60]	; (800b1b4 <_svfiprintf_r+0x1f8>)
 800b176:	a904      	add	r1, sp, #16
 800b178:	f7fd fe6e 	bl	8008e58 <_printf_float>
 800b17c:	1c42      	adds	r2, r0, #1
 800b17e:	4606      	mov	r6, r0
 800b180:	d1d6      	bne.n	800b130 <_svfiprintf_r+0x174>
 800b182:	89ab      	ldrh	r3, [r5, #12]
 800b184:	065b      	lsls	r3, r3, #25
 800b186:	f53f af2d 	bmi.w	800afe4 <_svfiprintf_r+0x28>
 800b18a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b18c:	b01d      	add	sp, #116	; 0x74
 800b18e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b192:	ab03      	add	r3, sp, #12
 800b194:	9300      	str	r3, [sp, #0]
 800b196:	462a      	mov	r2, r5
 800b198:	4638      	mov	r0, r7
 800b19a:	4b06      	ldr	r3, [pc, #24]	; (800b1b4 <_svfiprintf_r+0x1f8>)
 800b19c:	a904      	add	r1, sp, #16
 800b19e:	f7fe f8fb 	bl	8009398 <_printf_i>
 800b1a2:	e7eb      	b.n	800b17c <_svfiprintf_r+0x1c0>
 800b1a4:	0800bca4 	.word	0x0800bca4
 800b1a8:	0800bcaa 	.word	0x0800bcaa
 800b1ac:	0800bcae 	.word	0x0800bcae
 800b1b0:	08008e59 	.word	0x08008e59
 800b1b4:	0800af09 	.word	0x0800af09

0800b1b8 <__sflush_r>:
 800b1b8:	898a      	ldrh	r2, [r1, #12]
 800b1ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1bc:	4605      	mov	r5, r0
 800b1be:	0710      	lsls	r0, r2, #28
 800b1c0:	460c      	mov	r4, r1
 800b1c2:	d457      	bmi.n	800b274 <__sflush_r+0xbc>
 800b1c4:	684b      	ldr	r3, [r1, #4]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	dc04      	bgt.n	800b1d4 <__sflush_r+0x1c>
 800b1ca:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	dc01      	bgt.n	800b1d4 <__sflush_r+0x1c>
 800b1d0:	2000      	movs	r0, #0
 800b1d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b1d6:	2e00      	cmp	r6, #0
 800b1d8:	d0fa      	beq.n	800b1d0 <__sflush_r+0x18>
 800b1da:	2300      	movs	r3, #0
 800b1dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b1e0:	682f      	ldr	r7, [r5, #0]
 800b1e2:	6a21      	ldr	r1, [r4, #32]
 800b1e4:	602b      	str	r3, [r5, #0]
 800b1e6:	d032      	beq.n	800b24e <__sflush_r+0x96>
 800b1e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b1ea:	89a3      	ldrh	r3, [r4, #12]
 800b1ec:	075a      	lsls	r2, r3, #29
 800b1ee:	d505      	bpl.n	800b1fc <__sflush_r+0x44>
 800b1f0:	6863      	ldr	r3, [r4, #4]
 800b1f2:	1ac0      	subs	r0, r0, r3
 800b1f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b1f6:	b10b      	cbz	r3, 800b1fc <__sflush_r+0x44>
 800b1f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b1fa:	1ac0      	subs	r0, r0, r3
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	4602      	mov	r2, r0
 800b200:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b202:	4628      	mov	r0, r5
 800b204:	6a21      	ldr	r1, [r4, #32]
 800b206:	47b0      	blx	r6
 800b208:	1c43      	adds	r3, r0, #1
 800b20a:	89a3      	ldrh	r3, [r4, #12]
 800b20c:	d106      	bne.n	800b21c <__sflush_r+0x64>
 800b20e:	6829      	ldr	r1, [r5, #0]
 800b210:	291d      	cmp	r1, #29
 800b212:	d82b      	bhi.n	800b26c <__sflush_r+0xb4>
 800b214:	4a28      	ldr	r2, [pc, #160]	; (800b2b8 <__sflush_r+0x100>)
 800b216:	410a      	asrs	r2, r1
 800b218:	07d6      	lsls	r6, r2, #31
 800b21a:	d427      	bmi.n	800b26c <__sflush_r+0xb4>
 800b21c:	2200      	movs	r2, #0
 800b21e:	6062      	str	r2, [r4, #4]
 800b220:	6922      	ldr	r2, [r4, #16]
 800b222:	04d9      	lsls	r1, r3, #19
 800b224:	6022      	str	r2, [r4, #0]
 800b226:	d504      	bpl.n	800b232 <__sflush_r+0x7a>
 800b228:	1c42      	adds	r2, r0, #1
 800b22a:	d101      	bne.n	800b230 <__sflush_r+0x78>
 800b22c:	682b      	ldr	r3, [r5, #0]
 800b22e:	b903      	cbnz	r3, 800b232 <__sflush_r+0x7a>
 800b230:	6560      	str	r0, [r4, #84]	; 0x54
 800b232:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b234:	602f      	str	r7, [r5, #0]
 800b236:	2900      	cmp	r1, #0
 800b238:	d0ca      	beq.n	800b1d0 <__sflush_r+0x18>
 800b23a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b23e:	4299      	cmp	r1, r3
 800b240:	d002      	beq.n	800b248 <__sflush_r+0x90>
 800b242:	4628      	mov	r0, r5
 800b244:	f7ff f9ec 	bl	800a620 <_free_r>
 800b248:	2000      	movs	r0, #0
 800b24a:	6360      	str	r0, [r4, #52]	; 0x34
 800b24c:	e7c1      	b.n	800b1d2 <__sflush_r+0x1a>
 800b24e:	2301      	movs	r3, #1
 800b250:	4628      	mov	r0, r5
 800b252:	47b0      	blx	r6
 800b254:	1c41      	adds	r1, r0, #1
 800b256:	d1c8      	bne.n	800b1ea <__sflush_r+0x32>
 800b258:	682b      	ldr	r3, [r5, #0]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d0c5      	beq.n	800b1ea <__sflush_r+0x32>
 800b25e:	2b1d      	cmp	r3, #29
 800b260:	d001      	beq.n	800b266 <__sflush_r+0xae>
 800b262:	2b16      	cmp	r3, #22
 800b264:	d101      	bne.n	800b26a <__sflush_r+0xb2>
 800b266:	602f      	str	r7, [r5, #0]
 800b268:	e7b2      	b.n	800b1d0 <__sflush_r+0x18>
 800b26a:	89a3      	ldrh	r3, [r4, #12]
 800b26c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b270:	81a3      	strh	r3, [r4, #12]
 800b272:	e7ae      	b.n	800b1d2 <__sflush_r+0x1a>
 800b274:	690f      	ldr	r7, [r1, #16]
 800b276:	2f00      	cmp	r7, #0
 800b278:	d0aa      	beq.n	800b1d0 <__sflush_r+0x18>
 800b27a:	0793      	lsls	r3, r2, #30
 800b27c:	bf18      	it	ne
 800b27e:	2300      	movne	r3, #0
 800b280:	680e      	ldr	r6, [r1, #0]
 800b282:	bf08      	it	eq
 800b284:	694b      	ldreq	r3, [r1, #20]
 800b286:	1bf6      	subs	r6, r6, r7
 800b288:	600f      	str	r7, [r1, #0]
 800b28a:	608b      	str	r3, [r1, #8]
 800b28c:	2e00      	cmp	r6, #0
 800b28e:	dd9f      	ble.n	800b1d0 <__sflush_r+0x18>
 800b290:	4633      	mov	r3, r6
 800b292:	463a      	mov	r2, r7
 800b294:	4628      	mov	r0, r5
 800b296:	6a21      	ldr	r1, [r4, #32]
 800b298:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b29c:	47e0      	blx	ip
 800b29e:	2800      	cmp	r0, #0
 800b2a0:	dc06      	bgt.n	800b2b0 <__sflush_r+0xf8>
 800b2a2:	89a3      	ldrh	r3, [r4, #12]
 800b2a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b2a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2ac:	81a3      	strh	r3, [r4, #12]
 800b2ae:	e790      	b.n	800b1d2 <__sflush_r+0x1a>
 800b2b0:	4407      	add	r7, r0
 800b2b2:	1a36      	subs	r6, r6, r0
 800b2b4:	e7ea      	b.n	800b28c <__sflush_r+0xd4>
 800b2b6:	bf00      	nop
 800b2b8:	dfbffffe 	.word	0xdfbffffe

0800b2bc <_fflush_r>:
 800b2bc:	b538      	push	{r3, r4, r5, lr}
 800b2be:	690b      	ldr	r3, [r1, #16]
 800b2c0:	4605      	mov	r5, r0
 800b2c2:	460c      	mov	r4, r1
 800b2c4:	b913      	cbnz	r3, 800b2cc <_fflush_r+0x10>
 800b2c6:	2500      	movs	r5, #0
 800b2c8:	4628      	mov	r0, r5
 800b2ca:	bd38      	pop	{r3, r4, r5, pc}
 800b2cc:	b118      	cbz	r0, 800b2d6 <_fflush_r+0x1a>
 800b2ce:	6a03      	ldr	r3, [r0, #32]
 800b2d0:	b90b      	cbnz	r3, 800b2d6 <_fflush_r+0x1a>
 800b2d2:	f7fe fa0f 	bl	80096f4 <__sinit>
 800b2d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d0f3      	beq.n	800b2c6 <_fflush_r+0xa>
 800b2de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b2e0:	07d0      	lsls	r0, r2, #31
 800b2e2:	d404      	bmi.n	800b2ee <_fflush_r+0x32>
 800b2e4:	0599      	lsls	r1, r3, #22
 800b2e6:	d402      	bmi.n	800b2ee <_fflush_r+0x32>
 800b2e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2ea:	f7fe fb1a 	bl	8009922 <__retarget_lock_acquire_recursive>
 800b2ee:	4628      	mov	r0, r5
 800b2f0:	4621      	mov	r1, r4
 800b2f2:	f7ff ff61 	bl	800b1b8 <__sflush_r>
 800b2f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b2f8:	4605      	mov	r5, r0
 800b2fa:	07da      	lsls	r2, r3, #31
 800b2fc:	d4e4      	bmi.n	800b2c8 <_fflush_r+0xc>
 800b2fe:	89a3      	ldrh	r3, [r4, #12]
 800b300:	059b      	lsls	r3, r3, #22
 800b302:	d4e1      	bmi.n	800b2c8 <_fflush_r+0xc>
 800b304:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b306:	f7fe fb0d 	bl	8009924 <__retarget_lock_release_recursive>
 800b30a:	e7dd      	b.n	800b2c8 <_fflush_r+0xc>

0800b30c <memmove>:
 800b30c:	4288      	cmp	r0, r1
 800b30e:	b510      	push	{r4, lr}
 800b310:	eb01 0402 	add.w	r4, r1, r2
 800b314:	d902      	bls.n	800b31c <memmove+0x10>
 800b316:	4284      	cmp	r4, r0
 800b318:	4623      	mov	r3, r4
 800b31a:	d807      	bhi.n	800b32c <memmove+0x20>
 800b31c:	1e43      	subs	r3, r0, #1
 800b31e:	42a1      	cmp	r1, r4
 800b320:	d008      	beq.n	800b334 <memmove+0x28>
 800b322:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b326:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b32a:	e7f8      	b.n	800b31e <memmove+0x12>
 800b32c:	4601      	mov	r1, r0
 800b32e:	4402      	add	r2, r0
 800b330:	428a      	cmp	r2, r1
 800b332:	d100      	bne.n	800b336 <memmove+0x2a>
 800b334:	bd10      	pop	{r4, pc}
 800b336:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b33a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b33e:	e7f7      	b.n	800b330 <memmove+0x24>

0800b340 <_sbrk_r>:
 800b340:	b538      	push	{r3, r4, r5, lr}
 800b342:	2300      	movs	r3, #0
 800b344:	4d05      	ldr	r5, [pc, #20]	; (800b35c <_sbrk_r+0x1c>)
 800b346:	4604      	mov	r4, r0
 800b348:	4608      	mov	r0, r1
 800b34a:	602b      	str	r3, [r5, #0]
 800b34c:	f7f5 ff14 	bl	8001178 <_sbrk>
 800b350:	1c43      	adds	r3, r0, #1
 800b352:	d102      	bne.n	800b35a <_sbrk_r+0x1a>
 800b354:	682b      	ldr	r3, [r5, #0]
 800b356:	b103      	cbz	r3, 800b35a <_sbrk_r+0x1a>
 800b358:	6023      	str	r3, [r4, #0]
 800b35a:	bd38      	pop	{r3, r4, r5, pc}
 800b35c:	20001a64 	.word	0x20001a64

0800b360 <memcpy>:
 800b360:	440a      	add	r2, r1
 800b362:	4291      	cmp	r1, r2
 800b364:	f100 33ff 	add.w	r3, r0, #4294967295
 800b368:	d100      	bne.n	800b36c <memcpy+0xc>
 800b36a:	4770      	bx	lr
 800b36c:	b510      	push	{r4, lr}
 800b36e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b372:	4291      	cmp	r1, r2
 800b374:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b378:	d1f9      	bne.n	800b36e <memcpy+0xe>
 800b37a:	bd10      	pop	{r4, pc}

0800b37c <__assert_func>:
 800b37c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b37e:	4614      	mov	r4, r2
 800b380:	461a      	mov	r2, r3
 800b382:	4b09      	ldr	r3, [pc, #36]	; (800b3a8 <__assert_func+0x2c>)
 800b384:	4605      	mov	r5, r0
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	68d8      	ldr	r0, [r3, #12]
 800b38a:	b14c      	cbz	r4, 800b3a0 <__assert_func+0x24>
 800b38c:	4b07      	ldr	r3, [pc, #28]	; (800b3ac <__assert_func+0x30>)
 800b38e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b392:	9100      	str	r1, [sp, #0]
 800b394:	462b      	mov	r3, r5
 800b396:	4906      	ldr	r1, [pc, #24]	; (800b3b0 <__assert_func+0x34>)
 800b398:	f000 f870 	bl	800b47c <fiprintf>
 800b39c:	f000 f880 	bl	800b4a0 <abort>
 800b3a0:	4b04      	ldr	r3, [pc, #16]	; (800b3b4 <__assert_func+0x38>)
 800b3a2:	461c      	mov	r4, r3
 800b3a4:	e7f3      	b.n	800b38e <__assert_func+0x12>
 800b3a6:	bf00      	nop
 800b3a8:	200001d4 	.word	0x200001d4
 800b3ac:	0800bcbf 	.word	0x0800bcbf
 800b3b0:	0800bccc 	.word	0x0800bccc
 800b3b4:	0800bcfa 	.word	0x0800bcfa

0800b3b8 <_calloc_r>:
 800b3b8:	b570      	push	{r4, r5, r6, lr}
 800b3ba:	fba1 5402 	umull	r5, r4, r1, r2
 800b3be:	b934      	cbnz	r4, 800b3ce <_calloc_r+0x16>
 800b3c0:	4629      	mov	r1, r5
 800b3c2:	f7ff f99d 	bl	800a700 <_malloc_r>
 800b3c6:	4606      	mov	r6, r0
 800b3c8:	b928      	cbnz	r0, 800b3d6 <_calloc_r+0x1e>
 800b3ca:	4630      	mov	r0, r6
 800b3cc:	bd70      	pop	{r4, r5, r6, pc}
 800b3ce:	220c      	movs	r2, #12
 800b3d0:	2600      	movs	r6, #0
 800b3d2:	6002      	str	r2, [r0, #0]
 800b3d4:	e7f9      	b.n	800b3ca <_calloc_r+0x12>
 800b3d6:	462a      	mov	r2, r5
 800b3d8:	4621      	mov	r1, r4
 800b3da:	f7fe fa24 	bl	8009826 <memset>
 800b3de:	e7f4      	b.n	800b3ca <_calloc_r+0x12>

0800b3e0 <__ascii_mbtowc>:
 800b3e0:	b082      	sub	sp, #8
 800b3e2:	b901      	cbnz	r1, 800b3e6 <__ascii_mbtowc+0x6>
 800b3e4:	a901      	add	r1, sp, #4
 800b3e6:	b142      	cbz	r2, 800b3fa <__ascii_mbtowc+0x1a>
 800b3e8:	b14b      	cbz	r3, 800b3fe <__ascii_mbtowc+0x1e>
 800b3ea:	7813      	ldrb	r3, [r2, #0]
 800b3ec:	600b      	str	r3, [r1, #0]
 800b3ee:	7812      	ldrb	r2, [r2, #0]
 800b3f0:	1e10      	subs	r0, r2, #0
 800b3f2:	bf18      	it	ne
 800b3f4:	2001      	movne	r0, #1
 800b3f6:	b002      	add	sp, #8
 800b3f8:	4770      	bx	lr
 800b3fa:	4610      	mov	r0, r2
 800b3fc:	e7fb      	b.n	800b3f6 <__ascii_mbtowc+0x16>
 800b3fe:	f06f 0001 	mvn.w	r0, #1
 800b402:	e7f8      	b.n	800b3f6 <__ascii_mbtowc+0x16>

0800b404 <_realloc_r>:
 800b404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b408:	4680      	mov	r8, r0
 800b40a:	4614      	mov	r4, r2
 800b40c:	460e      	mov	r6, r1
 800b40e:	b921      	cbnz	r1, 800b41a <_realloc_r+0x16>
 800b410:	4611      	mov	r1, r2
 800b412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b416:	f7ff b973 	b.w	800a700 <_malloc_r>
 800b41a:	b92a      	cbnz	r2, 800b428 <_realloc_r+0x24>
 800b41c:	f7ff f900 	bl	800a620 <_free_r>
 800b420:	4625      	mov	r5, r4
 800b422:	4628      	mov	r0, r5
 800b424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b428:	f000 f841 	bl	800b4ae <_malloc_usable_size_r>
 800b42c:	4284      	cmp	r4, r0
 800b42e:	4607      	mov	r7, r0
 800b430:	d802      	bhi.n	800b438 <_realloc_r+0x34>
 800b432:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b436:	d812      	bhi.n	800b45e <_realloc_r+0x5a>
 800b438:	4621      	mov	r1, r4
 800b43a:	4640      	mov	r0, r8
 800b43c:	f7ff f960 	bl	800a700 <_malloc_r>
 800b440:	4605      	mov	r5, r0
 800b442:	2800      	cmp	r0, #0
 800b444:	d0ed      	beq.n	800b422 <_realloc_r+0x1e>
 800b446:	42bc      	cmp	r4, r7
 800b448:	4622      	mov	r2, r4
 800b44a:	4631      	mov	r1, r6
 800b44c:	bf28      	it	cs
 800b44e:	463a      	movcs	r2, r7
 800b450:	f7ff ff86 	bl	800b360 <memcpy>
 800b454:	4631      	mov	r1, r6
 800b456:	4640      	mov	r0, r8
 800b458:	f7ff f8e2 	bl	800a620 <_free_r>
 800b45c:	e7e1      	b.n	800b422 <_realloc_r+0x1e>
 800b45e:	4635      	mov	r5, r6
 800b460:	e7df      	b.n	800b422 <_realloc_r+0x1e>

0800b462 <__ascii_wctomb>:
 800b462:	4603      	mov	r3, r0
 800b464:	4608      	mov	r0, r1
 800b466:	b141      	cbz	r1, 800b47a <__ascii_wctomb+0x18>
 800b468:	2aff      	cmp	r2, #255	; 0xff
 800b46a:	d904      	bls.n	800b476 <__ascii_wctomb+0x14>
 800b46c:	228a      	movs	r2, #138	; 0x8a
 800b46e:	f04f 30ff 	mov.w	r0, #4294967295
 800b472:	601a      	str	r2, [r3, #0]
 800b474:	4770      	bx	lr
 800b476:	2001      	movs	r0, #1
 800b478:	700a      	strb	r2, [r1, #0]
 800b47a:	4770      	bx	lr

0800b47c <fiprintf>:
 800b47c:	b40e      	push	{r1, r2, r3}
 800b47e:	b503      	push	{r0, r1, lr}
 800b480:	4601      	mov	r1, r0
 800b482:	ab03      	add	r3, sp, #12
 800b484:	4805      	ldr	r0, [pc, #20]	; (800b49c <fiprintf+0x20>)
 800b486:	f853 2b04 	ldr.w	r2, [r3], #4
 800b48a:	6800      	ldr	r0, [r0, #0]
 800b48c:	9301      	str	r3, [sp, #4]
 800b48e:	f000 f83d 	bl	800b50c <_vfiprintf_r>
 800b492:	b002      	add	sp, #8
 800b494:	f85d eb04 	ldr.w	lr, [sp], #4
 800b498:	b003      	add	sp, #12
 800b49a:	4770      	bx	lr
 800b49c:	200001d4 	.word	0x200001d4

0800b4a0 <abort>:
 800b4a0:	2006      	movs	r0, #6
 800b4a2:	b508      	push	{r3, lr}
 800b4a4:	f000 fa0a 	bl	800b8bc <raise>
 800b4a8:	2001      	movs	r0, #1
 800b4aa:	f7f5 fdf2 	bl	8001092 <_exit>

0800b4ae <_malloc_usable_size_r>:
 800b4ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4b2:	1f18      	subs	r0, r3, #4
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	bfbc      	itt	lt
 800b4b8:	580b      	ldrlt	r3, [r1, r0]
 800b4ba:	18c0      	addlt	r0, r0, r3
 800b4bc:	4770      	bx	lr

0800b4be <__sfputc_r>:
 800b4be:	6893      	ldr	r3, [r2, #8]
 800b4c0:	b410      	push	{r4}
 800b4c2:	3b01      	subs	r3, #1
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	6093      	str	r3, [r2, #8]
 800b4c8:	da07      	bge.n	800b4da <__sfputc_r+0x1c>
 800b4ca:	6994      	ldr	r4, [r2, #24]
 800b4cc:	42a3      	cmp	r3, r4
 800b4ce:	db01      	blt.n	800b4d4 <__sfputc_r+0x16>
 800b4d0:	290a      	cmp	r1, #10
 800b4d2:	d102      	bne.n	800b4da <__sfputc_r+0x1c>
 800b4d4:	bc10      	pop	{r4}
 800b4d6:	f000 b933 	b.w	800b740 <__swbuf_r>
 800b4da:	6813      	ldr	r3, [r2, #0]
 800b4dc:	1c58      	adds	r0, r3, #1
 800b4de:	6010      	str	r0, [r2, #0]
 800b4e0:	7019      	strb	r1, [r3, #0]
 800b4e2:	4608      	mov	r0, r1
 800b4e4:	bc10      	pop	{r4}
 800b4e6:	4770      	bx	lr

0800b4e8 <__sfputs_r>:
 800b4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ea:	4606      	mov	r6, r0
 800b4ec:	460f      	mov	r7, r1
 800b4ee:	4614      	mov	r4, r2
 800b4f0:	18d5      	adds	r5, r2, r3
 800b4f2:	42ac      	cmp	r4, r5
 800b4f4:	d101      	bne.n	800b4fa <__sfputs_r+0x12>
 800b4f6:	2000      	movs	r0, #0
 800b4f8:	e007      	b.n	800b50a <__sfputs_r+0x22>
 800b4fa:	463a      	mov	r2, r7
 800b4fc:	4630      	mov	r0, r6
 800b4fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b502:	f7ff ffdc 	bl	800b4be <__sfputc_r>
 800b506:	1c43      	adds	r3, r0, #1
 800b508:	d1f3      	bne.n	800b4f2 <__sfputs_r+0xa>
 800b50a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b50c <_vfiprintf_r>:
 800b50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b510:	460d      	mov	r5, r1
 800b512:	4614      	mov	r4, r2
 800b514:	4698      	mov	r8, r3
 800b516:	4606      	mov	r6, r0
 800b518:	b09d      	sub	sp, #116	; 0x74
 800b51a:	b118      	cbz	r0, 800b524 <_vfiprintf_r+0x18>
 800b51c:	6a03      	ldr	r3, [r0, #32]
 800b51e:	b90b      	cbnz	r3, 800b524 <_vfiprintf_r+0x18>
 800b520:	f7fe f8e8 	bl	80096f4 <__sinit>
 800b524:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b526:	07d9      	lsls	r1, r3, #31
 800b528:	d405      	bmi.n	800b536 <_vfiprintf_r+0x2a>
 800b52a:	89ab      	ldrh	r3, [r5, #12]
 800b52c:	059a      	lsls	r2, r3, #22
 800b52e:	d402      	bmi.n	800b536 <_vfiprintf_r+0x2a>
 800b530:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b532:	f7fe f9f6 	bl	8009922 <__retarget_lock_acquire_recursive>
 800b536:	89ab      	ldrh	r3, [r5, #12]
 800b538:	071b      	lsls	r3, r3, #28
 800b53a:	d501      	bpl.n	800b540 <_vfiprintf_r+0x34>
 800b53c:	692b      	ldr	r3, [r5, #16]
 800b53e:	b99b      	cbnz	r3, 800b568 <_vfiprintf_r+0x5c>
 800b540:	4629      	mov	r1, r5
 800b542:	4630      	mov	r0, r6
 800b544:	f000 f93a 	bl	800b7bc <__swsetup_r>
 800b548:	b170      	cbz	r0, 800b568 <_vfiprintf_r+0x5c>
 800b54a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b54c:	07dc      	lsls	r4, r3, #31
 800b54e:	d504      	bpl.n	800b55a <_vfiprintf_r+0x4e>
 800b550:	f04f 30ff 	mov.w	r0, #4294967295
 800b554:	b01d      	add	sp, #116	; 0x74
 800b556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b55a:	89ab      	ldrh	r3, [r5, #12]
 800b55c:	0598      	lsls	r0, r3, #22
 800b55e:	d4f7      	bmi.n	800b550 <_vfiprintf_r+0x44>
 800b560:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b562:	f7fe f9df 	bl	8009924 <__retarget_lock_release_recursive>
 800b566:	e7f3      	b.n	800b550 <_vfiprintf_r+0x44>
 800b568:	2300      	movs	r3, #0
 800b56a:	9309      	str	r3, [sp, #36]	; 0x24
 800b56c:	2320      	movs	r3, #32
 800b56e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b572:	2330      	movs	r3, #48	; 0x30
 800b574:	f04f 0901 	mov.w	r9, #1
 800b578:	f8cd 800c 	str.w	r8, [sp, #12]
 800b57c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800b72c <_vfiprintf_r+0x220>
 800b580:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b584:	4623      	mov	r3, r4
 800b586:	469a      	mov	sl, r3
 800b588:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b58c:	b10a      	cbz	r2, 800b592 <_vfiprintf_r+0x86>
 800b58e:	2a25      	cmp	r2, #37	; 0x25
 800b590:	d1f9      	bne.n	800b586 <_vfiprintf_r+0x7a>
 800b592:	ebba 0b04 	subs.w	fp, sl, r4
 800b596:	d00b      	beq.n	800b5b0 <_vfiprintf_r+0xa4>
 800b598:	465b      	mov	r3, fp
 800b59a:	4622      	mov	r2, r4
 800b59c:	4629      	mov	r1, r5
 800b59e:	4630      	mov	r0, r6
 800b5a0:	f7ff ffa2 	bl	800b4e8 <__sfputs_r>
 800b5a4:	3001      	adds	r0, #1
 800b5a6:	f000 80a9 	beq.w	800b6fc <_vfiprintf_r+0x1f0>
 800b5aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5ac:	445a      	add	r2, fp
 800b5ae:	9209      	str	r2, [sp, #36]	; 0x24
 800b5b0:	f89a 3000 	ldrb.w	r3, [sl]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	f000 80a1 	beq.w	800b6fc <_vfiprintf_r+0x1f0>
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	f04f 32ff 	mov.w	r2, #4294967295
 800b5c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5c4:	f10a 0a01 	add.w	sl, sl, #1
 800b5c8:	9304      	str	r3, [sp, #16]
 800b5ca:	9307      	str	r3, [sp, #28]
 800b5cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5d0:	931a      	str	r3, [sp, #104]	; 0x68
 800b5d2:	4654      	mov	r4, sl
 800b5d4:	2205      	movs	r2, #5
 800b5d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5da:	4854      	ldr	r0, [pc, #336]	; (800b72c <_vfiprintf_r+0x220>)
 800b5dc:	f7fe f9a3 	bl	8009926 <memchr>
 800b5e0:	9a04      	ldr	r2, [sp, #16]
 800b5e2:	b9d8      	cbnz	r0, 800b61c <_vfiprintf_r+0x110>
 800b5e4:	06d1      	lsls	r1, r2, #27
 800b5e6:	bf44      	itt	mi
 800b5e8:	2320      	movmi	r3, #32
 800b5ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5ee:	0713      	lsls	r3, r2, #28
 800b5f0:	bf44      	itt	mi
 800b5f2:	232b      	movmi	r3, #43	; 0x2b
 800b5f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5f8:	f89a 3000 	ldrb.w	r3, [sl]
 800b5fc:	2b2a      	cmp	r3, #42	; 0x2a
 800b5fe:	d015      	beq.n	800b62c <_vfiprintf_r+0x120>
 800b600:	4654      	mov	r4, sl
 800b602:	2000      	movs	r0, #0
 800b604:	f04f 0c0a 	mov.w	ip, #10
 800b608:	9a07      	ldr	r2, [sp, #28]
 800b60a:	4621      	mov	r1, r4
 800b60c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b610:	3b30      	subs	r3, #48	; 0x30
 800b612:	2b09      	cmp	r3, #9
 800b614:	d94d      	bls.n	800b6b2 <_vfiprintf_r+0x1a6>
 800b616:	b1b0      	cbz	r0, 800b646 <_vfiprintf_r+0x13a>
 800b618:	9207      	str	r2, [sp, #28]
 800b61a:	e014      	b.n	800b646 <_vfiprintf_r+0x13a>
 800b61c:	eba0 0308 	sub.w	r3, r0, r8
 800b620:	fa09 f303 	lsl.w	r3, r9, r3
 800b624:	4313      	orrs	r3, r2
 800b626:	46a2      	mov	sl, r4
 800b628:	9304      	str	r3, [sp, #16]
 800b62a:	e7d2      	b.n	800b5d2 <_vfiprintf_r+0xc6>
 800b62c:	9b03      	ldr	r3, [sp, #12]
 800b62e:	1d19      	adds	r1, r3, #4
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	9103      	str	r1, [sp, #12]
 800b634:	2b00      	cmp	r3, #0
 800b636:	bfbb      	ittet	lt
 800b638:	425b      	neglt	r3, r3
 800b63a:	f042 0202 	orrlt.w	r2, r2, #2
 800b63e:	9307      	strge	r3, [sp, #28]
 800b640:	9307      	strlt	r3, [sp, #28]
 800b642:	bfb8      	it	lt
 800b644:	9204      	strlt	r2, [sp, #16]
 800b646:	7823      	ldrb	r3, [r4, #0]
 800b648:	2b2e      	cmp	r3, #46	; 0x2e
 800b64a:	d10c      	bne.n	800b666 <_vfiprintf_r+0x15a>
 800b64c:	7863      	ldrb	r3, [r4, #1]
 800b64e:	2b2a      	cmp	r3, #42	; 0x2a
 800b650:	d134      	bne.n	800b6bc <_vfiprintf_r+0x1b0>
 800b652:	9b03      	ldr	r3, [sp, #12]
 800b654:	3402      	adds	r4, #2
 800b656:	1d1a      	adds	r2, r3, #4
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	9203      	str	r2, [sp, #12]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	bfb8      	it	lt
 800b660:	f04f 33ff 	movlt.w	r3, #4294967295
 800b664:	9305      	str	r3, [sp, #20]
 800b666:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b730 <_vfiprintf_r+0x224>
 800b66a:	2203      	movs	r2, #3
 800b66c:	4650      	mov	r0, sl
 800b66e:	7821      	ldrb	r1, [r4, #0]
 800b670:	f7fe f959 	bl	8009926 <memchr>
 800b674:	b138      	cbz	r0, 800b686 <_vfiprintf_r+0x17a>
 800b676:	2240      	movs	r2, #64	; 0x40
 800b678:	9b04      	ldr	r3, [sp, #16]
 800b67a:	eba0 000a 	sub.w	r0, r0, sl
 800b67e:	4082      	lsls	r2, r0
 800b680:	4313      	orrs	r3, r2
 800b682:	3401      	adds	r4, #1
 800b684:	9304      	str	r3, [sp, #16]
 800b686:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b68a:	2206      	movs	r2, #6
 800b68c:	4829      	ldr	r0, [pc, #164]	; (800b734 <_vfiprintf_r+0x228>)
 800b68e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b692:	f7fe f948 	bl	8009926 <memchr>
 800b696:	2800      	cmp	r0, #0
 800b698:	d03f      	beq.n	800b71a <_vfiprintf_r+0x20e>
 800b69a:	4b27      	ldr	r3, [pc, #156]	; (800b738 <_vfiprintf_r+0x22c>)
 800b69c:	bb1b      	cbnz	r3, 800b6e6 <_vfiprintf_r+0x1da>
 800b69e:	9b03      	ldr	r3, [sp, #12]
 800b6a0:	3307      	adds	r3, #7
 800b6a2:	f023 0307 	bic.w	r3, r3, #7
 800b6a6:	3308      	adds	r3, #8
 800b6a8:	9303      	str	r3, [sp, #12]
 800b6aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6ac:	443b      	add	r3, r7
 800b6ae:	9309      	str	r3, [sp, #36]	; 0x24
 800b6b0:	e768      	b.n	800b584 <_vfiprintf_r+0x78>
 800b6b2:	460c      	mov	r4, r1
 800b6b4:	2001      	movs	r0, #1
 800b6b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6ba:	e7a6      	b.n	800b60a <_vfiprintf_r+0xfe>
 800b6bc:	2300      	movs	r3, #0
 800b6be:	f04f 0c0a 	mov.w	ip, #10
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	3401      	adds	r4, #1
 800b6c6:	9305      	str	r3, [sp, #20]
 800b6c8:	4620      	mov	r0, r4
 800b6ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6ce:	3a30      	subs	r2, #48	; 0x30
 800b6d0:	2a09      	cmp	r2, #9
 800b6d2:	d903      	bls.n	800b6dc <_vfiprintf_r+0x1d0>
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d0c6      	beq.n	800b666 <_vfiprintf_r+0x15a>
 800b6d8:	9105      	str	r1, [sp, #20]
 800b6da:	e7c4      	b.n	800b666 <_vfiprintf_r+0x15a>
 800b6dc:	4604      	mov	r4, r0
 800b6de:	2301      	movs	r3, #1
 800b6e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6e4:	e7f0      	b.n	800b6c8 <_vfiprintf_r+0x1bc>
 800b6e6:	ab03      	add	r3, sp, #12
 800b6e8:	9300      	str	r3, [sp, #0]
 800b6ea:	462a      	mov	r2, r5
 800b6ec:	4630      	mov	r0, r6
 800b6ee:	4b13      	ldr	r3, [pc, #76]	; (800b73c <_vfiprintf_r+0x230>)
 800b6f0:	a904      	add	r1, sp, #16
 800b6f2:	f7fd fbb1 	bl	8008e58 <_printf_float>
 800b6f6:	4607      	mov	r7, r0
 800b6f8:	1c78      	adds	r0, r7, #1
 800b6fa:	d1d6      	bne.n	800b6aa <_vfiprintf_r+0x19e>
 800b6fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6fe:	07d9      	lsls	r1, r3, #31
 800b700:	d405      	bmi.n	800b70e <_vfiprintf_r+0x202>
 800b702:	89ab      	ldrh	r3, [r5, #12]
 800b704:	059a      	lsls	r2, r3, #22
 800b706:	d402      	bmi.n	800b70e <_vfiprintf_r+0x202>
 800b708:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b70a:	f7fe f90b 	bl	8009924 <__retarget_lock_release_recursive>
 800b70e:	89ab      	ldrh	r3, [r5, #12]
 800b710:	065b      	lsls	r3, r3, #25
 800b712:	f53f af1d 	bmi.w	800b550 <_vfiprintf_r+0x44>
 800b716:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b718:	e71c      	b.n	800b554 <_vfiprintf_r+0x48>
 800b71a:	ab03      	add	r3, sp, #12
 800b71c:	9300      	str	r3, [sp, #0]
 800b71e:	462a      	mov	r2, r5
 800b720:	4630      	mov	r0, r6
 800b722:	4b06      	ldr	r3, [pc, #24]	; (800b73c <_vfiprintf_r+0x230>)
 800b724:	a904      	add	r1, sp, #16
 800b726:	f7fd fe37 	bl	8009398 <_printf_i>
 800b72a:	e7e4      	b.n	800b6f6 <_vfiprintf_r+0x1ea>
 800b72c:	0800bca4 	.word	0x0800bca4
 800b730:	0800bcaa 	.word	0x0800bcaa
 800b734:	0800bcae 	.word	0x0800bcae
 800b738:	08008e59 	.word	0x08008e59
 800b73c:	0800b4e9 	.word	0x0800b4e9

0800b740 <__swbuf_r>:
 800b740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b742:	460e      	mov	r6, r1
 800b744:	4614      	mov	r4, r2
 800b746:	4605      	mov	r5, r0
 800b748:	b118      	cbz	r0, 800b752 <__swbuf_r+0x12>
 800b74a:	6a03      	ldr	r3, [r0, #32]
 800b74c:	b90b      	cbnz	r3, 800b752 <__swbuf_r+0x12>
 800b74e:	f7fd ffd1 	bl	80096f4 <__sinit>
 800b752:	69a3      	ldr	r3, [r4, #24]
 800b754:	60a3      	str	r3, [r4, #8]
 800b756:	89a3      	ldrh	r3, [r4, #12]
 800b758:	071a      	lsls	r2, r3, #28
 800b75a:	d525      	bpl.n	800b7a8 <__swbuf_r+0x68>
 800b75c:	6923      	ldr	r3, [r4, #16]
 800b75e:	b31b      	cbz	r3, 800b7a8 <__swbuf_r+0x68>
 800b760:	6823      	ldr	r3, [r4, #0]
 800b762:	6922      	ldr	r2, [r4, #16]
 800b764:	b2f6      	uxtb	r6, r6
 800b766:	1a98      	subs	r0, r3, r2
 800b768:	6963      	ldr	r3, [r4, #20]
 800b76a:	4637      	mov	r7, r6
 800b76c:	4283      	cmp	r3, r0
 800b76e:	dc04      	bgt.n	800b77a <__swbuf_r+0x3a>
 800b770:	4621      	mov	r1, r4
 800b772:	4628      	mov	r0, r5
 800b774:	f7ff fda2 	bl	800b2bc <_fflush_r>
 800b778:	b9e0      	cbnz	r0, 800b7b4 <__swbuf_r+0x74>
 800b77a:	68a3      	ldr	r3, [r4, #8]
 800b77c:	3b01      	subs	r3, #1
 800b77e:	60a3      	str	r3, [r4, #8]
 800b780:	6823      	ldr	r3, [r4, #0]
 800b782:	1c5a      	adds	r2, r3, #1
 800b784:	6022      	str	r2, [r4, #0]
 800b786:	701e      	strb	r6, [r3, #0]
 800b788:	6962      	ldr	r2, [r4, #20]
 800b78a:	1c43      	adds	r3, r0, #1
 800b78c:	429a      	cmp	r2, r3
 800b78e:	d004      	beq.n	800b79a <__swbuf_r+0x5a>
 800b790:	89a3      	ldrh	r3, [r4, #12]
 800b792:	07db      	lsls	r3, r3, #31
 800b794:	d506      	bpl.n	800b7a4 <__swbuf_r+0x64>
 800b796:	2e0a      	cmp	r6, #10
 800b798:	d104      	bne.n	800b7a4 <__swbuf_r+0x64>
 800b79a:	4621      	mov	r1, r4
 800b79c:	4628      	mov	r0, r5
 800b79e:	f7ff fd8d 	bl	800b2bc <_fflush_r>
 800b7a2:	b938      	cbnz	r0, 800b7b4 <__swbuf_r+0x74>
 800b7a4:	4638      	mov	r0, r7
 800b7a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7a8:	4621      	mov	r1, r4
 800b7aa:	4628      	mov	r0, r5
 800b7ac:	f000 f806 	bl	800b7bc <__swsetup_r>
 800b7b0:	2800      	cmp	r0, #0
 800b7b2:	d0d5      	beq.n	800b760 <__swbuf_r+0x20>
 800b7b4:	f04f 37ff 	mov.w	r7, #4294967295
 800b7b8:	e7f4      	b.n	800b7a4 <__swbuf_r+0x64>
	...

0800b7bc <__swsetup_r>:
 800b7bc:	b538      	push	{r3, r4, r5, lr}
 800b7be:	4b2a      	ldr	r3, [pc, #168]	; (800b868 <__swsetup_r+0xac>)
 800b7c0:	4605      	mov	r5, r0
 800b7c2:	6818      	ldr	r0, [r3, #0]
 800b7c4:	460c      	mov	r4, r1
 800b7c6:	b118      	cbz	r0, 800b7d0 <__swsetup_r+0x14>
 800b7c8:	6a03      	ldr	r3, [r0, #32]
 800b7ca:	b90b      	cbnz	r3, 800b7d0 <__swsetup_r+0x14>
 800b7cc:	f7fd ff92 	bl	80096f4 <__sinit>
 800b7d0:	89a3      	ldrh	r3, [r4, #12]
 800b7d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b7d6:	0718      	lsls	r0, r3, #28
 800b7d8:	d422      	bmi.n	800b820 <__swsetup_r+0x64>
 800b7da:	06d9      	lsls	r1, r3, #27
 800b7dc:	d407      	bmi.n	800b7ee <__swsetup_r+0x32>
 800b7de:	2309      	movs	r3, #9
 800b7e0:	602b      	str	r3, [r5, #0]
 800b7e2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b7e6:	f04f 30ff 	mov.w	r0, #4294967295
 800b7ea:	81a3      	strh	r3, [r4, #12]
 800b7ec:	e034      	b.n	800b858 <__swsetup_r+0x9c>
 800b7ee:	0758      	lsls	r0, r3, #29
 800b7f0:	d512      	bpl.n	800b818 <__swsetup_r+0x5c>
 800b7f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7f4:	b141      	cbz	r1, 800b808 <__swsetup_r+0x4c>
 800b7f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7fa:	4299      	cmp	r1, r3
 800b7fc:	d002      	beq.n	800b804 <__swsetup_r+0x48>
 800b7fe:	4628      	mov	r0, r5
 800b800:	f7fe ff0e 	bl	800a620 <_free_r>
 800b804:	2300      	movs	r3, #0
 800b806:	6363      	str	r3, [r4, #52]	; 0x34
 800b808:	89a3      	ldrh	r3, [r4, #12]
 800b80a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b80e:	81a3      	strh	r3, [r4, #12]
 800b810:	2300      	movs	r3, #0
 800b812:	6063      	str	r3, [r4, #4]
 800b814:	6923      	ldr	r3, [r4, #16]
 800b816:	6023      	str	r3, [r4, #0]
 800b818:	89a3      	ldrh	r3, [r4, #12]
 800b81a:	f043 0308 	orr.w	r3, r3, #8
 800b81e:	81a3      	strh	r3, [r4, #12]
 800b820:	6923      	ldr	r3, [r4, #16]
 800b822:	b94b      	cbnz	r3, 800b838 <__swsetup_r+0x7c>
 800b824:	89a3      	ldrh	r3, [r4, #12]
 800b826:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b82a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b82e:	d003      	beq.n	800b838 <__swsetup_r+0x7c>
 800b830:	4621      	mov	r1, r4
 800b832:	4628      	mov	r0, r5
 800b834:	f000 f883 	bl	800b93e <__smakebuf_r>
 800b838:	89a0      	ldrh	r0, [r4, #12]
 800b83a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b83e:	f010 0301 	ands.w	r3, r0, #1
 800b842:	d00a      	beq.n	800b85a <__swsetup_r+0x9e>
 800b844:	2300      	movs	r3, #0
 800b846:	60a3      	str	r3, [r4, #8]
 800b848:	6963      	ldr	r3, [r4, #20]
 800b84a:	425b      	negs	r3, r3
 800b84c:	61a3      	str	r3, [r4, #24]
 800b84e:	6923      	ldr	r3, [r4, #16]
 800b850:	b943      	cbnz	r3, 800b864 <__swsetup_r+0xa8>
 800b852:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b856:	d1c4      	bne.n	800b7e2 <__swsetup_r+0x26>
 800b858:	bd38      	pop	{r3, r4, r5, pc}
 800b85a:	0781      	lsls	r1, r0, #30
 800b85c:	bf58      	it	pl
 800b85e:	6963      	ldrpl	r3, [r4, #20]
 800b860:	60a3      	str	r3, [r4, #8]
 800b862:	e7f4      	b.n	800b84e <__swsetup_r+0x92>
 800b864:	2000      	movs	r0, #0
 800b866:	e7f7      	b.n	800b858 <__swsetup_r+0x9c>
 800b868:	200001d4 	.word	0x200001d4

0800b86c <_raise_r>:
 800b86c:	291f      	cmp	r1, #31
 800b86e:	b538      	push	{r3, r4, r5, lr}
 800b870:	4604      	mov	r4, r0
 800b872:	460d      	mov	r5, r1
 800b874:	d904      	bls.n	800b880 <_raise_r+0x14>
 800b876:	2316      	movs	r3, #22
 800b878:	6003      	str	r3, [r0, #0]
 800b87a:	f04f 30ff 	mov.w	r0, #4294967295
 800b87e:	bd38      	pop	{r3, r4, r5, pc}
 800b880:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b882:	b112      	cbz	r2, 800b88a <_raise_r+0x1e>
 800b884:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b888:	b94b      	cbnz	r3, 800b89e <_raise_r+0x32>
 800b88a:	4620      	mov	r0, r4
 800b88c:	f000 f830 	bl	800b8f0 <_getpid_r>
 800b890:	462a      	mov	r2, r5
 800b892:	4601      	mov	r1, r0
 800b894:	4620      	mov	r0, r4
 800b896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b89a:	f000 b817 	b.w	800b8cc <_kill_r>
 800b89e:	2b01      	cmp	r3, #1
 800b8a0:	d00a      	beq.n	800b8b8 <_raise_r+0x4c>
 800b8a2:	1c59      	adds	r1, r3, #1
 800b8a4:	d103      	bne.n	800b8ae <_raise_r+0x42>
 800b8a6:	2316      	movs	r3, #22
 800b8a8:	6003      	str	r3, [r0, #0]
 800b8aa:	2001      	movs	r0, #1
 800b8ac:	e7e7      	b.n	800b87e <_raise_r+0x12>
 800b8ae:	2400      	movs	r4, #0
 800b8b0:	4628      	mov	r0, r5
 800b8b2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b8b6:	4798      	blx	r3
 800b8b8:	2000      	movs	r0, #0
 800b8ba:	e7e0      	b.n	800b87e <_raise_r+0x12>

0800b8bc <raise>:
 800b8bc:	4b02      	ldr	r3, [pc, #8]	; (800b8c8 <raise+0xc>)
 800b8be:	4601      	mov	r1, r0
 800b8c0:	6818      	ldr	r0, [r3, #0]
 800b8c2:	f7ff bfd3 	b.w	800b86c <_raise_r>
 800b8c6:	bf00      	nop
 800b8c8:	200001d4 	.word	0x200001d4

0800b8cc <_kill_r>:
 800b8cc:	b538      	push	{r3, r4, r5, lr}
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	4d06      	ldr	r5, [pc, #24]	; (800b8ec <_kill_r+0x20>)
 800b8d2:	4604      	mov	r4, r0
 800b8d4:	4608      	mov	r0, r1
 800b8d6:	4611      	mov	r1, r2
 800b8d8:	602b      	str	r3, [r5, #0]
 800b8da:	f7f5 fbca 	bl	8001072 <_kill>
 800b8de:	1c43      	adds	r3, r0, #1
 800b8e0:	d102      	bne.n	800b8e8 <_kill_r+0x1c>
 800b8e2:	682b      	ldr	r3, [r5, #0]
 800b8e4:	b103      	cbz	r3, 800b8e8 <_kill_r+0x1c>
 800b8e6:	6023      	str	r3, [r4, #0]
 800b8e8:	bd38      	pop	{r3, r4, r5, pc}
 800b8ea:	bf00      	nop
 800b8ec:	20001a64 	.word	0x20001a64

0800b8f0 <_getpid_r>:
 800b8f0:	f7f5 bbb8 	b.w	8001064 <_getpid>

0800b8f4 <__swhatbuf_r>:
 800b8f4:	b570      	push	{r4, r5, r6, lr}
 800b8f6:	460c      	mov	r4, r1
 800b8f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8fc:	4615      	mov	r5, r2
 800b8fe:	2900      	cmp	r1, #0
 800b900:	461e      	mov	r6, r3
 800b902:	b096      	sub	sp, #88	; 0x58
 800b904:	da0c      	bge.n	800b920 <__swhatbuf_r+0x2c>
 800b906:	89a3      	ldrh	r3, [r4, #12]
 800b908:	2100      	movs	r1, #0
 800b90a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b90e:	bf0c      	ite	eq
 800b910:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b914:	2340      	movne	r3, #64	; 0x40
 800b916:	2000      	movs	r0, #0
 800b918:	6031      	str	r1, [r6, #0]
 800b91a:	602b      	str	r3, [r5, #0]
 800b91c:	b016      	add	sp, #88	; 0x58
 800b91e:	bd70      	pop	{r4, r5, r6, pc}
 800b920:	466a      	mov	r2, sp
 800b922:	f000 f849 	bl	800b9b8 <_fstat_r>
 800b926:	2800      	cmp	r0, #0
 800b928:	dbed      	blt.n	800b906 <__swhatbuf_r+0x12>
 800b92a:	9901      	ldr	r1, [sp, #4]
 800b92c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b930:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b934:	4259      	negs	r1, r3
 800b936:	4159      	adcs	r1, r3
 800b938:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b93c:	e7eb      	b.n	800b916 <__swhatbuf_r+0x22>

0800b93e <__smakebuf_r>:
 800b93e:	898b      	ldrh	r3, [r1, #12]
 800b940:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b942:	079d      	lsls	r5, r3, #30
 800b944:	4606      	mov	r6, r0
 800b946:	460c      	mov	r4, r1
 800b948:	d507      	bpl.n	800b95a <__smakebuf_r+0x1c>
 800b94a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b94e:	6023      	str	r3, [r4, #0]
 800b950:	6123      	str	r3, [r4, #16]
 800b952:	2301      	movs	r3, #1
 800b954:	6163      	str	r3, [r4, #20]
 800b956:	b002      	add	sp, #8
 800b958:	bd70      	pop	{r4, r5, r6, pc}
 800b95a:	466a      	mov	r2, sp
 800b95c:	ab01      	add	r3, sp, #4
 800b95e:	f7ff ffc9 	bl	800b8f4 <__swhatbuf_r>
 800b962:	9900      	ldr	r1, [sp, #0]
 800b964:	4605      	mov	r5, r0
 800b966:	4630      	mov	r0, r6
 800b968:	f7fe feca 	bl	800a700 <_malloc_r>
 800b96c:	b948      	cbnz	r0, 800b982 <__smakebuf_r+0x44>
 800b96e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b972:	059a      	lsls	r2, r3, #22
 800b974:	d4ef      	bmi.n	800b956 <__smakebuf_r+0x18>
 800b976:	f023 0303 	bic.w	r3, r3, #3
 800b97a:	f043 0302 	orr.w	r3, r3, #2
 800b97e:	81a3      	strh	r3, [r4, #12]
 800b980:	e7e3      	b.n	800b94a <__smakebuf_r+0xc>
 800b982:	89a3      	ldrh	r3, [r4, #12]
 800b984:	6020      	str	r0, [r4, #0]
 800b986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b98a:	81a3      	strh	r3, [r4, #12]
 800b98c:	9b00      	ldr	r3, [sp, #0]
 800b98e:	6120      	str	r0, [r4, #16]
 800b990:	6163      	str	r3, [r4, #20]
 800b992:	9b01      	ldr	r3, [sp, #4]
 800b994:	b15b      	cbz	r3, 800b9ae <__smakebuf_r+0x70>
 800b996:	4630      	mov	r0, r6
 800b998:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b99c:	f000 f81e 	bl	800b9dc <_isatty_r>
 800b9a0:	b128      	cbz	r0, 800b9ae <__smakebuf_r+0x70>
 800b9a2:	89a3      	ldrh	r3, [r4, #12]
 800b9a4:	f023 0303 	bic.w	r3, r3, #3
 800b9a8:	f043 0301 	orr.w	r3, r3, #1
 800b9ac:	81a3      	strh	r3, [r4, #12]
 800b9ae:	89a3      	ldrh	r3, [r4, #12]
 800b9b0:	431d      	orrs	r5, r3
 800b9b2:	81a5      	strh	r5, [r4, #12]
 800b9b4:	e7cf      	b.n	800b956 <__smakebuf_r+0x18>
	...

0800b9b8 <_fstat_r>:
 800b9b8:	b538      	push	{r3, r4, r5, lr}
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	4d06      	ldr	r5, [pc, #24]	; (800b9d8 <_fstat_r+0x20>)
 800b9be:	4604      	mov	r4, r0
 800b9c0:	4608      	mov	r0, r1
 800b9c2:	4611      	mov	r1, r2
 800b9c4:	602b      	str	r3, [r5, #0]
 800b9c6:	f7f5 fbb2 	bl	800112e <_fstat>
 800b9ca:	1c43      	adds	r3, r0, #1
 800b9cc:	d102      	bne.n	800b9d4 <_fstat_r+0x1c>
 800b9ce:	682b      	ldr	r3, [r5, #0]
 800b9d0:	b103      	cbz	r3, 800b9d4 <_fstat_r+0x1c>
 800b9d2:	6023      	str	r3, [r4, #0]
 800b9d4:	bd38      	pop	{r3, r4, r5, pc}
 800b9d6:	bf00      	nop
 800b9d8:	20001a64 	.word	0x20001a64

0800b9dc <_isatty_r>:
 800b9dc:	b538      	push	{r3, r4, r5, lr}
 800b9de:	2300      	movs	r3, #0
 800b9e0:	4d05      	ldr	r5, [pc, #20]	; (800b9f8 <_isatty_r+0x1c>)
 800b9e2:	4604      	mov	r4, r0
 800b9e4:	4608      	mov	r0, r1
 800b9e6:	602b      	str	r3, [r5, #0]
 800b9e8:	f7f5 fbb0 	bl	800114c <_isatty>
 800b9ec:	1c43      	adds	r3, r0, #1
 800b9ee:	d102      	bne.n	800b9f6 <_isatty_r+0x1a>
 800b9f0:	682b      	ldr	r3, [r5, #0]
 800b9f2:	b103      	cbz	r3, 800b9f6 <_isatty_r+0x1a>
 800b9f4:	6023      	str	r3, [r4, #0]
 800b9f6:	bd38      	pop	{r3, r4, r5, pc}
 800b9f8:	20001a64 	.word	0x20001a64

0800b9fc <_init>:
 800b9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9fe:	bf00      	nop
 800ba00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba02:	bc08      	pop	{r3}
 800ba04:	469e      	mov	lr, r3
 800ba06:	4770      	bx	lr

0800ba08 <_fini>:
 800ba08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba0a:	bf00      	nop
 800ba0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba0e:	bc08      	pop	{r3}
 800ba10:	469e      	mov	lr, r3
 800ba12:	4770      	bx	lr
